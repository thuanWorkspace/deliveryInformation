/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../core/Error","../../layers/support/associatedFeatureServiceUtils","../../layers/support/LayerLoadContext","../../layers/support/layerUtils","../../layers/support/lazyLayerLoader","../PortalItem","./loadUtils","./portalItemUtils"],(function(e,a,r,t,s,n,c,i,o){"use strict";async function u(e){!e.portalItem||e.portalItem instanceof c||(e={...e,portalItem:new c(e.portalItem)});const a=await l(e.portalItem);return new(0,a.constructor)({portalItem:e.portalItem,...a.properties})}async function l(e){await e.load();const a=new t.LayerLoadContext;return p(await y(e,a))}async function y(e,r){switch(e.type){case"Map Service":return m(e,r);case"Feature Service":return f(e,r);case"Feature Collection":return L(e);case"Scene Service":return d(e,r);case"Image Service":return S(e,r);case"Stream Service":return w();case"Vector Tile Service":return N();case"GeoJson":return I();case"CSV":return T();case"KML":return v();case"WFS":return g();case"WMTS":return h();case"WMS":return M();case"Feed":return b();case"Group Layer":return F();default:throw new a("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type})}}async function p(e){const a=e.className,r=n.layerLookupMap[a];return{constructor:await r(),properties:e.properties}}async function m(e,a){return await C(e,a)?{className:"TileLayer"}:{className:"MapImageLayer"}}async function f(e,a){const r=await G(e,a);if("object"==typeof r){const e={};return null!=r.id&&(e.layerId=r.id),{className:r.className||"FeatureLayer",properties:e}}return{className:"GroupLayer"}}async function d(e,a){const t=await G(e,a,(async()=>{try{if(!e.url)return[];const{serverUrl:t}=await r.findAssociatedFeatureService(e.url,{sceneLayerItem:e}),s=await a.fetchServiceMetadata(t);return s?.tables??[]}catch{return[]}}));if("object"==typeof t){const r={};let n;if(null!=t.id?(r.layerId=t.id,n=`${e.url}/layers/${t.id}`):n=e.url,e.typeKeywords?.length)for(const a of Object.keys(s.sceneServiceLayerTypeToClassName))if(e.typeKeywords.includes(a))return{className:s.sceneServiceLayerTypeToClassName[a]};const c=await a.fetchServiceMetadata(n);return{className:s.sceneServiceLayerTypeToClassName[c?.layerType]||"SceneLayer",properties:r}}if(!1===t){const r=await a.fetchServiceMetadata(e.url);if("Voxel"===r?.layerType)return{className:"VoxelLayer"}}return{className:"GroupLayer"}}async function L(e){await e.load();const a=o.hasTypeKeyword(e,"Map Notes"),r=o.hasTypeKeyword(e,"Markup");if(a||r)return{className:"MapNotesLayer"};if(o.hasTypeKeyword(e,"Route Layer"))return{className:"RouteLayer"};const t=await e.fetchData();return 1===i.getNumLayersAndTables(t)?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function S(e,a){await e.load();const r=e.typeKeywords?.map((e=>e.toLowerCase()))??[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const t=await e.fetchData(),s=t?.layerType;if("ArcGISTiledImageServiceLayer"===s)return{className:"ImageryTileLayer"};if("ArcGISImageServiceLayer"===s)return{className:"ImageryLayer"};const n=await a.fetchServiceMetadata(e.url),c=n.cacheType?.toLowerCase(),i=n.capabilities?.toLowerCase().includes("tilesonly");return"map"===c||i?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function w(){return{className:"StreamLayer"}}function N(){return{className:"VectorTileLayer"}}function I(){return{className:"GeoJSONLayer"}}function T(){return{className:"CSVLayer"}}function v(){return{className:"KMLLayer"}}function g(){return{className:"WFSLayer"}}function M(){return{className:"WMSLayer"}}function h(){return{className:"WMTSLayer"}}function b(){return{className:"StreamLayer"}}function F(){return{className:"GroupLayer"}}async function C(e,a){return(await a.fetchServiceMetadata(e.url)).tileInfo}async function G(e,a,r){const t=e.url;if(!t||/\/\d+$/.test(t))return{};await e.load();let s=await e.fetchData();if("Feature Service"===e.type){const e=await i.preprocessFSItemData(s,t,a),r=K(e);if("object"==typeof r){const a=i.getSubtypeGroupLayerIds(e),t=i.getOrientedImageryLayerIds(e);r.className=null!=r.id&&a.includes(r.id)?"SubtypeGroupLayer":null!=r.id&&t?.includes(r.id)?"OrientedImageryLayer":"FeatureLayer"}return r}"Scene Service"===e.type&&(s=await i.populateSceneServiceItemData(e,s,a));if(i.getNumLayersAndTables(s)>0)return K(s);const n=await a.fetchServiceMetadata(t);return r&&(n.tables=await r()),K(n)}function K(e){return 1===i.getNumLayersAndTables(e)&&{id:i.getFirstLayerOrTableId(e)}}e.fromItem=u,e.selectLayerClassPath=y,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
