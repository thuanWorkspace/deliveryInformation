/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../core/arrayUtils","../../../core/has","../../../intl/messages","../../../intl/substitute","../../../layers/support/fieldUtils","../../../popup/content/AttachmentsContent","../../../popup/content/Content","../../../popup/content/CustomContent","../../../popup/content/ExpressionContent","../../../popup/content/FieldsContent","../../../popup/content/MediaContent","../../../popup/content/RelationshipContent","../../../popup/content/TextContent","../../../popup/ExpressionInfo","../../../popup/FieldInfo","../../../renderers/support/utils","../../../renderers/visualVariables/support/visualVariableUtils","../../support/adapters/support/utils"],(function(e,n,t,i,s,o,a,l,r,p,u,f,d,m,c,g,x,b,F){"use strict";let y=0;function h(e=0){}const I="expression/";function $(e){return"hasVisualVariables"in e&&e.hasVisualVariables()?e.visualVariables.filter((e=>!b.viewScaleRE.test(e.valueExpression)&&(!("target"in e)||"outline"!==e.target))):[]}function T(e,n){if(!n)return null;const t=F.getFeatureReductionFields(e);return t?.find((e=>e.name.toLowerCase()===n.toLowerCase()))}function V(e,n,t){let i=null;if(t){const n=e.featureReduction;n&&"popupTemplate"in n&&n.popupTemplate&&(i=n.popupTemplate.fieldInfos)}else"popupTemplate"in e&&e.popupTemplate&&(i=e.popupTemplate.fieldInfos);const s=t?T(e,n):e.getField(n);let a=null;if(i&&i.some((e=>!(!e||e.fieldName.toLowerCase()!==s?.name.toLowerCase())&&(a=e.clone(),!0))),!a){const e=o.numericTypes.includes(s.type),n="integer"===s.type||"small-integer"===s.type;a=new g({fieldName:s.name,isEditable:s.editable,visible:!0,format:e?{places:n?0:2,digitSeparator:!0}:null})}return a.label||(a.label=s.alias),a}function C(e){const{expression:n,title:t,returnType:i}=e;return new c({name:"expr"+y++,expression:n,title:t,returnType:i})}function w(e){const n="number"===e.returnType?{places:2,digitSeparator:!0}:null;return new g({fieldName:`${I}${e.name}`,visible:!0,format:n})}async function v(e){const t=await i.fetchMessageBundle("esri/smartMapping/t9n/smartMapping"),{renderer:o,layer:a,normFieldExpressionTemplate:l,isFeatureReduction:r}=e,p=[],u=[],f=x.getAttributes(o,$);for(const n of f)if("field"===n.type)p.push(V(a,n.field,r));else if("normalized-field"===n.type){const e=r?T(a,n.field):a.getField(n.field),i=r?T(a,n.normalizationField):a.getField(n.normalizationField),o=C({type:"expression",expression:`\n      $feature["${e.name}"];\n      $feature["${i.name}"];\n      ${"percentage"===l?`($feature["${e.name}"] / $feature["${i.name}"]) * 100;`:`$feature["${e.name}"] / $feature["${i.name}"];`}\n      `,title:"percentage"===l?s.substitute(t.normFieldLabelAsPercent,{expression1:e.alias,expression2:i.alias}):s.substitute(t.normFieldLabel,{expression1:e.alias,expression2:i.alias}),returnType:"number"});p.push(w(o),V(a,n.field,r),V(a,n.normalizationField,r)),u.push(o)}else if("expression"===n.type){const e=C(n);p.push(w(e)),u.push(e)}return{fieldInfos:n.unique(p,((e,n)=>e.fieldName===n.fieldName)),expressionInfos:n.unique(u,((e,n)=>e.expression===n.expression))}}async function z(e,n,t){const{fieldInfos:o,expressionInfos:a}=n,l=await i.fetchMessageBundle("esri/smartMapping/t9n/smartMapping");if(o.length>2)return[new u({fieldInfos:o})];const r=[];for(const i of o){const n=i.fieldName;let o=i.label;if(!o){const i=t?T(e,n):e.getField(n);if(i)o=i.alias||n;else if(a){const e=n.split(I)[1],t=a[a.findIndex((n=>n.name===e))];t&&(o=t.title||t.name)}}r.push(new m({text:s.substitute(l.fieldInfo,{fieldLabel:o,fieldValue:`{${n}}`})}))}return r}function E(e){return!(!("normalizationField"in e)||!e.normalizationField)||"hasVisualVariables"in e&&e.hasVisualVariables()&&e.visualVariables.some((e=>!(!("normalizationField"in e)||!e.normalizationField)))}e.expressionFieldPrefix=I,e.getContentFromFieldInfos=z,e.getExpressionInfo=C,e.getFieldAndExpressionInfos=v,e.getFieldInfo=V,e.getFieldInfoFromExpressionInfo=w,e.getPrimaryVisualVariables=$,e.hasNormalizedField=E,e.resetSuffixForTests=h,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
