/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../core/Error","./support/utils","../support/binningUtils","../support/utils","../support/adapters/support/layerUtils"],(function(a,e,i,s,r){"use strict";const n=5;async function l(l){if(!l?.layer||!l.field&&!l.valueExpression)throw new a("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(l.valueExpression&&!l.view)throw new a("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");l.forBinning&&i.verifyBinningParams(l,"class-breaks");const{layer:t,...o}=l,u=l.forBinning?r.binningCapableLayerTypes:r.featureCapableLayerTypes,p=r.createLayerAdapter(t,u,l.forBinning);if(!p)throw new a("class-breaks:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(u).join(", "));const m={layerAdapter:p,...o};m.normalizationType=s.getNormalizationType(m),m.numClasses=m.numClasses||n;const f=null!=m.signal?{signal:m.signal}:null;await p.load(f);const d=m.field,c=m.minValue,w=m.maxValue,y=null!=c||null!=w,h=m.classificationMethod,v="percent-of-total"===m.normalizationType,b=!1!==m.analyzeData,g=d?p.getField(d):null,z=await s.getFieldsList({field:m.field,normalizationField:m.normalizationField,valueExpression:m.valueExpression}),k=e.verifyBasicFieldValidity(p,z,"class-breaks:invalid-parameters");if(k)throw k;if(g){const a=e.verifyNumericField(p,g,"class-breaks:invalid-parameters");if(a)throw a}if(m.valueExpression&&m.normalizationType)throw new a("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");if(y)if(b){if(v&&null==m.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified")}else{if(null==c||null==w)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(c>=w)throw new a("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(h&&"equal-interval"!==h)throw new a("class-breaks:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(v&&null==m.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false")}else if(!b)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");const x=e.verifyFilterValidty(m.filter,"class-breaks:invalid-parameters");if(x)throw x;return m}async function t(a){const{layerAdapter:e,...i}=await l(a);return e.classBreaks(i)}return t}));
