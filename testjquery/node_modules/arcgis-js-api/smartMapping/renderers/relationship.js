/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../core/Error","../../core/lang","../../intl/messages","../../renderers/support/AuthoringInfo","../../renderers/support/AuthoringInfoClassBreakInfo","../../renderers/support/AuthoringInfoFieldInfo","./type","./support/utils","../support/binningUtils","../support/adapters/support/layerUtils","../symbology/relationship","../../symbols/support/utils"],(function(e,a,n,i,l,r,s,o,t,d,u,m,f){"use strict";const p=new Set(["equal-interval","natural-breaks","quantile"]),c=new Set(["HH","HL","LH","LL"]),h={2:[["HL","HH"],["LL","LH"]],3:[["HL","HM","HH"],["ML","MM","MH"],["LL","LM","LH"]],4:[["HL","HM1","HM2","HH"],["M2L","M2M1","M2M2","M2H"],["M1L","M1M1","M1M2","M1H"],["LL","LM1","LM2","LH"]]},y={2:["L","H"],3:["L","M","H"],4:["L","M1","M2","H"]},b=e=>({minValue:e.minValue,maxValue:e.maxValue});async function g(e){if(!(e?.layer&&e.view&&e.field1&&e.field2))throw new a("relationship-renderer:missing-parameters","'layer', 'view', 'field1' and 'field2' parameters are required");e.forBinning&&d.verifyBinningParams(e,"relationship-renderer");const n={...e,layer:e.layer,field1:e.field1,field2:e.field2};if(n.symbolType??(n.symbolType="2d"),n.defaultSymbolEnabled??(n.defaultSymbolEnabled=!0),n.classificationMethod??(n.classificationMethod="quantile"),n.numClasses??(n.numClasses=3),n.focus??(n.focus=null),!p.has(n.classificationMethod))throw new a("relationship-renderer:invalid-parameters",`classification method ${n.classificationMethod} is not supported`);if(n.numClasses<2||n.numClasses>4)throw new a("relationship-renderer:invalid-parameters","'numClasses' must be 2, 3 or 4");if(e.focus&&!c.has(e.focus))throw new a("relationship-renderer:invalid-parameters","'focus' must be 'HH', 'HL', 'LH', 'LL' or null");const i=e.forBinning?u.binningCapableLayerTypes:u.featureCapableLayerTypes,l=u.createLayerAdapter(n.layer,i,e.forBinning);if(!l)throw new a("relationship-renderer:invalid-parameters","'layer' must be one of these types: "+u.getLayerTypeLabels(i).join(", "));n.layer=l;const r=null!=n.signal?{signal:n.signal}:null;await l.load(r);const s=l.geometryType,o=n.symbolType.includes("3d");if(n.outlineOptimizationEnabled="polygon"===s&&n.outlineOptimizationEnabled,n.sizeOptimizationEnabled=("point"===s||"multipoint"===s||"polyline"===s)&&n.sizeOptimizationEnabled,"mesh"===s)n.symbolType="3d-volumetric",n.colorMixMode=n.colorMixMode||"replace",n.edgesType=n.edgesType||"none";else{if("3d-volumetric-uniform"===n.symbolType&&"point"!==s)throw new a("relationship-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");if(o&&"polygon"===s)throw new a("relationship-renderer:not-supported","3d symbols are not supported for polygon layers");if(n.symbolType.includes("3d-volumetric")&&(!n.view||"3d"!==n.view.type))throw new a("relationship-renderer:invalid-parameters","'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'")}const{field1:m,field2:f}=n,h=[m.field,f.field];m.normalizationField&&h.push(m.normalizationField),f.normalizationField&&h.push(f.normalizationField);const y=t.verifyBasicFieldValidity(l,h,"relationship-renderer:invalid-parameters");if(y)throw y;return n}async function w(e){if(!e?.renderer||!e.numClasses)throw new a("update-relationship-renderer:missing-parameters","'renderer' and 'numClasses' parameters are required");const{field1:n,field2:i,renderer:l,numClasses:r,colors:s}=e,o=r**2;if((n||i)&&!(n&&i&&n.field&&i.field))throw new a("update-relationship-renderer:missing-parameters","'field1' and 'field2' parameters are required");if(n&&!n.classBreakInfos||i&&!i.classBreakInfos)throw new a("update-relationship-renderer:missing-parameters","'field1.classBreakInfos' and 'field2.classBreakInfos' are required");if(!l.authoringInfo)throw new a("update-relationship-renderer:missing-parameters","'renderer.authoringInfo' is required");if(l.uniqueValueInfos?.length!==o)throw new a("update-relationship-renderer:invalid-parameters",`Renderer must have ${o} unique value infos to support ${r} classes`);if(s&&s.length!==o)throw new a("update-relationship-renderer:invalid-parameters",`The scheme must have ${o} colors`);return e}async function v(e){let a=e.relationshipScheme,n=null,i=null;const l=await t.getBasemapInfo(e.basemap,e.view);if(n=null!=l.basemapId?l.basemapId:null,i=null!=l.basemapTheme?l.basemapTheme:null,a)return{scheme:m.cloneScheme(a),basemapId:n,basemapTheme:i};const r=m.getSchemes({basemapTheme:i,geometryType:e.geometryType,theme:e.theme,worldScale:e.worldScale,view:e.view});return r&&(a=r.primaryScheme,n=r.basemapId,i=r.basemapTheme),{scheme:a,basemapId:n,basemapTheme:i}}function I(e,a){const i=n.clone(h[e]);return m.flatten2DArray(i,a)}function M(e,a){return I(e,a).map((e=>({value:e,count:0})))}function F(e,a,n,i){const{field:l,normalizationField:r}=e,{field:s,normalizationField:o}=a,t=n.map((e=>[e.minValue,e.maxValue])),d=i.map((e=>[e.minValue,e.maxValue])),u=t.length,m=y[u];return`\n  var field1 = $feature['${l}'];\n  var field2 = $feature['${s}'];\n  var hasNormField1 = ${r?"true":"false"};\n  var hasNormField2 = ${o?"true":"false"};\n  var normField1 = ${r?`$feature['${r}']`:"null"};\n  var normField2 = ${o?`$feature['${o}']`:"null"};\n\n  if (\n    IsEmpty(field1) ||\n    IsEmpty(field2) ||\n    (hasNormField1 && (IsEmpty(normField1) || normField1 == 0)) ||\n    (hasNormField2 && (IsEmpty(normField2) || normField2 == 0))\n  ) {\n    return null;\n  }\n\n  var value1 = IIf(hasNormField1, (field1 / normField1), field1);\n  var value2 = IIf(hasNormField2, (field2 / normField2), field2);\n\n  var breaks1 = ${JSON.stringify(t)};\n  var breaks2 = ${JSON.stringify(d)};\n  var classCodes = ${JSON.stringify(m)};\n\n  function getClassCode(value, breaks) {\n    var code = null;\n\n    for (var i in breaks) {\n      var info = breaks[i];\n      if (value >= info[0] && value <= info[1]) {\n        code = classCodes[i];\n        break;\n      }\n    }\n\n    return code;\n  }\n\n  var code1 = getClassCode(value1, breaks1);\n  var code2 = getClassCode(value2, breaks2);\n\n  var classValue = IIf(IsEmpty(code1) || IsEmpty(code2), null, code1 + code2);\n  return classValue;\n  `}async function T(e,n,r){const s=await i.fetchMessageBundle("esri/smartMapping/t9n/smartMapping"),{basemap:t,classificationMethod:d,field1:u,field2:f,focus:p,numClasses:c,signal:h}=e,y=e.layer,g=n.classBreakInfos,w=r.classBreakInfos;if(c!==g.length||g.length!==w.length)throw new a("relationship-renderer:error","incompatible class breaks");const I=M(c,p),T=F(e.field1,e.field2,g,w),z=(await v({basemap:t,geometryType:y.geometryType,theme:"default",relationshipScheme:e.relationshipScheme,worldScale:!!e.symbolType?.includes("3d-volumetric"),view:e.view})).scheme,C=await o.createRenderer({layer:y,basemap:t,valueExpression:T,valueExpressionTitle:s.relationship.legendTitle,numTypes:-1,sortEnabled:!1,defaultSymbolEnabled:e.defaultSymbolEnabled,typeScheme:{colors:m.getColors(z,c,p),...z},statistics:{uniqueValueInfos:I},legendOptions:e.legendOptions,outlineOptimizationEnabled:e.outlineOptimizationEnabled,sizeOptimizationEnabled:e.sizeOptimizationEnabled,symbolType:e.symbolType,colorMixMode:e.colorMixMode,edgesType:e.edgesType,view:e.view,signal:h}),L=C.renderer,k=L.uniqueValueInfos,V=s.relationship;for(const a of k??[])a.label=V[a.value];const H=new l({type:"relationship",classificationMethod:d,numClasses:c,focus:p,field1:{field:u.field,normalizationField:u.normalizationField,label:u.label,classBreakInfos:g.map(b)},field2:{field:f.field,normalizationField:f.normalizationField,label:f.label,classBreakInfos:w.map(b)}});return L.authoringInfo=H,{renderer:L,classBreaks:{field1:n,field2:r},uniqueValueInfos:C.uniqueValueInfos,relationshipScheme:z,basemapId:C.basemapId,basemapTheme:C.basemapTheme}}function z(e,a,n){const i=I(a,n);e.sort(((e,a)=>{const n=i.indexOf(e.value),l=i.indexOf(a.value);let r=0;return n<l?r=-1:n>l&&(r=1),r}))}function C(e,a){const n=e.authoringInfo;n.numClasses=a.numClasses,n.focus=a.focus||null,n.focus||delete n.focus;const{field1:i,field2:l}=a;n.field1=new s.AuthoringInfoFieldInfo({field:i.field,normalizationField:i.normalizationField,label:i.label,classBreakInfos:i.classBreakInfos.map((e=>new r.AuthoringInfoClassBreakInfo(b(e))))}),n.field2=new s.AuthoringInfoFieldInfo({field:l.field,normalizationField:l.normalizationField,label:l.label,classBreakInfos:l.classBreakInfos.map((e=>new r.AuthoringInfoClassBreakInfo(b(e))))}),e.authoringInfo=n}async function L(e){const a=await w(e),{field1:n,field2:i,renderer:l,numClasses:r,focus:s,colors:o}=a,d=l.clone();d.valueExpression=F(n,i,n.classBreakInfos,i.classBreakInfos);const u=d.uniqueValueInfos??[];if(z(u,r,s),o){const e=t.createColors(o,o.length);u.forEach(((a,n)=>f.applyColorToSymbol(a.symbol,e[n])))}return C(d,a),d}async function k(e){const n=await g(e),{layer:i,classificationMethod:l,field1:r,field2:s,numClasses:o,view:d,signal:u}=n,m={layer:i,classificationMethod:l,field:r.field,normalizationField:r.normalizationField,normalizationType:r.normalizationField?"field":null,minValue:r.minValue,maxValue:r.maxValue,analyzeData:!(null!=r.minValue&&null!=r.maxValue),numClasses:o,view:d,signal:u},f={layer:i,classificationMethod:l,field:s.field,normalizationField:s.normalizationField,normalizationType:s.normalizationField?"field":null,minValue:s.minValue,maxValue:s.maxValue,analyzeData:!(null!=s.minValue&&null!=s.maxValue),numClasses:o,view:d,signal:u},[p,c]=await Promise.all([t.getClassBreaks(m),t.getClassBreaks(f)]);if(!p||!c)throw new a("relationship-renderer:error","error when calculating class breaks");return T(n,p.result,c.result)}e.createRenderer=k,e.updateRenderer=L,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
