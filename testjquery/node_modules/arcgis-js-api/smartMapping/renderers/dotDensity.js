/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../renderers/ClassBreaksRenderer","../../renderers/DictionaryRenderer","../../renderers/DotDensityRenderer","../../renderers/HeatmapRenderer","../../renderers/PieChartRenderer","../../renderers/Renderer","../../renderers/SimpleRenderer","../../renderers/UniqueValueRenderer","../../renderers/support/jsonUtils","../../core/Logger","../../core/Error","../../geometry/support/scaleUtils","../../renderers/support/AuthoringInfo","../heuristics/outline","./support/dotDensityUtils","./support/utils","../statistics/spatialStatistics","../statistics/summaryStatisticsForAttributes","../statistics/support/attributeDensity","../support/binningUtils","../support/utils","../support/adapters/support/layerUtils","../symbology/dotDensity"],(function(e,t,r,a,i,n,s,l,o,d,u,p,y,c,m,g,b,f,v,w,h,S,V,T){"use strict";const D=500;async function E(e){const t=e.view;if(!(e?.layer&&t&&e.attributes?.length))throw new p("dot-density-renderer:missing-parameters","'layer', 'view' and 'attributes' parameters are required");if(e.attributes.length>8)throw new p("dot-density-renderer:invalid-parameters","Dot density renderer does not support more than 8 attributes");e.forBinning&&h.verifyBinningParams(e,"dot-density-renderer");const r={...e,view:t,layer:e.layer,attributes:e.attributes},a=[V.LayerType.FeatureLayer,V.LayerType.OGCFeatureLayer,V.LayerType.GeoJSONLayer,V.LayerType.WFSLayer],i=e.forBinning?V.binningCapableLayerTypes:a,n=V.createLayerAdapter(r.layer,i,e.forBinning);if(!n)throw new p("dot-density-renderer:invalid-parameters","'layer' must be one of these types: "+V.getLayerTypeLabels(i).join(", "));r.layer=n,r.dotBlendingEnabled??(r.dotBlendingEnabled=!0),r.dotValueOptimizationEnabled??(r.dotValueOptimizationEnabled=!0);const s=null!=r.signal?{signal:r.signal}:null;await Promise.all([t.when(),n.load(s)]);if("polygon"!==n.geometryType)throw new p("dot-density-renderer:not-supported","Dot density renderer is supported for polygon layers only");const l=[],o=r.attributes;for(const u of o){const e=await S.getFieldsList({field:u.field,valueExpression:u.valueExpression});l.push(...e)}const d=b.verifyBasicFieldValidity(n,l.filter(Boolean),"dot-density-renderer:invalid-parameters");if(d)throw d;return r}async function x(e){let t=e.dotDensityScheme,r=null,a=null;const i=await b.getBasemapInfo(e.basemap,e.view);if(r=null!=i.basemapId?i.basemapId:null,a=null!=i.basemapTheme?i.basemapTheme:null,t)return{scheme:T.cloneScheme(t),basemapId:r,basemapTheme:a};const n=T.getSchemes({numColors:e.attributes.length,basemapTheme:a});return n&&(t=n.primaryScheme,r=n.basemapId,a=n.basemapTheme),{scheme:t,basemapId:r,basemapTheme:a}}async function L(e){const{view:t,layer:r,attributes:a,signal:i}=e,n=await r.getSampleFeatures({view:t,sampleSize:D,returnGeometry:!0,signal:i}),[s,l]=await Promise.all([f({features:n,geometryType:r.geometryType}),v({layer:r,attributes:a,includeZeros:!1,includeNegatives:!1,view:t,signal:i})]),o=null!=s&&"avgSize"in s&&s.avgSize,d=l.avg;if(!o)throw new p("dot-density-renderer:insufficient-info","Average polygon size is invalid");if(!d)throw new p("dot-density-renderer:insufficient-info","Average attribute value is invalid");const u=y.getResolutionForScale(t.scale,t.spatialReference),c=o*o/(u*u)*.1;return{dotValue:g.roundValue(d/c)||1,referenceScale:t.scale,minSliderValue:1,maxSliderValue:g.roundValue(d)}}async function F(e){const{view:t,layer:r,attributes:a,signal:i}=e,n=[];for(const p of a){const e=await S.getFieldsList({field:p.field,valueExpression:p.valueExpression});n.push(...e)}const s=await r.getSampleFeatures({view:t,sampleSize:D,requiredFields:n,returnGeometry:!0,signal:i}),l=await w({features:s,attributes:a,includeZeros:!1,includeNegatives:!1,view:t});if(!l.avgDensity||!l.minDensity||!l.maxDensity)throw new p("dot-density-renderer:insufficient-info","Invalid density values");const o=y.getResolutionForScale(t.scale,t.spatialReference),d=o*o,u=g.roundValue(l.minDensity*d),c=g.roundValue(l.maxDensity*d),m=10;let b=g.roundValue(l.avgDensity*d*m)||1;return b>c&&(b=c),{dotValue:b,referenceScale:t.scale,minSliderValue:u,maxSliderValue:c}}async function R(e){const t=await E(e),r=t.layer,i=r.geometryType,n=await x(t),s=n?.scheme;if(!s)throw new p("dot-density-renderer:insufficient-info","Unable to find dot-density scheme");const l=t.view,o={layer:r,view:l,attributes:t.attributes,signal:t.signal},d={layer:t.layer,view:l,signal:t.signal},[u,y]=await Promise.all([t.trueDensity?F(o):L(o),t.outlineOptimizationEnabled?m(d).catch(b.errorCallback):null]),{dotValue:g,referenceScale:f,minSliderValue:v,maxSliderValue:w}=u,h=b.createColors(s.colors,t.attributes.length),S=t.attributes.map(((e,t)=>({field:e.field,valueExpression:e.valueExpression,label:e.label,valueExpressionTitle:e.valueExpressionTitle,color:h[t]}))),V=new a({attributes:S,dotBlendingEnabled:t.dotBlendingEnabled,outline:y?b.getSymbolOutlineFromScheme(s,i,y.opacity):null,dotValue:g,referenceScale:t.dotValueOptimizationEnabled?f:null,legendOptions:t.legendOptions});return y&&y.visualVariables&&y.visualVariables.length&&(V.visualVariables=y.visualVariables.map((e=>e.clone()))),V.authoringInfo=new c({type:"dot-density",minSliderValue:v,maxSliderValue:w}),{renderer:V,dotDensityScheme:s,basemapId:n.basemapId,basemapTheme:n.basemapTheme}}e.createRenderer=R,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
