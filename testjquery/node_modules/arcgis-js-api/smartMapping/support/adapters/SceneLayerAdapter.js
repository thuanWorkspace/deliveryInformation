/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../Graphic","../../../core/arrayUtils","../../../core/Error","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../layers/support/fieldType","../../../layers/support/fieldUtils","../../../rest/support/FeatureSet","../../statistics/support/statsWorker","../../statistics/support/WorkerClient","../utils","./FeatureLayerAdapter","./LayerAdapter","./support/utils","../../../statistics/utils"],(function(e,t,a,r,s,i,n,o,l,u,c,p,d,m,h,y,f,g,w,F){"use strict";let _=class extends g{constructor(e){super(e),this._featureLayerAdapter=null,this.workerClient=null}destroy(){this.workerClient?.destroy()}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!e||!a.length)return e;const r=this.layer.objectIdField,s=e.clone(),i=t.filter((e=>{const t=this.layer.getField(e);return!a.includes(t.name)})),n=i.some((e=>this.layer.getField(e).name===r));return s.outFields=n?i:[...i,r],s}async _fetchFeaturesFromMemory(e,t,a){if(!e)throw new r("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const n=await e.whenLayerView(this.layer),o=new AbortController,l=o.signal,u=i.whenOnce((()=>!n.updating),l);await s.timeout(u,5e3,o);const c=w.getMissingFields(this,a,n);s.throwIfAborted(l);const p=this._updateQuery(t,a??[],c),d=await n.queryFeatures(p,{signal:l});s.throwIfAborted(l);const m=d.features;return c.length?n.whenGraphicAttributes(m,c):m}async _fetchFeaturesJSONFromMemory(e,t,a){return this._fetchFeaturesFromMemory(e,t,a).then(w.ensureFeaturesJSON)}_fetchFeaturesForStats(e,t){return y.getFieldsList({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t)))}async _processStatsFromMemoryParams(e){const t=e.features;if(t?.length){return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:t}:{featuresJSON:t}}const{view:a,field:s,normalizationField:i,valueExpression:n,signal:o}=e,l=await this._fetchFeaturesForStats({field:s,valueExpression:n,normalizationField:i,view:a,signal:o});if(!l?.length)throw new r("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");return{graphics:l}}_generateFeatureSetForCachedHistogram(e,a=e.minimum,r=e.maximum,s){const i=[];for(let t=0;t<s;t++)i[t]=0;const n=e.counts.length,o=e.minimum,l=e.maximum;for(let t=0;t<n;t++){const u=(t+.5)/n,c=((1-u)*o+u*l-a)/(r-a)*s;c>=0&&c<=s&&(i[c===s?s-1:Math.floor(c)]+=e.counts[t])}const u=[];i.forEach(((e,a)=>{const r=new t({attributes:{}});r.attributes.EXPR_1=a+1,r.attributes.countOFExpr=e,u.push(r)}));const c=new d;return c.features=u,c}_getCachedStatistics(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):a.queryCachedStatistics(t?.name,{signal:e.signal}).then((e=>{const t=e.stats,{min:a,max:r,totalValuesCount:s}=t;let{avg:i,stddev:n,sum:o,variance:l,count:u}=t;return 0===a&&0===r||(i=0===i?null:i,o=0===o?null:o,n=0===n?null:n,l=0===l?null:l,u=0===u?null:u),null==u&&(null!=o&&null!=i?u=Math.round(o/i):null!=s&&(u=s)),{avg:i,count:u,max:r,min:a,stddev:n,sum:o,variance:l}}))}async _getNormalizationTotal(e,t,a){const s=(t?await this.workerClient.summaryStatistics({field:e},t):await m.summaryStatistics({attribute:{field:e},features:a})).sum;if(null==s)throw new r("scene-layer-adapter:invalid","invalid normalizationTotal");return s}async _getSummaryStatisticsFromMemory(e,t){const{view:a,field:r,normalizationField:s,valueExpression:i}=e,{featuresJSON:n,graphics:o}=await this._processStatsFromMemoryParams(e),l={field:r,valueExpression:i,normalizationType:e.normalizationType,normalizationField:s,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue};return e.valueExpression&&a&&n&&(l.fieldType=t?.type?c.kebabDict.toJSON(t.type):null,l.viewInfoParams=w.getViewInfoParams(a),l.timeZone=a.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotal(r,n,o)),n?this.workerClient.summaryStatistics(l,n):m.summaryStatistics({attribute:l,features:o})}_getCachedStatisticsForUniqueValues(e,a){const s=this.layer,i=a?.name,n=a&&e.field?this.getFieldDomain(e.field):null;return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):s.queryCachedStatistics(i,{signal:e.signal}).then((r=>{const n=r.stats;if(!n.mostFrequentValues)throw new Error;const o=r.labels?.labels,l={},u=[],c="countOF"+i;n.mostFrequentValues.forEach((e=>{const r=new t({attributes:{}});r.attributes[i]=a&&a.name!==s.objectIdField&&(p.isNumericField(a)||y.isAnyDateField(a))?Number(e.value):e.value,r.attributes[c]=e.count,u.push(r)})),o&&o.forEach((e=>{l[e.value]=e.label}));const m=new d;return m.features=u,w.getUniqueValuesFromFeatureSet(m,{layer:this,field:e.field,labels:l,view:e.view,signal:e.signal})})).then((t=>F.createUVResult(t,[n],e.returnAllCodedValues)))}async _getUniqueValuesFromMemory(e,t){const{view:a,field:r,field2:s,field3:i,valueExpression:n,returnAllCodedValues:o}=e,l={field:r,field2:s,field3:i,fieldDelimiter:y.fieldDelimiter,valueExpression:n,domains:t,returnAllCodedValues:o},{featuresJSON:u,graphics:c}=await this._processStatsFromMemoryParams(e);return e.valueExpression&&a&&u&&(l.viewInfoParams=w.getViewInfoParams(a),l.timeZone=a.timeZone),u?this.workerClient.uniqueValues(l,u):m.uniqueValues({attribute:l,features:c})}_getCachedStatisticsForHistogram(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):a.queryCachedStatistics(t&&t.name,{signal:e.signal}).then((t=>{const a=t.stats,{minValue:r,maxValue:s}=e,i=null!=r?r:a.min,n=null!=s?s:a.max,o=e.numBins||10,l=this._generateFeatureSetForCachedHistogram(a.histogram,i,n,o);return w.getHistogramFromFeatureSet(l,i,n,o)}))}async _getClassBreaksFromMemory(e){const{view:t,field:a,normalizationField:r,valueExpression:s}=e,{featuresJSON:i,graphics:n}=await this._processStatsFromMemoryParams(e),o={field:a,valueExpression:s,normalizationType:e.normalizationType,normalizationField:r,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&i&&(o.viewInfoParams=w.getViewInfoParams(t),o.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotal(a,i,n)),i?this.workerClient.classBreaks(o,i):m.classBreaks({attribute:o,features:n})}async _getHistogramFromMemory(e){const{view:t,field:a}=e,{featuresJSON:r,graphics:s}=await this._processStatsFromMemoryParams(e),i={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&r&&(i.viewInfoParams=w.getViewInfoParams(t),i.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(i.normalizationTotal=await this._getNormalizationTotal(a,r,s)),r?this.workerClient.histogram(i,r):m.histogram({attribute:i,features:s})}getField(e){return this.layer.getField(e??"")}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}createQuery(){return this.layer.createQuery()}summaryStatistics(e){const t=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.summaryStatistics(e);if(e.filter)throw new r("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(t?.name)?this._getCachedStatistics(e,t).catch((()=>(s.throwIfAborted(e.signal),this._getSummaryStatisticsFromMemory(e,t)))):this._getSummaryStatisticsFromMemory(e,t)}async uniqueValues(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.uniqueValues(e);if(e.filter)throw new r("scene-layer-adapter:not-supported","filter is not supported");const t=await w.getDomainsForFields(e,this),{field:a,field2:i}=e,n=a&&i,o=this.getField(a);return!n&&o&&this._hasCachedStatistics(o.name)?this._getCachedStatisticsForUniqueValues(e,o).catch((()=>(s.throwIfAborted(e.signal),this._getUniqueValuesFromMemory(e,t)))):this._getUniqueValuesFromMemory(e,t)}histogram(e){const t=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.histogram(e);if(e.filter)throw new r("scene-layer-adapter:not-supported","filter is not supported");return t&&this._hasCachedStatistics(t.name)?this._getCachedStatisticsForHistogram(e,t).catch((()=>(s.throwIfAborted(e.signal),this._getHistogramFromMemory(e)))):this._getHistogramFromMemory(e)}classBreaks(e){const t=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.classBreaks(e);if(e.filter)throw new r("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(t?.name)?Promise.reject(new r("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,t):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e,t){if(e.filter)throw new r("scene-layer-adapter:not-supported","filter is not supported");const{view:i,sampleSize:n,requiredFields:o,returnGeometry:l,signal:u}=e,c=1,p="json"===t,d=this.createQuery();d.outFields=o,d.returnGeometry=!!l,d.where=null,d.num=n;let m=[];try{if(m=p?await this._fetchFeaturesJSONFromMemory(i,d,o):await this._fetchFeaturesFromMemory(i,d,o),m.length&&null!=n&&n>0&&n<=m.length)return a.pickRandom(m,n,c)}catch(y){s.throwIfAborted(u)}let h=null;if(this._featureLayerAdapter){const a={...e};delete a.view,h=await this._featureLayerAdapter.getSampleFeatures(a,t)}return h&&h.length?h:a.pickRandom(m,m.length,c)}load(e){const t=this.layer.load(e).then((async t=>{this.workerClient=h.WorkerClient.getInstance(),await this.workerClient.open(e.signal);const a=t.associatedLayer;if(this.geometryType=t.geometryType,null!=a){this._featureLayerAdapter=new f({layer:a});return this._featureLayerAdapter.load(e).then((()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent}))}this.objectIdField=t.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=t.fullExtent}));return this.addResolvingPromise(t),Promise.resolve(this)}};e.__decorate([n.property({constructOnly:!0})],_.prototype,"layer",void 0),_=e.__decorate([u.subclass("esri.smartMapping.support.adapters.SceneLayerAdapter")],_);return _}));
