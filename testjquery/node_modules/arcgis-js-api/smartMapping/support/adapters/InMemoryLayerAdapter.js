/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","../../../chunks/tslib.es6","../../../core/arrayUtils","../../../core/Error","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../geometry/support/quantizationUtils","../../../layers/support/fieldType","../../../layers/support/fieldUtils","../../../rest/support/QuantizationParameters","../../statistics/support/predominanceUtils","../../statistics/support/statsWorker","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./LayerAdapter","./support/utils","../../../statistics/utils","../../../support/arcadeOnDemand"],(function(e,t,a,r,i,s,n,o,l,u,m,y,c,d,p,f,h,w,g,F,S,v,V,q,x){"use strict";const z=5;let _=null,L=class extends v{constructor(){super(...arguments),this._hasLocalSource=!1,this.adapterName="in-memory-layer-adapter"}destroy(){this.workerClient?.destroy()}async _waitForLayerViewUpdate(e){if(!e)throw new r(`${this.adapterName}:insufficient-data", "layerView is required to fetch the features`);const t=new AbortController,a=o.whenOnce((()=>!e.updating),t.signal);await n.timeout(a,5e3,t).catch((e=>{throw i.getLogger(this).warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeatureSetFromMemory(e,t,a){const i=this.layer;if(this._hasLocalSource)return i.queryFeatures(e);if(!t)throw new r(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=await t.whenLayerView(this.layer);return await this._waitForLayerViewUpdate(s),s.queryFeatures(e,{signal:a})}async _fetchFeaturesFromMemory(e,t,a,i){const s=this.layer,n="json"===i;if(this._hasLocalSource){const e=await s.queryFeatures(t);return n?V.ensureFeaturesJSON(e.features):e.features}if(await this._waitForLayerViewUpdate(e),n&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:r}=await e.queryFeaturesJSON(t,{signal:a});return r}if(!("queryFeatures"in e))throw new r(`${this.adapterName}:not-supported`,"'queryFeatures' is not supported on the layerView");const o=await e.queryFeatures(t,{signal:a});return n?V.ensureFeaturesJSON(o.features):o.features}_fetchFeaturesForStats(e,t){return S.getFieldsList({field:e.field,field2:e.field2,field3:e.field3,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,filter:e.filter,requiredFields:a,signal:e.signal},t)))}async _summaryStatsFromClientQuery(e,t){const{view:a,signal:r}=e,i=V.getSummaryStatsQuery(this,e,t),s=await this._fetchFeatureSetFromMemory(i,a,r),n=V.getSummaryStatisticsFromFeatureSet(s,S.isAnyDateField(t)||p.isTimeOnlyField(t));return q.processSummaryStatisticsResult(n)}async _getNormalizationTotalFromMemory(e,t,a){const{featuresJSON:i,graphics:s,layerView:n,query:o}=t,l=(!i&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:a}):i?await this.workerClient.summaryStatistics({field:e},i):await w.summaryStatistics({attribute:{field:e},features:s??[]})).sum;if(null==l)throw new r(`${this.adapterName}:invalid`,"invalid normalizationTotal");return l}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:m,query:y,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return i&&a&&(l||u)&&(o.fieldType=t?.type?d.kebabDict.toJSON(t.type):null,o.viewInfoParams=V.getViewInfoParams(a),o.timeZone=a.timeZone,o.fieldInfos=c),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:m,query:y},n)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(y,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):w.summaryStatistics({attribute:o,features:u})}async _getFilteredFeatures(t,a){let r=[];if("intersects"===a?.spatialRelationship){const{intersect:i}=await new Promise(((t,a)=>e(["../../../geometry/geometryEngineAsync"],t,a))),s=null!=a.geometry?a.geometry:null;for(const e of t){const t=null!=e.geometry?e.geometry:null;if(t&&s){await i(t,s)&&r.push(e)}}}else r=t;return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:r}:{featuresJSON:r}}async _processStatsFromMemoryParams(e){const{features:t,filter:a}=e;if(t?.length)return this._getFilteredFeatures(t,a);const{view:r,field:i,field2:s,field3:n,normalizationField:o,valueExpression:l,layerViewFunc:u,signal:m}=e;let y=e.returnGeometry;if(null==y&&l){if(!_){const{arcadeUtils:e}=await x.loadArcade();_=e}const e=_.hasGeometryOperations(l);e&&await _.enableGeometryOperations(),y=e}let c=null,d=null,p=null,f=null,h=null;if(r)try{c=await r.whenLayerView(this.layer),d=null!=u&&u in c&&"function"==typeof c[u]}catch{d=!1}if(d)try{await this._waitForLayerViewUpdate(c);const e=await S.getFieldsList({field:i,field2:s,field3:n,normalizationField:o,valueExpression:l});V.getMissingFields(this,e,c).length?d=!1:(p=this.layer.createQuery(),p.outFields=e,p.returnGeometry=!1,V.updateQueryWithFeatureFilter(p,a)),c.suspended&&(d=!1)}catch{d=!1}return d||(f=await this._fetchFeaturesForStats({field:i,field2:s,field3:n,valueExpression:l,normalizationField:o,returnGeometry:y,filter:a,view:r,signal:m},"json"),h=(await S.getFieldsList({valueExpression:l})).map((e=>this.getField(e)?.toJSON())).filter(Boolean)),{layerView:c,query:p,featuresJSON:f,fieldInfos:h}}async _uvFromClientQuery(e,t){const{view:a,signal:r}=e,i=V.getUVQuery(this,e),s=await this._fetchFeatureSetFromMemory(i,a,r),n=await V.getUniqueValuesFromFeatureSet(s,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:S.fieldDelimiter,view:e.view,signal:e.signal});return q.createUVResult(n,t,e.returnAllCodedValues,S.fieldDelimiter)}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:y}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),c={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:S.fieldDelimiter,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(o||l)&&(c.viewInfoParams=V.getViewInfoParams(a),c.timeZone=a.timeZone,c.fieldInfos=y),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,c,{signal:n}):o?this.workerClient.uniqueValues(c,o):w.uniqueValues({attribute:c,features:l})}_histogramForField(e){let t=null;return t=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new r(`${this.adapterName}:insufficient-data`,"Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),t.then((t=>V.getBins(this,{min:t.min,max:t.max},e.field,e.numBins??void 0,e.view,e.filter,e.signal)))}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return r&&t&&(s||n)&&(m.viewInfoParams=V.getViewInfoParams(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryHistogram"in o?o.queryHistogram(l,m,{signal:i}):s?this.workerClient.histogram(m,s):w.histogram({attribute:m,features:n})}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:a}=e,r=e.numClasses||z,i=[],s=(a-t)/r;for(let l=0;l<r;l++){const e=t+l*s;i.push({minValue:e,maxValue:e+s})}i[r-1].maxValue=a;const n={classBreaks:i,normalizationTotal:e.normalizationTotal},o=q.resolveCBResult(n,e.classificationMethod);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||n)&&(m.viewInfoParams=V.getViewInfoParams(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryClassBreaks"in o?o.queryClassBreaks(l,m,{signal:i}):s?this.workerClient.classBreaks(m,s):w.classBreaks({attribute:m,features:n})}async _heatmapStatsFromMemory(e,t){const{view:a,field:r,radius:i}=e,{featuresJSON:n,graphics:o}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0});s.assertIsSome(a,"InMemoryLayerAdapter: must have a view");const l=new f({extent:a.extent,tolerance:"2d"===a.type?a.state.resolution:a.pixelSizeAt?.(a.center)}),u={field:r,fieldOffset:t,radius:i,transform:c.toQuantizationTransform(l),spatialReference:a.spatialReference?.toJSON(),size:a.size};return n?.length||o?.length?n?this.workerClient.heatmapStatistics(u,n):w.heatmapStatistics({attribute:u,features:o}):{count:0,min:null,max:null,avg:null,stddev:null}}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}createQuery(){return this.layer.createQuery()}async summaryStatistics(e){const{field:t,valueExpression:a,sqlExpression:i,features:s,view:n}=e,o=t?this.getField(t):null,l=!!a,u="3d"===n?.type;if(!a&&i&&!this.supportsSQLExpression)throw new r(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return l||s||u?this._summaryStatsFromMemory(e,o):this._summaryStatsFromClientQuery(e,o)}async uniqueValues(e){const{valueExpression:t,sqlExpression:a,features:i,view:s}=e,n=await V.getDomainsForFields(e,this),o=!!t,l="3d"===s?.type;if(!t&&a&&!this.supportsSQLExpression)throw new r(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return o||i||l?this._uvFromMemory(e,n):this._uvFromClientQuery(e,n)}async histogram(e){const{features:t,valueExpression:a,normalizationType:i,sqlExpression:s}=e,n=t||!!a;if(!a&&s&&!this.supportsSQLExpression)throw new r(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return n||i?this._histogramFromMemory(e):this._histogramForField(e)}async classBreaks(e){return!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)}async queryFeatureCount(e){const{whereClause:t,view:a,signal:i}=e;if(!a)throw new r(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=this.layer.createQuery();s.where=g.mergeWhereClauses(s.where,t);const n=await a.whenLayerView(this.layer);return await o.whenOnce((()=>!n.updating),i),n.queryFeatureCount(s,{signal:i})}async generateRenderer(e,t){throw new r(`${this.adapterName}:not-supported`,"Layer does not support generateRenderer operation")}async predominantCategories(e){const{fields:t,view:a,signal:r}=e,i=h.getArcadeForPredominantCategory(t),s=await this._uvFromMemory({valueExpression:i,view:a,signal:r});return V.getPredominantCategoriesFromUVInfos(s.uniqueValueInfos,t)}async heatmapStatistics(e){const{field:t,fieldOffset:a,view:r,signal:i}=e;return(t&&null==a?this.summaryStatistics({field:t,view:r,signal:i}):Promise.resolve(null)).then((t=>{let r=a||0;if(t){const{count:e,min:a,max:i}=t;e?a===i&&0===a?r=1:i<=0?r="abs":a<0&&(r=-1.01*a):r=1}return this._heatmapStatsFromMemory(e,r).then((e=>({...e,summaryStatistics:t,fieldOffset:r})))}))}async getSampleFeatures(e,t){const{view:i,sampleSize:s,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e,m=this.layer.createQuery(),y=1;if(m.outSpatialReference=e.spatialReference||i?.spatialReference,m.returnGeometry=!!o,m.outFields=n,V.updateQueryWithFeatureFilter(m,l),!i)throw new r(`${this.adapterName}:not-supported`,"view is required to get sample features for Layer");const c=await i.whenLayerView(this.layer);if(V.getMissingFields(this,n,c).length)throw new r(`${this.adapterName}:not-supported`,"Required fields need to be passed in the outFields for Layer");const d=await this._fetchFeaturesFromMemory(c,m,u,t),p=null!=s&&s>0&&s<=d.length?s:d.length;return a.pickRandom(d,p,y)}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.capabilities?.query?.supportsSqlExpression,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=F.WorkerClient.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};t.__decorate([l.property({constructOnly:!0})],L.prototype,"layer",void 0),L=t.__decorate([y.subclass("esri.smartMapping.support.adapters.InMemoryLayerAdapter")],L);return L}));
