/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../core/Error","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../rest/support/generateRendererUtils","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./FeatureLayerAdapter","./support/utils"],(function(e,t,r,a,s,i,n,l,o,c,u,d,p){"use strict";let h=class extends d{constructor(){super(...arguments),this.adapterName="csv-layer-adapter"}async _createGenerateRendererResult(e,r,a,s,i){const n=e?.features,c=n?.length;if(!c)throw new t("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const u=p.ensureFeaturesJSON(n);let d=null;if("percent-of-total"===s){if(d=(await this.workerClient.summaryStatistics({field:r},u)).sum,null==d)throw new t("csv-layer-adapter:invalid","invalid normalizationTotal")}if("class-breaks-definition"===i?.type){const e=(await o.getDataValues({field:r,normalizationType:s,normalizationField:a,normalizationTotal:d},u)).filter((e=>Number.isFinite(e)));return l.createGenerateRendererClassBreaks({definition:i,values:e,normalizationTotal:d})}const h=(await o.getDataValues({field:r},u)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return l.createGenerateRendererUniqueValues(h)}generateRenderer(e,t){const r=e.classificationDefinition;let a=null,s=null,i=null;"class-breaks-definition"===r?.type?(a=r.classificationField,s=r.normalizationField,i=r.normalizationType):a=r?.attributeField;const n=this.layer;return u.getFieldsList({field:a,normalizationField:s}).then((l=>{const c=n.createQuery();return c.returnGeometry=!1,c.outFields=l,c.where=o.mergeWhereClauses(c.where,e.where),n.queryFeatures(c,{signal:t}).then((e=>this._createGenerateRendererResult(e,a,s,i,r)))}))}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=c.WorkerClient.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};h=e.__decorate([n.subclass("esri.smartMapping.support.adapters.CSVLayerAdapter")],h);return h}));
