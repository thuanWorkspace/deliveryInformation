/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","../chunks/tslib.es6","../geometry","../PopupTemplate","../renderers/ClassBreaksRenderer","../renderers/DictionaryRenderer","../renderers/DotDensityRenderer","../renderers/HeatmapRenderer","../renderers/PieChartRenderer","../renderers/Renderer","../renderers/SimpleRenderer","../renderers/UniqueValueRenderer","../renderers/support/jsonUtils","../renderers/support/types","../request","../core/Clonable","../core/Error","../core/handleUtils","../core/lang","../core/Logger","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../geometry/support/typeUtils","./Layer","./mixins/ArcGISService","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/FeatureEffectLayer","./mixins/FeatureReductionLayer","./mixins/OperationalLayer","./mixins/PortalLayer","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","./mixins/TemporalLayer","./support/commonProperties","./support/featureLayerUtils","./support/Field","./support/fieldProperties","./support/fieldUtils","./support/LabelClass","./support/labelingInfo","./support/PurgeOptions","../renderers/support/styleUtils","../rest/support/Query","../support/popupUtils","../symbols/support/ElevationInfo","../webdoc/interfaces","../geometry/SpatialReference","../geometry/Extent"],(function(e,r,t,o,i,s,n,a,p,l,d,c,y,u,m,h,f,g,_,b,v,S,w,I,x,R,T,P,F,L,j,E,O,D,U,A,k,C,G,M,V,N,J,q,z,$,B,K,W,Q,H,X,Y){"use strict";const Z=N.defineFieldProperties();function ee(e,r){return new f("layer:unsupported",`Layer (${e.title}, ${e.id}) of type '${e.declaredClass}' ${r}`,{layer:e})}let re=class extends(O.FeatureReductionLayer(E.FeatureEffectLayer(L.BlendLayer(C.TemporalLayer(k.ScaleRangeLayer(A.RefreshableLayer(F.ArcGISService(D.OperationalLayer(U.PortalLayer(v.MultiOriginJSONMixin(j.CustomParametersMixin(h.ClonableMixin(P))))))))))))){constructor(...r){super(...r),this.copyright=null,this.definitionExpression=null,this.displayField=null,this.elevationInfo=null,this.fields=null,this.fieldsIndex=null,this.geometryDefinition=null,this.geometryType=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.maxReconnectionAttempts=0,this.maxReconnectionInterval=20,this.maxScale=0,this.minScale=0,this.objectIdField=null,this.operationalLayerType="ArcGISStreamLayer",this.outFields=["*"],this.popupEnabled=!0,this.popupTemplate=null,this.purgeOptions=new $,this.refreshInterval=0,this.screenSizePerspectiveEnabled=!0,this.sourceJSON=null,this.spatialReference=X.WGS84,this.type="stream",this.url=null,this.updateInterval=300,this.useViewTime=!0,this.webSocketUrl=null,this._debouncedSaveOperations=S.debounce((async(r,t,o)=>{const{save:i,saveAs:s}=await new Promise(((r,t)=>e(["./save/streamLayerUtils"],r,t)));switch(r){case H.SaveOperationType.SAVE:return i(this,t);case H.SaveOperationType.SAVE_AS:return s(this,o,t)}}))}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){if(!("WebSocket"in globalThis))return this.addResolvingPromise(Promise.reject(new f("stream-layer:websocket-unsupported","WebSocket is not supported in this browser. StreamLayer will not have real-time connection with the stream service."))),Promise.resolve(this);const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Stream Service","Feed"]},e).catch(S.throwIfAbortError).then((()=>this._fetchService(r)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}set featureReduction(e){const r=this._normalizeFeatureReduction(e);this._set("featureReduction",r)}set renderer(e){J.fixRendererFields(e,this.fieldsIndex),this._set("renderer",e)}readRenderer(e,r,t){r=r.layerDefinition||r;const o=r.drawingInfo?.renderer;if(o){const e=y.read(o,r,t)||void 0;return e||b.getLogger(this).error("Failed to create renderer",{rendererDefinition:r.drawingInfo.renderer,layer:this,context:t}),e}return M.createDefaultRenderer(r,t)}async connect(r){const[{createConnection:t}]=await Promise.all([new Promise(((r,t)=>e(["./graphics/sources/connections/createConnection"],r,t))),this.load()]),o=this.geometryType?T.featureGeometryTypeKebabDictionary.toJSON(this.geometryType):null,{customParameters:i=null,definitionExpression:s=null,geometryDefinition:n=null,maxReconnectionAttempts:a=0,maxReconnectionInterval:p=20,spatialReference:l=this.spatialReference}=r||this.createConnectionParameters(),d=t(this.parsedUrl,this.spatialReference,l,o,{geometry:n,where:s},a,p,i??void 0),c=g.handlesGroup([this.on("send-message-to-socket",(e=>d.sendMessageToSocket(e))),this.on("send-message-to-client",(e=>d.sendMessageToClient(e)))]);return d.once("destroy",c.remove),d}createConnectionParameters(){return{spatialReference:this.spatialReference,customParameters:this.customParameters,definitionExpression:this.definitionExpression,geometryDefinition:this.geometryDefinition,maxReconnectionAttempts:this.maxReconnectionAttempts,maxReconnectionInterval:this.maxReconnectionInterval}}createPopupTemplate(e){return W.createPopupTemplate(this,e)}createQuery(){const e=new K;return e.returnGeometry=!0,e.outFields=["*"],e.where=this.definitionExpression||"1=1",e}getFieldDomain(e,r){if(!this.fields)return null;let t=null;return this.fields.some((r=>(r.name===e&&(t=r.domain),!!t))),t}getField(e){return this.fieldsIndex.get(e)}serviceSupportsSpatialReference(e){return!0}sendMessageToSocket(e){this.emit("send-message-to-socket",e)}sendMessageToClient(e){this.emit("send-message-to-client",e)}async save(e){return this._debouncedSaveOperations(H.SaveOperationType.SAVE,e)}async saveAs(e,r){return this._debouncedSaveOperations(H.SaveOperationType.SAVE_AS,r,e)}write(e,r){const t=r?.messages;return this.webSocketUrl?(t?.push(ee(this,"using a custom websocket connection cannot be written to web scenes and web maps")),null):this.parsedUrl?super.write(e,r):(t?.push(ee(this,"using a client-side only connection without a url cannot be written to web scenes and web maps")),null)}async _fetchService(e){if(!!!this.webSocketUrl&&this.parsedUrl){if(!this.sourceJSON){const{data:r}=await m(this.parsedUrl.path,{query:{f:"json",...this.customParameters,...this.parsedUrl.query},responseType:"json",signal:e});this.sourceJSON=r}}else{if(!this.timeInfo?.trackIdField)throw new f("stream-layer:missing-metadata","The stream layer trackIdField must be specified.");if(!this.objectIdField){const e=this.fields.find((e=>"oid"===e.type))?.name;if(!e)throw new f("stream-layer:missing-metadata","The stream layer objectIdField must be specified.");this.objectIdField=e}if(!this.fields)throw new f("stream-layer:missing-metadata","The stream layer fields must be specified.");if(this.fields.some((e=>e.name===this.objectIdField))||this.fields.push(new V({name:this.objectIdField,alias:this.objectIdField,type:"oid"})),!this.geometryType)throw new f("stream-layer:missing-metadata","The stream layer geometryType must be specified.");this.webSocketUrl&&(this.url=this.webSocketUrl)}return this.read(this.sourceJSON,{origin:"service",portalItem:this.portalItem,portal:this.portalItem?.portal,url:this.parsedUrl}),J.fixRendererFields(this.renderer,this.fieldsIndex),J.fixTimeInfoFields(this.timeInfo,this.fieldsIndex),this.objectIdField||(this.objectIdField="__esri_stream_id__"),B.loadStyleRenderer(this,{origin:"service"})}};r.__decorate([w.property({type:String})],re.prototype,"copyright",void 0),r.__decorate([w.property({readOnly:!0})],re.prototype,"defaultPopupTemplate",null),r.__decorate([w.property({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],re.prototype,"definitionExpression",void 0),r.__decorate([w.property({type:String})],re.prototype,"displayField",void 0),r.__decorate([w.property({type:Q})],re.prototype,"elevationInfo",void 0),r.__decorate([w.property({json:{origins:{"web-map":{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-scene":{read:!1,write:!1}}}})],re.prototype,"featureReduction",null),r.__decorate([w.property(Z.fields)],re.prototype,"fields",void 0),r.__decorate([w.property(Z.fieldsIndex)],re.prototype,"fieldsIndex",void 0),r.__decorate([w.property({type:Y,json:{name:"layerDefinition.definitionGeometry",write:!0}})],re.prototype,"geometryDefinition",void 0),r.__decorate([w.property({type:T.featureGeometryTypeKebabDictionary.apiValues,json:{read:{reader:T.featureGeometryTypeKebabDictionary.read}}})],re.prototype,"geometryType",void 0),r.__decorate([w.property(G.labelsVisible)],re.prototype,"labelsVisible",void 0),r.__decorate([w.property({type:[q],json:{name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:z.reader},write:!0}})],re.prototype,"labelingInfo",void 0),r.__decorate([w.property(G.legendEnabled)],re.prototype,"legendEnabled",void 0),r.__decorate([w.property({type:["show","hide"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],re.prototype,"listMode",void 0),r.__decorate([w.property({type:I.Integer})],re.prototype,"maxReconnectionAttempts",void 0),r.__decorate([w.property({type:I.Integer})],re.prototype,"maxReconnectionInterval",void 0),r.__decorate([w.property(G.maxScale)],re.prototype,"maxScale",void 0),r.__decorate([w.property(G.minScale)],re.prototype,"minScale",void 0),r.__decorate([w.property({type:String})],re.prototype,"objectIdField",void 0),r.__decorate([w.property({value:"ArcGISStreamLayer",type:["ArcGISStreamLayer"]})],re.prototype,"operationalLayerType",void 0),r.__decorate([w.property({readOnly:!0})],re.prototype,"outFields",void 0),r.__decorate([w.property(G.popupEnabled)],re.prototype,"popupEnabled",void 0),r.__decorate([w.property({type:o,json:{name:"popupInfo",write:!0}})],re.prototype,"popupTemplate",void 0),r.__decorate([w.property({type:$})],re.prototype,"purgeOptions",void 0),r.__decorate([w.property({json:{read:!1,write:!1}})],re.prototype,"refreshInterval",void 0),r.__decorate([w.property({types:u.rendererTypes,json:{origins:{service:{write:{target:"drawingInfo.renderer",enabled:!1}},"web-scene":{name:"layerDefinition.drawingInfo.renderer",types:u.webSceneRendererTypes,write:!0}},write:{target:"layerDefinition.drawingInfo.renderer"}}})],re.prototype,"renderer",null),r.__decorate([x.reader("service","renderer",["drawingInfo.renderer","defaultSymbol"]),x.reader("renderer",["layerDefinition.drawingInfo.renderer","layerDefinition.defaultSymbol"])],re.prototype,"readRenderer",null),r.__decorate([w.property((()=>{const e=_.clone(G.screenSizePerspectiveEnabled);return e.json.origins["portal-item"]={read:!1,write:!1},e})())],re.prototype,"screenSizePerspectiveEnabled",void 0),r.__decorate([w.property()],re.prototype,"sourceJSON",void 0),r.__decorate([w.property({type:X,json:{origins:{service:{read:{source:"spatialReference"}}}}})],re.prototype,"spatialReference",void 0),r.__decorate([w.property({json:{read:!1}})],re.prototype,"type",void 0),r.__decorate([w.property(G.url)],re.prototype,"url",void 0),r.__decorate([w.property({type:Number})],re.prototype,"updateInterval",void 0),r.__decorate([w.property({json:{read:!1,write:!1}})],re.prototype,"useViewTime",void 0),r.__decorate([w.property({type:String})],re.prototype,"webSocketUrl",void 0),re=r.__decorate([R.subclass("esri.layers.StreamLayer")],re);return re}));
