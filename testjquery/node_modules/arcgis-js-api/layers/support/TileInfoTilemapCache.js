/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../core/Error","../../core/promiseUtils"],(function(i,l){"use strict";class t{constructor(i,l=0,t=i.lods[i.lods.length-1].level){this.tileInfo=i,this.minLOD=l,this.maxLOD=t,i.lodAt(l)||(this.minLOD=i.lods[0].level),i.lodAt(t)||(this.maxLOD=i.lods[i.lods.length-1].level)}get effectiveMinLOD(){return this.minLOD??this.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.tileInfo.lods[this.tileInfo.lods.length-1].level}getAvailability(i,l,t){const e=this.tileInfo?.lodAt(i);return!e||i<this.minLOD||i>this.maxLOD?"unavailable":e.cols&&e.rows?t>=e.cols[0]&&t<=e.cols[1]&&l>=e.rows[0]&&l<=e.rows[1]?"unknown":"unavailable":"unknown"}async fetchAvailability(t,e,o,s){await l.waitTick(s);const a=this.getAvailability(t,e,o);if("unavailable"===a)throw new i("tile-map:tile-unavailable","Tile is not available",{level:t,row:e,col:o});return a}async fetchAvailabilityUpsample(i,t,e,o,s){await l.waitTick(s),o.level=i,o.row=t,o.col=e;const a=this.tileInfo;return a.updateTileInfo(o),this.fetchAvailability(i,t,e,s).catch((i=>{if(l.isAbortError(i))throw i;if(a.upsampleTile(o))return this.fetchAvailabilityUpsample(o.level,o.row,o.col,o,s);throw i}))}}return t}));
