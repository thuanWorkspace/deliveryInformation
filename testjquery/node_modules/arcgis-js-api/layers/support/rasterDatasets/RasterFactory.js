/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../core/Error","./CloudRaster","./ImageAuxRaster","./ImageServerRaster","./MRFRaster","./TIFFRaster"],(function(e,t,r,s,o,a){"use strict";const n=new Map;n.set("CRF",{desc:"Cloud Raster Format",constructor:t}),n.set("MRF",{desc:"Meta Raster Format",constructor:o}),n.set("TIFF",{desc:"GeoTIFF",constructor:a}),n.set("RasterTileServer",{desc:"Raster Tile Server",constructor:s}),n.set("JPG",{desc:"JPG Raster Format",constructor:r}),n.set("PNG",{desc:"PNG Raster Format",constructor:r}),n.set("GIF",{desc:"GIF Raster Format",constructor:r}),n.set("BMP",{desc:"BMP Raster Format",constructor:r});class c{static get supportedFormats(){const e=new Set;return n.forEach(((t,r)=>e.add(r))),e}static async open(t){const{url:r,ioConfig:s,sourceJSON:o}=t;let a=t.datasetFormat;null==a&&r.lastIndexOf(".")&&(a=r.slice(r.lastIndexOf(".")+1).toUpperCase()),"OVR"===a||"TIF"===a?a="TIFF":"JPG"!==a&&"JPEG"!==a&&"JFIF"!==a||(a="JPG"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");const c={url:r,sourceJSON:o,datasetFormat:a,ioConfig:s??{bandIds:null,sampling:null}};let u,l;if(a&&this.supportedFormats.has(a)){if("CRF"===a&&!s?.enableCRF)throw new e("rasterfactory:open",`cannot open raster: ${r}`);return u=n.get(a).constructor,l=new u(c),await l.open({signal:t.signal}),l}if(a)throw new e("rasterfactory:open","not a supported format "+a);const F=Array.from(n.keys());let i=0;const d=()=>(a=F[i++],a&&("CRF"!==a||s?.enableCRF)?(u=n.get(a).constructor,l=new u(c),l.open({signal:t.signal}).then((()=>l)).catch((()=>d()))):null);return d()}static register(e,t,r){n.has(e.toUpperCase())||n.set(e.toUpperCase(),{desc:t,constructor:r})}}return c}));
