/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../geometry","../../geometry/support/GeographicTransformation","./PixelBlock","./rasterFormats/RasterCodec","./rasterFunctions/pixelUtils","./rasterFunctions/rasterFunctionHelper","./rasterFunctions/rasterProjectionHelper","./rasterFunctions/stretchUtils","./rasterFunctions/vectorFieldUtils","./rasterTransforms/utils","../../renderers/support/RasterSymbolizer","../../views/2d/engine/flow/dataUtils","../../geometry/Extent","../../geometry/Point"],(function(e,t,r,s,o,i,a,n,l,c,m,f,u,p){"use strict";class d{convertVectorFieldData(e){const t=r.fromJSON(e.pixelBlock),s=l.convertVectorFieldData(t,e.type);return Promise.resolve(null!=s?s.toJSON():null)}computeStatisticsHistograms(e){const t=r.fromJSON(e.pixelBlock),s=n.computeStatisticsHistograms(t);return Promise.resolve(s)}async decode(e){const t=await s.decode(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=r.fromJSON(e.pixelBlock),e.extent=e.extent?u.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(null!=t?t.toJSON():null)}async updateSymbolizer(e){this.symbolizer=m.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=i.create(e.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:u.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map((e=>null!=e?r.fromJSON(e):null)),primaryPixelSizes:e.primaryPixelSizes?.map((e=>null!=e?p.fromJSON(e):null)),primaryRasterIds:e.primaryRasterIds});return null!=t?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(r.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(t?.toJSON())}estimateStatisticsHistograms(e){const t=n.estimateStatisticsHistograms(r.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=o.split(r.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach(((e,r)=>{t.set(r,e?.toJSON())})),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map((e=>e?new r(e):null)),s=o.mosaic(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let i,a=s;return e.coefs&&(a=o.approximateTransform(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(i=o.getLocalArithmeticNorthRotations(e.destDimension,e.gcsGrid),a=l.convertToLocalDirections(a,e.isUV?"vector-uv":"vector-magdir",i)),{pixelBlock:a?.toJSON(),localNorthDirections:i}}async createFlowMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await f.createFlowMesh(e.meshType,e.simulationSettings,r,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const r=u.fromJSON(e.projectedExtent),s=u.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new t({steps:e.datumTransformationSteps})),(e.includeGCSGrid||a.requirePE(r.spatialReference,s.spatialReference,o))&&await a.load();const i=e.rasterTransform?c.readTransform(e.rasterTransform):null;return a.getProjectionOffsetGrid({...e,projectedExtent:r,srcBufferExtent:s,datumTransformation:o,rasterTransform:i})}}return d}));
