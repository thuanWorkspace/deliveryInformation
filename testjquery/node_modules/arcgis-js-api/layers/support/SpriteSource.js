/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../request","../../core/Error","../../core/Logger","../../core/typedArrayUtil","../../core/urlUtils"],(function(t,e,i,s,a){"use strict";const r=1.15;class o{constructor(t,e){this._spriteSource=t,this._maxTextureSize=e,this.devicePixelRatio=1,this._spriteImageFormat="png",this._isRetina=!1,this._spritesData={},this.image=null,this.width=null,this.height=null,this.loadStatus="not-loaded","url"===t.type&&t.spriteFormat&&(this._spriteImageFormat=t.spriteFormat),t.pixelRatio&&(this.devicePixelRatio=t.pixelRatio),this.baseURL=t.spriteUrl}get spriteNames(){const t=[];for(const e in this._spritesData)t.push(e);return t.sort(),t}getSpriteInfo(t){return this._spritesData?this._spritesData[t]:null}async load(t){if(this.baseURL){this.loadStatus="loading";try{await this._loadSprites(t),this.loadStatus="loaded"}catch{this.loadStatus="failed"}}else this.loadStatus="failed"}async _loadSprites(t){this._isRetina=this.devicePixelRatio>r;const{width:s,height:a,data:o,json:h}=await this._getSpriteData(this._spriteSource,t),n=Object.keys(h);if(!n||0===n.length||!o)return this._spritesData=this.image=null,void(this.width=this.height=0);this._spritesData=h,this.width=s,this.height=a;const d=Math.max(this._maxTextureSize,4096);if(s>d||a>d){const t=`Sprite resource for style ${this.baseURL} is bigger than the maximum allowed of ${d} pixels}`;throw i.getLogger("esri.layers.support.SpriteSource").error(t),new e("SpriteSource",t)}let l;for(let e=0;e<o.length;e+=4)l=o[e+3]/255,o[e]=o[e]*l,o[e+1]=o[e+1]*l,o[e+2]=o[e+2]*l;this.image=o}async _getSpriteData(i,o){if("image"===i.type){let t,a;if(this.devicePixelRatio<r){if(!i.spriteSource1x)throw new e("SpriteSource","no image data provided for low resolution sprites!");t=i.spriteSource1x.image,a=i.spriteSource1x.json}else{if(!i.spriteSource2x)throw new e("SpriteSource","no image data provided for high resolution sprites!");t=i.spriteSource2x.image,a=i.spriteSource2x.json}return"width"in t&&"height"in t&&"data"in t&&(s.isArrayBuffer(t.data)||s.isUint8ClampedArray(t.data))?{width:t.width,height:t.height,data:new Uint8Array(t.data),json:a}:{...h(t),json:a}}const n=a.urlToObject(this.baseURL),d=n.query?"?"+a.objectToQuery(n.query):"",l=this._isRetina?"@2x":"",p=`${n.path}${l}.${this._spriteImageFormat}${d}`,u=`${n.path}${l}.json${d}`,[c,g]=await Promise.all([t(u,o),t(p,{responseType:"image",...o})]);return{...h(g.data),json:c.data}}}function h(t){const e=document.createElement("canvas"),i=e.getContext("2d");e.width=t.width,e.height=t.height,i.drawImage(t,0,0,t.width,t.height);const s=i.getImageData(0,0,t.width,t.height);return{width:t.width,height:t.height,data:new Uint8Array(s.data)}}return o}));
