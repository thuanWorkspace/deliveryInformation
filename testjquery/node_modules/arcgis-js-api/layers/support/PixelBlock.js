/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../chunks/tslib.es6","../../core/Error","../../core/JSONSupport","../../core/lang","../../core/Logger","../../core/accessorSupport/decorators/property","../../core/accessorSupport/decorators/cast","../../core/accessorSupport/decorators/subclass","./SimpleBandStatistics","./rasterFormats/pixelRangeUtils"],(function(t,e,s,i,r,l,o,a,n,h){"use strict";var p;let c=p=class extends s.JSONSupport{static createEmptyBand(t,e){return new(p.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.premultiplyAlpha=!1,this.statistics=null,this.depthCount=1}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new e("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new n.SimpleBandStatistics)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(null!=t)for(let s=0;s<t.length;s++)t[s]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;const[e,s]=h.getPixelValueRange(t),i=this.pixels,r=this.width*this.height,l=i.length;let o,a,n;const c=[];for(let h=0;h<l;h++){n=p.createEmptyBand(t,r),o=i[h];for(let t=0;t<r;t++)a=o[t],n[t]=a>s?s:a<e?e:a;c.push(n)}this.pixels=c,this.pixelType=t}extractBands(t){const{pixels:e,statistics:s}=this;if(null==t||0===t.length||!e||0===e.length)return this;const i=e.length,r=t.some((t=>t>=e.length)),l=i===t.length&&!t.some(((t,e)=>t!==e));if(r||l)return this;const o=this.bandMasks?.length===i?t.map((t=>this.bandMasks[t])):void 0;let{mask:a,validPixelCount:n}=this;const{width:h,height:c}=this;if(o){if(1===o.length)a=o[0];else{const t=h*c;a=new Uint8Array(t).fill(255);for(let e=0;e<o.length;e++){const s=o[e];for(let e=0;e<t;e++)s[e]||(a[e]=0)}}n=a.filter((t=>!!t)).length}return new p({pixelType:this.pixelType,width:h,height:c,mask:a,bandMasks:o,validPixelCount:n,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>e[t])),statistics:s&&t.map((t=>s[t]))})}clone(){const t=new p({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;null!=this.mask&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0)),this.bandMasks&&(t.bandMasks=this.bandMasks.map((t=>new Uint8Array(t))));const s=p.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=i?this.pixels[e].slice(0,this.pixels[e].length):new s(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=i.clone(this.statistics[e]);return t.premultiplyAlpha=this.premultiplyAlpha,t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:s,premultiplyAlpha:i,pixels:l}=this;if(!t||!l?.length)return void r.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let o,a,n,h;o=a=n=l[0],l.length>=3?(a=l[1],n=l[2]):2===l.length&&(a=l[1]);const p=new Uint32Array(t),c=this.width*this.height;if(o.length===c)if(null!=e&&e.length===c)if(s)for(h=0;h<c;h++){const t=e[h];if(t){const e=t/255;p[h]=i?t<<24|n[h]*e<<16|a[h]*e<<8|o[h]*e:t<<24|n[h]<<16|a[h]<<8|o[h]}}else for(h=0;h<c;h++)e[h]&&(p[h]=255<<24|n[h]<<16|a[h]<<8|o[h]);else for(h=0;h<c;h++)p[h]=255<<24|n[h]<<16|a[h]<<8|o[h];else r.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:s,statistics:i}=this;if(!t||!e?.length)return void r.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const l=this.pixelType;let o=1,a=0,n=1;if(i&&i.length>0){for(const t of i)if(null!=t.minValue&&(a=Math.min(a,t.minValue)),null!=t.maxValue&&null!=t.minValue){const e=t.maxValue-t.minValue;n=Math.max(n,e)}o=255/n}else{let t=255;"s8"===l?(a=-128,t=127):"u16"===l?t=65535:"s16"===l?(a=-32768,t=32767):"u32"===l?t=4294967295:"s32"===l?(a=-2147483648,t=2147483647):"f32"===l?(a=-34e38,t=34e38):"f64"===l&&(a=-Number.MAX_VALUE,t=Number.MAX_VALUE),o=255/(t-a)}const h=new Uint32Array(t),p=this.width*this.height;let c,u,d,g,f;if(c=u=d=e[0],c.length!==p)return r.getLogger(this).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(u=e[1],e.length>=3&&(d=e[2]),null!=s&&s.length===p)for(g=0;g<p;g++)s[g]&&(h[g]=255<<24|(d[g]-a)*o<<16|(u[g]-a)*o<<8|(c[g]-a)*o);else for(g=0;g<p;g++)h[g]=255<<24|(d[g]-a)*o<<16|(u[g]-a)*o<<8|(c[g]-a)*o;else if(null!=s&&s.length===p)for(g=0;g<p;g++)f=(c[g]-a)*o,s[g]&&(h[g]=255<<24|f<<16|f<<8|f);else for(g=0;g<p;g++)f=(c[g]-a)*o,h[g]=255<<24|f<<16|f<<8|f}_fillFrom32Bit(t){const{pixels:e,mask:s}=this;if(!t||!e?.length)return r.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,l,o,a;i=l=o=e[0],e.length>=3?(l=e[1],o=e[2]):2===e.length&&(l=e[1]);const n=this.width*this.height;if(i.length!==n)return r.getLogger(this).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let h=0;if(null!=s&&s.length===n)for(a=0;a<n;a++)t[h++]=i[a],t[h++]=l[a],t[h++]=o[a],t[h++]=1&s[a];else for(a=0;a<n;a++)t[h++]=i[a],t[h++]=l[a],t[h++]=o[a],t[h++]=1}_calculateBandStatistics(t,e){let s=1/0,i=-1/0;const r=t.length;let l,o=0;if(null!=e)for(l=0;l<r;l++)e[l]&&(o=t[l],s=o<s?o:s,i=o>i?o:i);else for(l=0;l<r;l++)o=t[l],s=o<s?o:s,i=o>i?o:i;return new n.SimpleBandStatistics(s,i)}};t.__decorate([l.property({json:{write:!0}})],c.prototype,"width",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"height",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"pixelType",void 0),t.__decorate([o.cast("pixelType")],c.prototype,"castPixelType",null),t.__decorate([l.property({json:{write:!0}})],c.prototype,"validPixelCount",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"mask",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"maskIsAlpha",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"pixels",void 0),t.__decorate([l.property()],c.prototype,"premultiplyAlpha",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"statistics",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"depthCount",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"noDataValues",void 0),t.__decorate([l.property({json:{write:!0}})],c.prototype,"bandMasks",void 0),c=p=t.__decorate([a.subclass("esri.layers.support.PixelBlock")],c);return c}));
