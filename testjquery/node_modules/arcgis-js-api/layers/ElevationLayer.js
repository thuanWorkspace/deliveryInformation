/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","../chunks/tslib.es6","../request","../core/Error","../core/maybe","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/urlUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/arrayUtils","../core/has","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../geometry/HeightModelInfo","./Layer","./mixins/ArcGISCachedService","./mixins/ArcGISService","./mixins/OperationalLayer","./mixins/PortalLayer","./support/commonProperties","./support/ElevationTileData","./support/LercDecoder"],(function(e,r,t,o,i,a,s,l,p,n,c,d,y,u,h,v,m,_,S,g,w,b,T){"use strict";let f=class extends(m.ArcGISCachedService(_.ArcGISService(S.OperationalLayer(g.PortalLayer(a.MultiOriginJSONMixin(v)))))){constructor(...e){super(...e),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=T.acquireDecoder()}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}destroy(){this._lercDecoder=i.releaseMaybe(this._lercDecoder)}readCapabilities(e,r){const t=r.capabilities&&r.capabilities.split(",").map((e=>e.toLowerCase().trim()));if(!t)return{operations:{supportsTileMap:!1}};return{operations:{supportsTileMap:t.includes("tilemap")}}}readVersion(e,r){let t=r.currentVersion;return t||(t=9.3),t}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let r=0;r<e.typeKeywords.length;r++)if("elevation 3d layer"===e.typeKeywords[r].toLowerCase())return!0;throw new o("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(s.throwIfAbortError).then((()=>this._fetchImageService(r)))),Promise.resolve(this)}fetchTile(e,r,o,i){const a=null!=(i=i||{signal:null}).signal?i.signal:i.signal=(new AbortController).signal,s={responseType:"array-buffer",signal:a},l={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,r,o,i))).then((()=>t(this.getTileUrl(e,r,o),s))).then((e=>this._lercDecoder.decode(e.data,l,a))).then((e=>new b.ElevationTileData(e)))}getTileUrl(e,r,t){const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,i=l.objectToQuery({...this.parsedUrl.query,blankTile:!o&&null});return`${this.parsedUrl.path}/tile/${e}/${r}/${t}${i?"?"+i:""}`}async queryElevation(r,t){const{ElevationQuery:o}=await new Promise(((r,t)=>e(["./support/ElevationQuery"],r,t)));s.throwIfAborted(t);return(new o).query(this,r,t)}async createElevationSampler(r,t){const{ElevationQuery:o}=await new Promise(((r,t)=>e(["./support/ElevationQuery"],r,t)));s.throwIfAborted(t);return(new o).createSampler(this,r,t)}_fetchTileAvailability(e,r,t,o){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,r,t,o):Promise.resolve("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},o=await t(this.parsedUrl.path,r);o.ssl&&(this.url=this.url?.replace(/^http:/i,"https:")),this.sourceJSON=o.data,this.read(o.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[I]}};r.__decorate([p.property({readOnly:!0})],f.prototype,"capabilities",void 0),r.__decorate([y.reader("service","capabilities",["capabilities"])],f.prototype,"readCapabilities",null),r.__decorate([p.property({json:{read:{source:"copyrightText"}}})],f.prototype,"copyright",void 0),r.__decorate([p.property({readOnly:!0,type:h})],f.prototype,"heightModelInfo",void 0),r.__decorate([p.property({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],f.prototype,"path",void 0),r.__decorate([p.property({type:["show","hide"]})],f.prototype,"listMode",void 0),r.__decorate([p.property({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],f.prototype,"minScale",void 0),r.__decorate([p.property({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],f.prototype,"maxScale",void 0),r.__decorate([p.property({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],f.prototype,"opacity",void 0),r.__decorate([p.property({type:["ArcGISTiledElevationServiceLayer"]})],f.prototype,"operationalLayerType",void 0),r.__decorate([p.property()],f.prototype,"sourceJSON",void 0),r.__decorate([p.property({json:{read:!1},value:"elevation",readOnly:!0})],f.prototype,"type",void 0),r.__decorate([p.property(w.url)],f.prototype,"url",void 0),r.__decorate([p.property()],f.prototype,"version",void 0),r.__decorate([y.reader("version",["currentVersion"])],f.prototype,"readVersion",null),f=r.__decorate([u.subclass("esri.layers.ElevationLayer")],f);const I=Symbol("default-fetch-tile");f.prototype.fetchTile[I]=!0;return f}));
