/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../chunks/tslib.es6","../request","../TimeExtent","../core/Error","../core/loadAll","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/arrayUtils","../core/has","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../core/accessorSupport/decorators/writer","../core/accessorSupport/PropertyOrigin","../geometry/Extent","../geometry/support/scaleUtils","../geometry/support/spatialReferenceUtils","./Layer","./mixins/APIKeyMixin","./mixins/ArcGISMapService","./mixins/ArcGISService","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/OperationalLayer","./mixins/PortalLayer","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","./mixins/SublayersOwner","./mixins/TemporalLayer","./support/commonProperties","./support/ExportImageParameters","./support/imageBitmapUtils","./support/Sublayer","./support/sublayerUtils","./support/versionUtils","../time/timeZoneUtils"],(function(e,r,t,i,o,a,s,p,n,l,c,y,d,u,m,h,g,S,b,f,v,x,_,I,w,O,T,L,P,E,M,R,A,U,F,N,J){"use strict";let j=class extends(_.BlendLayer(E.TemporalLayer(L.ScaleRangeLayer(P.SublayersOwner(v.ArcGISMapService(x.ArcGISService(w.OperationalLayer(O.PortalLayer(a.MultiOriginJSONMixin(T.RefreshableLayer(f.APIKeyMixin(I.CustomParametersMixin(b))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(s.throwIfAbortError).then((()=>this._fetchService(r)))),Promise.resolve(this)}readImageFormat(e,r){const t=r.supportedImageFormatTypes;return t&&t.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,t,i){if(!this.loaded||!e)return;const o=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap?.supportsDynamicLayers){const e=m.nameToId(i.origin);if(e===m.OriginId.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;a=F.shouldWriteSublayerStructure(o,e,m.OriginId.SERVICE)}else if(e>m.OriginId.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");a=F.shouldWriteSublayerStructure(o,e.sublayers,m.nameToId(e.origin))}}const s=[],p={writeSublayerStructure:a,...i};let n=a;o.forEach((e=>{const r=e.write({},p);s.push(r),n=n||"user"===e.originOf("visible")}));s.some((e=>Object.keys(e).length>1))&&(r.layers=s),n&&(r.visibleLayers=o.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,r,t,i){const o=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new R.ExportImageParameters({layer:this,floors:i?.floors,scale:g.getScale({extent:e,width:r})*o}),s=a.toJSON();a.destroy();const p=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},n=e?.spatialReference,l=S.srToRESTValue(n);s.dpi*=o;const c={};if(i?.timeExtent){const{start:e,end:r}=i.timeExtent.toJSON();c.time=e&&r&&e===r?""+e:`${e??"null"},${r??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:l,imageSR:l,size:r+","+t,...s,...p,...c}}async fetchImage(e,r,t,i){const{data:o}=await this._fetchImage("image",e,r,t,i);return o}async fetchImageBitmap(e,r,t,i){const{data:o,url:a}=await this._fetchImage("blob",e,r,t,i);return A.createBitmap(o,a,i?.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:o}=await r(this.url,i),{extent:a,fullExtent:s,timeExtent:p}=o,n=a||s;return{fullExtent:n&&h.fromJSON(n),timeExtent:p&&t.fromJSON({start:p[0],end:p[1]})}}loadAll(){return o.loadAll(this,(e=>{e(this.allSublayers)}))}serviceSupportsSpatialReference(e){return N.serviceSupportsSpatialReference(this,e)}async _fetchImage(e,t,o,a,p){const n={responseType:e,signal:p?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,o,a,p),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(null!=n.query?.dynamicLayers&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new i("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:e}=await r(l,n);return{data:e,url:l}}catch(c){if(s.isAbortError(c))throw c;throw new i("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:c})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:i}=await r(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});i&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};e.__decorate([p.property(J.timeZoneProperty("dateFieldsTimeReference"))],j.prototype,"dateFieldsTimeZone",void 0),e.__decorate([p.property({type:Boolean})],j.prototype,"datesInUnknownTimezone",void 0),e.__decorate([p.property()],j.prototype,"dpi",void 0),e.__decorate([p.property()],j.prototype,"gdbVersion",void 0),e.__decorate([p.property()],j.prototype,"imageFormat",void 0),e.__decorate([y.reader("imageFormat",["supportedImageFormatTypes"])],j.prototype,"readImageFormat",null),e.__decorate([p.property({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],j.prototype,"imageMaxHeight",void 0),e.__decorate([p.property({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],j.prototype,"imageMaxWidth",void 0),e.__decorate([p.property()],j.prototype,"imageTransparency",void 0),e.__decorate([p.property({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],j.prototype,"isReference",void 0),e.__decorate([p.property({json:{read:!1,write:!1}})],j.prototype,"labelsVisible",void 0),e.__decorate([p.property({type:["ArcGISMapServiceLayer"]})],j.prototype,"operationalLayerType",void 0),e.__decorate([p.property({json:{read:!1,write:!1}})],j.prototype,"popupEnabled",void 0),e.__decorate([p.property(J.timeZoneProperty("preferredTimeReference"))],j.prototype,"preferredTimeZone",void 0),e.__decorate([p.property()],j.prototype,"sourceJSON",void 0),e.__decorate([p.property({json:{write:{ignoreOrigin:!0}}})],j.prototype,"sublayers",void 0),e.__decorate([u.writer("sublayers",{layers:{type:[U]},visibleLayers:{type:[n.Integer]}})],j.prototype,"writeSublayers",null),e.__decorate([p.property({type:["show","hide","hide-children"]})],j.prototype,"listMode",void 0),e.__decorate([p.property({json:{read:!1},readOnly:!0,value:"map-image"})],j.prototype,"type",void 0),e.__decorate([p.property(M.url)],j.prototype,"url",void 0),j=e.__decorate([d.subclass("esri.layers.MapImageLayer")],j);return j}));
