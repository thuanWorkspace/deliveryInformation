/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../chunks/tslib.es6","../request","../core/Error","../core/loadAll","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/urlUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/decorators/cast","../core/arrayUtils","../core/has","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../core/accessorSupport/decorators/writer","../geometry/SpatialReference","./Layer","./mixins/APIKeyMixin","./mixins/ArcGISCachedService","./mixins/ArcGISMapService","./mixins/ArcGISService","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/OperationalLayer","./mixins/PortalLayer","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","./mixins/SublayersOwner","./support/arcgisLayerUrl","./support/commonProperties","./support/imageBitmapUtils","./support/Sublayer"],(function(e,r,t,a,s,i,o,l,n,c,p,u,d,y,h,_,v,m,S,f,g,b,T,w,O,A,L,R,M,P,U){"use strict";var I;const x=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let B=I=class extends(g.BlendLayer(A.ScaleRangeLayer(L.SublayersOwner(m.ArcGISCachedService(S.ArcGISMapService(T.OperationalLayer(w.PortalLayer(f.ArcGISService(s.MultiOriginJSONMixin(O.RefreshableLayer(v.APIKeyMixin(b.CustomParametersMixin(_))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(i.throwIfAbortError).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo?.spatialReference)&&h.fromJSON(e)}writeSublayers(e,r,t,a){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),i=[],o={writeSublayerStructure:!1,...a};s.forEach((e=>{const r=e.write({},o);i.push(r)}));i.some((e=>Object.keys(e).length>1))&&(r.layers=i)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>o.urlToObject(e).path)):null}fetchTile(e,t,a,s={}){const{signal:i}=s,o=this.getTileUrl(e,t,a),l={responseType:"image",signal:i,query:{...this.refreshParameters}};return r(o,l).then((e=>e.data))}async fetchImageBitmapTile(e,t,a,s={}){const{signal:i}=s;if(this.fetchTile!==I.prototype.fetchTile){const r=await this.fetchTile(e,t,a,s);return P.createTileBitmap(r,e,t,a,i)}const o=this.getTileUrl(e,t,a),l={responseType:"blob",signal:i,query:{...this.refreshParameters}},{data:n}=await r(o,l);return P.createTileBitmap(n,e,t,a,i)}getTileUrl(e,r,t){const a=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,s=o.objectToQuery({...this.parsedUrl?.query,blankTile:!a&&null,...this.customParameters,token:this.apiKey}),i=this.tileServers;return`${i&&i.length?i[r%i.length]:this.parsedUrl?.path}/tile/${e}/${r}/${t}${s?"?"+s:""}`}loadAll(){return a.loadAll(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((a,s)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new t("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void a({data:this.sourceJSON})}if(!this.parsedUrl)throw new t("tile-layer:undefined-url","layer's url is not defined");const i=R.parse(this.parsedUrl.path);if(null!=i&&"ImageServer"===i.serverType)throw new t("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");r(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(a,s)})).then((r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!R.isHostedAgolService(t))return this._fetchServerVersion(t,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))}_fetchServerVersion(e,a){if(!R.isArcGISUrl(e))return Promise.reject();const s=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return r(s,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:a}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new t("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(null==e)return null;let r;e=e.toLowerCase();for(let t=0,a=x.length;t<a;t++)if(r=x[t],r.toLowerCase().includes(e))return o.makeAbsolute("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(null==e)return[];const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),t=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[W]}};e.__decorate([l.property({readOnly:!0})],B.prototype,"attributionDataUrl",null),e.__decorate([l.property({type:["show","hide","hide-children"]})],B.prototype,"listMode",void 0),e.__decorate([l.property({json:{read:!0,write:!0}})],B.prototype,"blendMode",void 0),e.__decorate([l.property({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],B.prototype,"isReference",void 0),e.__decorate([l.property({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],B.prototype,"operationalLayerType",void 0),e.__decorate([l.property({type:Boolean})],B.prototype,"resampling",void 0),e.__decorate([l.property()],B.prototype,"sourceJSON",void 0),e.__decorate([l.property({type:h})],B.prototype,"spatialReference",void 0),e.__decorate([u.reader("spatialReference",["spatialReference","tileInfo"])],B.prototype,"readSpatialReference",null),e.__decorate([l.property({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],B.prototype,"path",void 0),e.__decorate([l.property({readOnly:!0})],B.prototype,"sublayers",void 0),e.__decorate([y.writer("sublayers",{layers:{type:[U]}})],B.prototype,"writeSublayers",null),e.__decorate([l.property({json:{read:!1,write:!1}})],B.prototype,"popupEnabled",void 0),e.__decorate([l.property()],B.prototype,"tileServers",null),e.__decorate([n.cast("tileServers")],B.prototype,"castTileServers",null),e.__decorate([l.property({readOnly:!0,json:{read:!1}})],B.prototype,"type",void 0),e.__decorate([l.property(M.url)],B.prototype,"url",void 0),B=I=e.__decorate([d.subclass("esri.layers.TileLayer")],B);const W=Symbol("default-fetch-tile");B.prototype.fetchTile[W]=!0;return B}));
