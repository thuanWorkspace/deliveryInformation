/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../chunks/tslib.es6","../geometry","../core/Collection","../core/Error","../core/Logger","../core/promiseUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/arrayUtils","../core/has","../core/accessorSupport/decorators/subclass","../geohash/geohashUtils","./Layer","./graphics/featureConversionUtils","./graphics/OptimizedGeometry","./knowledgeGraph/KnowledgeGraphLayerDataManager","./knowledgeGraph/KnowledgeGraphSublayer","./knowledgeGraph/supportUtils","./mixins/BlendLayer","./mixins/ScaleRangeLayer","../libs/linkchartlayout/LinkChartLayout","../rest/knowledgeGraphService","../rest/knowledgeGraph/EntityType","../rest/knowledgeGraph/RelationshipType","../geometry/Extent","../geometry/Point","../geometry/Polyline"],(function(e,t,a,i,o,n,r,s,h,l,d,c,y,u,p,m,g,f,k,C,L,b,M,w,N,x,E){"use strict";const D=(e,t,a)=>(e.has(t)||e.set(t,a()),e.get(t));let T=class extends(k.BlendLayer(C.ScaleRangeLayer(y))){constructor(e){if(super(e),this.dataPreloadedInLocalCache=!1,this.defaultLinkChartConfig=null,this._currentLinkChartConfig={layoutMode:"RADIAL_TREE",xScaleFactor:1,yScaleFactor:1},this._graphTypeLookup=new Map,this.knowledgeGraph=null,this.layers=new a,this.linkChartDiagramLookup=new Map,this.linkChartExtent=new N({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7}),this.linkChartGeohashLookup=new Map,this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.sublayerIdsCache=new Map,this.tables=new a,this.type="link-chart",this._originalInclusionList=e.inclusionModeDefinition,e.dataPreloadedInLocalCache&&!e.inclusionModeDefinition)throw new i("knowledge-graph:linkchart-layer-constructor","If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it")}normalizeCtorArgs(e){return{url:e.url,title:e.title,dataPreloadedInLocalCache:e.dataPreloadedInLocalCache,defaultLinkChartConfig:e.defaultLinkChartConfig}}_initializeLayerProperties(e){if(!this.title&&this.url){const e=this.url.split("/");this.title=e[e.length-2]}const t=new Set;let a=[],n=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new i("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.inclusionModeDefinition?.generateAllSublayers?(a=e.knowledgeGraph.dataModel.entityTypes??[],n=e.knowledgeGraph.dataModel.relationshipTypes??[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?e.inclusionModeDefinition?.namedTypeDefinitions.forEach(((i,r)=>{if(!this._graphTypeLookup.get(r))return o.getLogger(this).warn(`A named type, ${r}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(r);this._graphTypeLookup.get(r)instanceof w||"strictOrigin"in this._graphTypeLookup.get(r)?t.has(r)||(t.add(r),n.push(this._graphTypeLookup.get(r))):this._graphTypeLookup.get(r)instanceof M||"properties"in this._graphTypeLookup.get(r)?t.has(r)||(t.add(r),a.push(this._graphTypeLookup.get(r))):(o.getLogger(this).warn(`A named type, ${r}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(r))})):(a=e.knowledgeGraph.dataModel.entityTypes??[],n=e.knowledgeGraph.dataModel.relationshipTypes??[]);const r=new m.KnowledgeGraphLayerDataManager({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=a,this.memberRelationshipTypes=n,this.dataManager=r}load(e){return this.addResolvingPromise(new Promise((t=>{b.fetchKnowledgeGraph(this.url).then((a=>{if(this._initializeLayerProperties({knowledgeGraph:a,inclusionModeDefinition:this._originalInclusionList}),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.size||(this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map},this.dataManager.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})})),this.dataManager.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})}))),this.dataPreloadedInLocalCache)this.loadLayerAssumingLocalCache(),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach((e=>{e.useAllData=!1,e.members?.forEach((e=>{let t;t=e.linkChartLocation instanceof p?e.linkChartLocation:e.linkChartLocation?u.convertFromGeometry(e.linkChartLocation):null,this.linkChartDiagramLookup.set(e.id,t),t&&2===t.coords.length&&0===t.lengths.length?this.linkChartGeohashLookup.set(e.id,c.encodeGeohash(t.coords[1],t.coords[0],m.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(e.id,"")})),this.addResolvingPromise(this._initializeDiagram().then((async()=>{this.layers.forEach((async e=>{await e.refreshCachedQueryEngine()})),this.tables.forEach((async e=>{await e.refreshCachedQueryEngine()}))})))}));else{const t="GEOGRAPHIC"===this.defaultLinkChartConfig?.layoutMode;this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0,!1,t,!0).then((async()=>{n.throwIfAborted(e);const t=[],a=[];this.loadLayerAssumingLocalCache(),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1,this.dataManager.inclusionModeDefinition.namedTypeDefinitions.forEach((e=>{e.useAllData=!1}))),await this._initializeDiagram(),this.layers.forEach((e=>{a.push(e.refreshCachedQueryEngine()),t.push(new Promise((t=>{e.on("layerview-create",(()=>{t(null)}))})))})),this.tables.forEach((e=>{a.push(e.refreshCachedQueryEngine())})),await Promise.all(a)})))}t(null)}))}))),Promise.resolve(this)}async addRecords(e,t){let a=[];t?.cascadeAddRelationshipEndNodes&&this.dataManager.knowledgeGraph.dataModel&&(a=await f.getRelationshipEndNodeIds(e,this.dataManager.knowledgeGraph));const i=e.concat(a).filter((e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id)));await this._handleNewRecords(i)}async removeRecords(e,{cascadeRemoveRelationships:t=!0,recalculateLayout:a=!1}={cascadeRemoveRelationships:!0,recalculateLayout:!1}){let i=[];for(const n of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(n.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(n.typeName)?.members?.has(n.id)&&i.push(n);if(t){const e=new Set,t=[];for(const a of i)if(this.dataManager.nodeConnectionsLookup.has(a.id))for(const t of this.dataManager.nodeConnectionsLookup.get(a.id))e.add(t);for(const a of e)this.dataManager.memberIdTypeLookup.has(a)&&t.push({id:a,typeName:this.dataManager.memberIdTypeLookup.get(a)});i=i.concat(t)}this.dataManager.removeFromLayer(i);for(const n of i)this.sublayerIdsCache.get(n.typeName)?.delete(n.id),this.linkChartDiagramLookup.delete(n.id);a&&await this.calculateLinkChartLayout(this._currentLinkChartConfig.layoutMode,{xScaleFactor:this._currentLinkChartConfig.xScaleFactor,yScaleFactor:this._currentLinkChartConfig.xScaleFactor});const o=[];return this.layers.forEach((e=>{o.push(e.refreshCachedQueryEngine())})),await Promise.all(o),this._refreshNamedTypes(),i}async expand(e){const t=await this.dataManager.getConnectedRecordIds(e),a=t.filter((e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id)));return await this._handleNewRecords(t),{records:a}}loadLayerAssumingLocalCache(){this.memberRelationshipTypes.forEach((e=>{const t=new g({objectType:e,parentCompositeLayer:this,graphType:"relationship",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.memberEntityTypes.forEach((e=>{const t=new g({objectType:e,parentCompositeLayer:this,graphType:"entity",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,t)=>{const a=D(this.sublayerIdsCache,t,(()=>new Set));e.members?.forEach((e=>{if(a.add(e.id),e.linkChartLocation)if(e.linkChartLocation instanceof p)this.linkChartDiagramLookup.set(e.id,e.linkChartLocation),2===e.linkChartLocation.coords.length&&0===e.linkChartLocation.lengths.length?this.linkChartGeohashLookup.set(e.id,c.encodeGeohash(e.linkChartLocation.coords[1],e.linkChartLocation.coords[0],m.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(e.id,"");else{const t=u.convertFromGeometry(e.linkChartLocation);this.linkChartDiagramLookup.set(e.id,e.linkChartLocation?t:null),"x"in e.linkChartLocation&&"y"in e.linkChartLocation?this.linkChartGeohashLookup.set(e.id,c.encodeGeohash(e.linkChartLocation.x,e.linkChartLocation.y,m.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(e.id,"")}}))}))}async calculateLinkChartLayout(e="RADIAL_TREE",t){const a=[],n=[];this.dataManager.sublayerCaches.forEach(((e,t)=>{this.dataManager.entityTypeNames.has(t)?e.forEach((e=>{a.push({typeName:t,feature:e})})):this.dataManager.relationshipTypeNames.has(t)&&e.forEach((e=>{n.push({typeName:t,feature:e})}))})),this.linkChartDiagramLookup=new Map;const r=new Map,s=new Map,h=new Map,l=new Map,d=new Uint8Array(a.length),y=new Float64Array(a.length),p=new Float64Array(a.length),g=new Uint32Array(n.length),f=new Uint32Array(n.length),k=[],C="FORCE_DIRECTED",b=t?.xScaleFactor??1,M=t?.yScaleFactor??1,w=new N({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7});let D,T="FORCE_DIRECTED",G=0,F=0;switch(T="GEOGRAPHIC"===e?C:e,T){case"FORCE_DIRECTED":D=L.LCForceDirectedLayout.apply;break;case"COMMUNITY":D=L.LCCommunityLayout.apply;break;case"HIERARCHICAL":D=L.LCHierarchicalLayout.apply;break;case"RADIAL_TREE":D=L.LCRadialTreeLayout.apply;break;case"SMART_TREE":D=L.LCSmartTreeLayout.apply;break;default:D=L.LCSimpleLayout.apply}a.forEach((({typeName:a,feature:i})=>{if(t?.lockedNodeLocations?.has(i.attributes[m.mockOidFieldName])){"GEOGRAPHIC"===e&&this.dataManager.geographicLookup.has(a)?d[G]=L.NodeFlag.IsGeographic:d[G]=L.NodeFlag.None;const o=t.lockedNodeLocations.get(i.attributes[m.mockOidFieldName]);y[G]=o.x,p[G]=o.y}else if("GEOGRAPHIC"===e&&this.dataManager.geographicLookup.has(a)){d[G]=L.NodeFlag.IsGeographic;let e=null;const t=i.attributes[this.dataManager.geographicLookup.get(a).name],o=this.dataManager.geographicLookup.get(a)?.geometryType;switch(o){case"esriGeometryPoint":y[G]=t?.x,p[G]=t?.y;break;case"esriGeometryPolygon":e=t?.centroid,null!=e?.x&&null!=e?.y?(y[G]=e.x,p[G]=e.y):d[G]=L.NodeFlag.IsMovable;break;case"esriGeometryPolyline":case"esriGeometryMultipoint":e=t?.extent?.center,null!=e?.x&&null!=e?.y?(y[G]=e.x,p[G]=e.y):d[G]=L.NodeFlag.IsMovable;break;default:d[G]=L.NodeFlag.IsMovable}(null==y[G]||null==p[G]||Number.isNaN(y[G])||Number.isNaN(p[G]))&&(d[G]=L.NodeFlag.IsMovable,y[G]=0,p[G]=0)}else d[G]=L.NodeFlag.IsMovable,y[G]=0,p[G]=0;l.set(i.attributes[m.mockOidFieldName],G),k[G]={feature:i,typeName:a},G++}));let _=!1;n.forEach((e=>{const t=l.get(e.feature.attributes[m.mockOriginIdFieldName]),a=l.get(e.feature.attributes[m.mockDestinationIdFieldName]);void 0!==t&&void 0!==a?(g[F]=t,f[F]=a,F++):(_=!0,this.linkChartDiagramLookup.set(e.feature.attributes[m.mockOriginIdFieldName],null),this.linkChartGeohashLookup.set(e.feature.attributes[m.mockOriginIdFieldName],null))})),_&&o.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null"),await L.load();if(!D(d,y,p,g,f))throw new i("knowledge-graph:layout-failed","Attempting to arrange the records in the specified layout failed");for(let i=0;i<k.length;i++){if(d[i]===L.NodeFlag.IsMovable&&(y[i]=y[i]*b,p[i]=p[i]*M),p[i]>84.9999&&(p[i]=84.9999),p[i]<-84.9999&&(p[i]=-84.9999),y[i]>179.9999&&(y[i]=179.9999),y[i]<-179.9999&&(y[i]=-179.9999),k[i].feature.attributes[m.mockLayoutGeometryFieldName]=new x(y[i],p[i]),r.has(k[i].typeName)){const e=r.get(k[i].typeName);e?.set(k[i].feature.attributes[m.mockOidFieldName],k[i].feature)}else{const e=new Map;e.set(k[i].feature.attributes[m.mockOidFieldName],k[i].feature),r.set(k[i].typeName,e)}h.set(k[i].feature.attributes[m.mockOidFieldName],k[i].feature);const e=u.convertFromGeometry(k[i].feature.attributes[m.mockLayoutGeometryFieldName]);this.linkChartDiagramLookup.set(k[i].feature.attributes[m.mockOidFieldName],k[i].feature.attributes[m.mockLayoutGeometryFieldName]?e:null),this.linkChartGeohashLookup.set(k[i].feature.attributes[m.mockOidFieldName],c.encodeGeohash(k[i].feature.attributes[m.mockLayoutGeometryFieldName].y,k[i].feature.attributes[m.mockLayoutGeometryFieldName].x,m.geohashEncodingPrecision)),k[i].feature.attributes[m.mockLayoutGeometryFieldName].x<w.xmin&&(w.xmin=k[i].feature.attributes[m.mockLayoutGeometryFieldName].x),k[i].feature.attributes[m.mockLayoutGeometryFieldName].x>w.xmax&&(w.xmax=k[i].feature.attributes[m.mockLayoutGeometryFieldName].x),k[i].feature.attributes[m.mockLayoutGeometryFieldName].y<w.ymin&&(w.ymin=k[i].feature.attributes[m.mockLayoutGeometryFieldName].y),k[i].feature.attributes[m.mockLayoutGeometryFieldName].y>w.ymax&&(w.ymax=k[i].feature.attributes[m.mockLayoutGeometryFieldName].y)}return this.linkChartExtent.xmin=w.xmin,this.linkChartExtent.xmax=w.xmax,this.linkChartExtent.ymin=w.ymin,this.linkChartExtent.ymax=w.ymax,n.forEach((e=>{const t=k[l.get(e.feature.attributes[m.mockOriginIdFieldName])]?.feature.attributes[m.mockLayoutGeometryFieldName],a=k[l.get(e.feature.attributes[m.mockDestinationIdFieldName])]?.feature.attributes[m.mockLayoutGeometryFieldName];if(!t||!a)return;const i=new E({paths:[[t.x,t.y],[a.x,a.y]]});if(e.feature.attributes[m.mockLayoutGeometryFieldName]=i,s.has(e.typeName)){const t=s.get(e.typeName);t?.set(e.feature.attributes[m.mockOidFieldName],e.feature)}else{const t=new Map;t.set(e.feature.attributes[m.mockOidFieldName],e.feature),s.set(e.typeName,t)}h.set(e.feature.attributes[m.mockOidFieldName],e.feature);const o=u.convertFromGeometry(e.feature.attributes[m.mockLayoutGeometryFieldName]);this.linkChartDiagramLookup.set(e.feature.attributes[m.mockOidFieldName],e.feature.attributes[m.mockLayoutGeometryFieldName]?o:null),this.linkChartGeohashLookup.set(e.feature.attributes[m.mockOidFieldName],"")})),this._currentLinkChartConfig={layoutMode:e,xScaleFactor:b,yScaleFactor:M},{nodes:r,links:s,idMap:h}}async applyNewLinkChartLayout(e="RADIAL_TREE",t){const a=[];await this.calculateLinkChartLayout(e,t),this.layers.forEach((e=>{a.push(e.refreshCachedQueryEngine())})),await Promise.all(a),this._refreshNamedTypes()}getCurrentNodeLocations(){const e=new Map;return this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((t=>{t?.members?.forEach((t=>{const a=t.linkChartLocation;let i;const o=t.id;a&&(i="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]},e.set(o,new x({x:i.x,y:i.y})))}))})),e}async synchronizeInclusionListWithCache(){return new Promise((e=>{this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,t)=>{if(e.useAllData=!1,e.members&&e.members.size>0){if(!this.dataManager.sublayerCaches.get(t))return;const a=new Set(Array.from(this.dataManager.sublayerCaches.get(t).keys()));Array.from(e.members.keys()).filter((e=>!a.has(e))).forEach((t=>{e.members?.delete(t)}))}})),e()}))}async refreshLinkChartCache(e){await this.dataManager.refreshCacheContent(e);const t=[];this.layers.forEach((e=>{t.push(e.refreshCachedQueryEngine())})),await Promise.all(t),this._refreshNamedTypes()}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const a of e)this.sublayerIdsCache.has(a.typeName)||(this.sublayerIdsCache.set(a.typeName,new Set),t.push(a.typeName)),this.sublayerIdsCache.get(a.typeName).add(a.id);for(const a of t)if(this._graphTypeLookup.has(a)){const e=this._graphTypeLookup.get(a),t="endPoints"in e?"relationship":"entity",i=new g({objectType:e,parentCompositeLayer:this,graphType:t,title:a});"entity"===t?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a),i.geometryType?this.layers.push(i):this.tables.push(i),this.dataManager.sublayerCaches.set(a,new Map)}await this.dataManager.refreshCacheContent(e.map((e=>e.id))),await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode,{xScaleFactor:this._currentLinkChartConfig.xScaleFactor,yScaleFactor:this._currentLinkChartConfig.xScaleFactor})}async _initializeDiagram(){this.defaultLinkChartConfig?this.defaultLinkChartConfig.doNotRecalculateLayout?(this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((e=>{e?.members?.forEach((e=>{const t=e.linkChartLocation;let a;const i=e.id;if(!t)return;a="x"in t?{x:t.x,y:t.y}:{x:t.coords[0],y:t.coords[1]};const o=u.convertFromGeometry(a);this.linkChartDiagramLookup.set(i,o),this.linkChartGeohashLookup.set(i,c.encodeGeohash(a.x,a.y,m.geohashEncodingPrecision)),this.linkChartExtent.xmin>a.x&&(this.linkChartExtent.xmin=a.x),this.linkChartExtent.xmax<a.x&&(this.linkChartExtent.xmax=a.x),this.linkChartExtent.ymin>a.y&&(this.linkChartExtent.ymin=a.y),this.linkChartExtent.ymax<a.y&&(this.linkChartExtent.ymax=a.y)}))})),this.memberRelationshipTypes.forEach((e=>{e.name&&this.dataManager.sublayerCaches.get(e.name)?.forEach((e=>{const t=this.linkChartDiagramLookup.get(e.attributes[m.mockOriginIdFieldName]),a=this.linkChartDiagramLookup.get(e.attributes[m.mockDestinationIdFieldName]);if(t&&a){const i=u.convertFromGeometry(new E({paths:[[t.coords[0],t.coords[1]],[a.coords[0],a.coords[1]]]}));this.linkChartDiagramLookup.set(e.attributes[m.mockOidFieldName],i)}else this.linkChartDiagramLookup.set(e.attributes[m.mockOidFieldName],null);this.linkChartGeohashLookup.set(e.attributes[m.mockOidFieldName],"")}))}))):await this.calculateLinkChartLayout(this.defaultLinkChartConfig.layoutMode,{xScaleFactor:this.defaultLinkChartConfig.xScaleFactor,yScaleFactor:this.defaultLinkChartConfig.yScaleFactor,lockedNodeLocations:this.getCurrentNodeLocations()}):await this.calculateLinkChartLayout("RADIAL_TREE",{lockedNodeLocations:this.getCurrentNodeLocations()})}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}};e.__decorate([r.property()],T.prototype,"dataPreloadedInLocalCache",void 0),e.__decorate([r.property()],T.prototype,"defaultLinkChartConfig",void 0),e.__decorate([r.property()],T.prototype,"dataManager",void 0),e.__decorate([r.property()],T.prototype,"knowledgeGraph",void 0),e.__decorate([r.property()],T.prototype,"layers",void 0),e.__decorate([r.property()],T.prototype,"linkChartDiagramLookup",void 0),e.__decorate([r.property()],T.prototype,"linkChartExtent",void 0),e.__decorate([r.property()],T.prototype,"linkChartGeohashLookup",void 0),e.__decorate([r.property()],T.prototype,"memberEntityTypes",void 0),e.__decorate([r.property()],T.prototype,"memberRelationshipTypes",void 0),e.__decorate([r.property()],T.prototype,"sublayerIdsCache",void 0),e.__decorate([r.property()],T.prototype,"tables",void 0),e.__decorate([r.property({json:{read:!1}})],T.prototype,"type",void 0),T=e.__decorate([d.subclass("esri.layers.LinkChartLayer")],T);return T}));
