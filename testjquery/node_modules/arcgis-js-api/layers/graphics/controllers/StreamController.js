/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/tslib.es6","../../../geometry","../../../Graphic","../../../core/Accessor","../../../core/maybe","../../../core/Promise","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../data/StreamFeatureManager","../sources/connections/createConnection","../../../views/3d/support/EventedSet","../../../geometry/support/typeUtils"],(function(e,t,r,s,o,a,i,n,c,l,d,h,p,u,y,m,_){"use strict";const g=2500;e.StreamGraphic=class extends s{getObjectId(){return this.objectId}},t.__decorate([c.property({type:Number,json:{read:!0}})],e.StreamGraphic.prototype,"objectId",void 0),e.StreamGraphic=t.__decorate([p.subclass("esri.layers.graphics.controllers.StreamGraphic")],e.StreamGraphic);class f{constructor(e){this.onUpdate=e,this._idToGraphic=new Map}destroy(){this._idToGraphic.clear()}add(e){this._idToGraphic.set(e.objectId,e)}get(e){return this._idToGraphic.get(e)}forEach(e){this._idToGraphic.forEach(e)}removeById(e){const t=this._idToGraphic.get(e);return t?(t.sourceLayer=t.layer=null,this._idToGraphic.delete(e),t):null}update(e,t){this.onUpdate(e,t)}get size(){return this._idToGraphic.size}}e.StreamController=class extends(i.EsriPromiseMixin(o)){constructor(){super(...arguments),this.isPaused=!1,this.graphics=new m.EventedSet,this._updateInfo={websocket:0,client:0},this._updateIntervalId=null,this._outSpatialReference=null}initialize(){this.addResolvingPromise(this.layer.when((()=>this._startup())))}destroy(){this.clear()}_clearInterval(){null!==this._updateIntervalId&&(clearInterval(this._updateIntervalId),this._updateIntervalId=null)}clear(){this._clearInterval(),this.connection=a.destroyMaybe(this.connection),this.store=a.destroyMaybe(this.store),this.graphics.clear(),this.removeAllHandles()}get updating(){return!this.connection||"connected"===this.connection.connectionStatus}_startup(){const{layer:e,layerView:t}=this,{spatialReference:r,definitionExpression:s,geometryDefinition:o,objectIdField:a,timeInfo:i,purgeOptions:c,maxReconnectionAttempts:l,maxReconnectionInterval:d,customParameters:h}=e,p=e.geometryType?_.featureGeometryTypeKebabDictionary.toJSON(e.geometryType):null,m=r,g=t.view.spatialReference,I={geometry:o,where:s};this.clear(),this._set("connection",y.createConnection(e.parsedUrl,m,g,p,I,l,d,h??void 0)),this._outSpatialReference=g.toJSON(),this.store=new f(this._onUpdate.bind(this)),this.featuresManager=new u.StreamFeatureManager(this.store,a,i.toJSON(),c);const v="startup-watches";this.removeHandles(v),this.addHandles([e.on("send-message-to-socket",(e=>this.connection.sendMessageToSocket(e))),e.on("send-message-to-client",(e=>this.connection.sendMessageToClient(e))),this.connection.on("data-received",(e=>this._onFeature(e))),this.connection.on("message-received",(e=>this._onWebSocketMessage(e))),n.watch((()=>[e.definitionExpression,e.geometryDefinition,e.purgeOptions]),(()=>this._startup()))],v),this.isPaused||this._initUpdateInterval()}_onWebSocketMessage(e){if(this.layerView.emit("message-received",e),"type"in e)switch(e.type){case"delete":if(e.objectIds)for(const t of e.objectIds)this.featuresManager.removeById(t);if(e.trackIds)for(const t of e.trackIds)this.featuresManager.removeByTrackId(t);break;case"clear":this.store.forEach((e=>this.featuresManager.removeById(e.objectId)))}}_onFeature(t){this._updateInfo.websocket++,this.layerView.hasEventListener("data-received")&&this.layerView.emit("data-received",{attributes:t.attributes,centroid:t.centroid,geometry:t.geometry});try{null==t.geometry||t.geometry.spatialReference||(t.geometry.spatialReference=this._outSpatialReference);const r=e.StreamGraphic.fromJSON(t);r.sourceLayer=r.layer=this.layer,this.featuresManager.add(r)}catch{}}_onUpdate(e,t){null!=t&&this.graphics.removeMany(t),null!=e&&(this._updateInfo.client+=e.length,this.graphics.addMany(e))}_initUpdateInterval(){this._clearInterval();const{updateInterval:e}=this.layer;let t=performance.now();this._updateIntervalId=setInterval((()=>{const e=performance.now(),r=e-t;if(r>g){t=e;const s=Math.round(this._updateInfo.client/(r/1e3)),o=Math.round(this._updateInfo.websocket/(r/1e3));this._updateInfo.client=0,this._updateInfo.websocket=0,this.layerView.emit("update-rate",{client:s,websocket:o})}this.featuresManager.checkForUpdates()}),e)}pauseStream(){this.isPaused=!0,this._clearInterval()}resumeStream(){this.isPaused=!1,this._initUpdateInterval()}},t.__decorate([c.property()],e.StreamController.prototype,"isPaused",void 0),t.__decorate([c.property({constructOnly:!0})],e.StreamController.prototype,"layer",void 0),t.__decorate([c.property({constructOnly:!0})],e.StreamController.prototype,"layerView",void 0),t.__decorate([c.property()],e.StreamController.prototype,"connection",void 0),t.__decorate([c.property({readOnly:!0})],e.StreamController.prototype,"updating",null),e.StreamController=t.__decorate([p.subclass("esri.layers.graphics.controllers.StreamController")],e.StreamController),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
