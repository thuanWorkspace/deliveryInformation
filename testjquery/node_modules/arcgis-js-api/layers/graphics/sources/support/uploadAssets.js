/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../request","../../../../core/has","../../../../core/Logger","../../../../core/promiseUtils","../../../../core/time","../../../../core/urlUtils","../../../../core/uuid","../../../../geometry/support/meshUtils/External","./uploadAssetErrors","./uploadProgressWeights","./uploads","../../../support/infoFor3D","../../../../support/progressUtils"],(function(e,r,s,t,o,a,n,i,u,c,l,p,d,m){"use strict";async function g(e,r,s){const t=e.length;if(!t)return s?.onProgress?.(1),[];const o=m.makeProgressManager(t,s?.onProgress,"uploadAssets");return Promise.all(e.map(((e,t)=>f(e,r,{...s,onProgress:o.makeOnProgress(t)}))))}async function f(e,{layer:r,ongoingUploads:s},t){const o=s.get(e);if(o)return o;if(!j(r))throw new c.UnsupportedError;if(w(e,r))return t?.onProgress?.(1),e;const a=y(e,r,t);s.set(e,a);try{await a}finally{s.delete(e)}return e}function w(e,r){const{parsedUrl:s}=r;return null!=s&&e.metadata.externalSources.some((e=>u.externalIsOnService(e,s)))}async function y(e,r,s){const{metadata:t}=e,{displaySource:a}=t,n=I(a?.source,r),i=!!n,u=t.externalSources.length>0,c=i?h(n,r,s):u?P(e,r,s):b(e,r,s),l=await c;return o.throwIfAborted(s),e.addExternalSources([l]),e}async function h(e,r,s){return{source:await S(e,r,s),original:!0}}async function P(e,r,s){const t=B(r),{externalSources:o}=e.metadata,a=T(o,r);if(!a)throw new c.NoSupportedSourceError;const n=m.makeProgressManager(l.uploadProgressWeights.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i=await S(a,r,{onProgress:n.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const u=a.reduce(((e,{asset:r})=>r instanceof File?e+r.size:e),0),p=n.simulate("serviceAssetsToGlb",m.estimatedConversionTime(u));try{return{source:await k(i,r,t)}}finally{p.remove()}}async function b(e,r,s){const t=m.makeProgressManager(l.uploadProgressWeights.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),o=A(e,r,{...s,onProgress:t.makeOnProgress("meshToAssetBlob")});return{source:await U([o],r,{...s,onProgress:t.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function A(e,r,s){const t=B(r),a=await e.load(s),n=await a.toBinaryGLTF({ignoreLocalTransform:!0});o.throwIfAborted(s);const u=await n.buffer();return o.throwIfAborted(s),{blob:new Blob([u.data],{type:u.type}),assetName:`${i.generateBracedUUID()}.glb`,assetType:t}}function T(e,r){for(const s of e){const e=I(s.source,r);if(e)return e}return null}function I(e,r){if(!e)return null;const{infoFor3D:{supportedFormats:s,editFormats:t}}=r,o=u.externalSourceToMultiPart(e),a=new Array;let n=!1;for(let i=0;i<o.length;++i){const e=F(o[i],s);if(!e)return null;t.includes(e.assetType)&&(n=!0),a.push(e)}return n?a:null}function F(e,r){const s=u.assetFormatId(e,r);return s?{asset:e,assetType:s}:null}async function S(e,r,s){return U(e.map((e=>E(e,s))),r,s)}async function U(e,r,s){const t=m.makeProgressManager(l.uploadProgressWeights.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),a=await N(e,r,{...s,onProgress:t.makeOnProgress("prepareAssetItems")});o.throwIfAborted(s);const n=a.map((({item:e})=>e)),{uploadResults:i}=await x(n,r,{...s,onProgress:t.makeOnProgress("uploadAssetItems")});return o.throwIfAborted(s),e.map(((e,s)=>D(a[s],i[s],r)))}async function E(e,r){const{asset:s,assetType:t}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:t};const a=await s.toBlob(r);return o.throwIfAborted(r),{blob:a,assetName:s.assetName,assetType:t}}async function v(e,r,s){const{blob:t,assetType:a,assetName:i}=e;let u=null;try{const e=await p.uploadItem({data:t,name:i},r.url,s);o.throwIfAborted(s),u={assetType:a,assetUploadId:e.itemID}}catch(l){o.throwIfAbortError(l),C().warnOnce(`Service ${r.url} does not support the REST Uploads API.`)}if(!u){const e=await n.parseData(t);if(o.throwIfAborted(s),!e.isBase64)throw new c.NotBase64Error;u={assetType:a,assetData:e.data}}if(!u)throw new c.UnableToPrepareOptionsError;return{item:u,assetName:i}}function N(e,r,s){const t=m.makeProgressManager(e.length,s?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,a)=>{const n=v(await e,r,{...s,onProgress:t.makeOnProgress(a)});return o.throwIfAborted(s),n})))}async function x(e,s,t){const a=m.simulateProgress(t?.onProgress);try{const a=await r(n.join(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(o.throwIfAborted(t),a.data.uploadResults.length!==e.length)throw new c.BadResponseError(e.length,a.data.uploadResults.length);return a.data}finally{a.remove()}}function D(e,r,s){const{success:t}=r;if(!t){const{error:s}=r;throw new c.UploadFailedError(e.assetName,s)}const{assetHash:o}=r,{assetName:a,item:{assetType:n}}=e,{infoFor3D:{supportedFormats:i}}=s,l=d.getFormatIdMimeType(n,i);if(!l)throw new c.UnsupportedFormatUploadedError(n);return new u.ServiceAsset(a,l,[new u.ServiceAssetPart(`${s.parsedUrl.path}/assets/${o}`,o)])}async function k(e,r,s){const t=e.map((({assetName:e,parts:r})=>({assetName:e,assetHash:r[0].partHash}))),o=r.capabilities?.operations.supportsAsyncConvert3D,a={f:"json",assets:JSON.stringify(t),transportType:"esriTransportTypeUrl",targetFormat:s,async:o},i=n.join(r.parsedUrl.path,"convert3D");let l;try{l=(await(o?O:M)(i,{query:a,responseType:"json",timeout:0})).data}catch(m){throw new c.Convert3DFailedError}const{supportedFormats:p}=r.infoFor3D;return l.assets.map((e=>{const r=d.getMimeTypeFormatId(e.contentType,p);if(!r)throw new c.UnsupportedFormatUploadedError(r);return new u.ServiceAsset(e.assetName,e.contentType,[new u.ServiceAssetPart(e.assetURL,e.assetHash)])}))}function M(e,s){return r(e,s)}async function O(e,s){const t=(await r(e,s)).data.statusUrl;for(;;){const e=(await r(t,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return r(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await o.after(R)}}function j(e){return!!e.infoFor3D&&!!e.url}function B(e){const{infoFor3D:r}=e,s=d.getMimeTypeFormatId("model/gltf-binary",r.supportedFormats)??d.getFilenameFormatId("glb",r.supportedFormats);if(!s)throw new c.NoGlbSupportError;return s}function C(){return t.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const R=a.Milliseconds(1e3);e.uploadAssets=g,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
