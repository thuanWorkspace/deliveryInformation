/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/tslib.es6","../../../geometry","../../../core/has","../../../core/Loadable","../../../core/promiseUtils","../../../core/workers/workers","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/accessorSupport/decorators/subclass","../../../rest/support/FeatureSet","../../../geometry/Extent"],(function(e,t,o,r,s,i,n,a,c,u,l,d,p){"use strict";e.CSVSource=class extends s{constructor(e){super(e),this.type="csv",this.refresh=i.debounce((async e=>{await this.load();const{extent:t,timeExtent:o}=await this._connection.invoke("refresh",e);return t&&(this.sourceJSON.extent=t),o&&(this.sourceJSON.timeInfo.timeExtent=[o.start,o.end]),{dataChanged:!0,updates:{extent:this.sourceJSON.extent,timeInfo:this.sourceJSON.timeInfo}}}))}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){await this.load(t);const o=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return d.fromJSON(o)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._connection.invoke("queryFeatures",e?e.toJSON():null,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t)}async queryObjectIds(e,t={}){return await this.load(t),this._connection.invoke("queryObjectIds",e?e.toJSON():null,t)}async queryExtent(e,t={}){await this.load(t);const o=await this._connection.invoke("queryExtent",e?e.toJSON():null,t);return{count:o.count,extent:p.fromJSON(o.extent)}}async querySnapping(e,t={}){return await this.load(t),this._connection.invoke("querySnapping",e,t)}async _startWorker(e){this._connection=await n.open("CSVSourceWorker",{strategy:r("feature-layers-workers")?"dedicated":"local",signal:e,registryTarget:this});const{url:t,delimiter:o,fields:s,latitudeField:i,longitudeField:a,spatialReference:c,timeInfo:u}=this.loadOptions,l=await this._connection.invoke("load",{url:t,customParameters:this.customParameters,parsingOptions:{delimiter:o,fields:s?.map((e=>e.toJSON())),latitudeField:i,longitudeField:a,spatialReference:c?.toJSON(),timeInfo:u?.toJSON()}},{signal:e});this.locationInfo=l.locationInfo,this.sourceJSON=l.layerDefinition,this.delimiter=l.delimiter}},t.__decorate([a.property()],e.CSVSource.prototype,"type",void 0),t.__decorate([a.property()],e.CSVSource.prototype,"loadOptions",void 0),t.__decorate([a.property()],e.CSVSource.prototype,"customParameters",void 0),t.__decorate([a.property()],e.CSVSource.prototype,"locationInfo",void 0),t.__decorate([a.property()],e.CSVSource.prototype,"sourceJSON",void 0),t.__decorate([a.property()],e.CSVSource.prototype,"delimiter",void 0),e.CSVSource=t.__decorate([l.subclass("esri.layers.graphics.sources.CSVSource")],e.CSVSource),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
