/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","../../../../chunks/tslib.es6","../../../../geometry","../../../../request","../../../../core/Error","../../../../core/Logger","../../../../core/promiseUtils","../../../../core/urlUtils","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/has","../../../../core/accessorSupport/decorators/subclass","./WebSocketConnection","../../../../rest/query/operations/query","../../../../rest/support/Query","../../../../geometry/support/jsonUtils","../../../../geometry/SpatialReference"],(function(e,t,r,i,s,o,n,a,c,u,l,d,h,f,y,g,_){"use strict";const p=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"})),m=1e4,w={maxQueryDepth:5,maxRecordCountFactor:3};let b=class extends h.WebSocketConnection{constructor(e){super({...w,...e}),this._buddyServicesQuery=null,this._relatedFeatures=null}async _open(){const e=await this._fetchServiceDefinition(this._config.source);e.timeInfo.trackIdField||o.getLogger(this).warn("GeoEvent service was configured without a TrackIdField. This may result in certain functionality being disabled. The purgeOptions.maxObservations property will have no effect.");const t=this._fetchWebSocketUrl(e.streamUrls,this._config.spatialReference);this._buddyServicesQuery||(this._buddyServicesQuery=this._queryBuddyServices()),await this._buddyServicesQuery,await this._tryCreateWebSocket(t);const{filter:r,outFields:i}=this._config;this.destroyed||this._setFilter(r,i)}_onMessage(e){if("attributes"in e){let r;try{r=this._enrich(e),null!=this._featureZScaler&&this._featureZScaler(r.geometry)}catch(t){return void o.getLogger(this).error(new s("geoevent-connection","Failed to parse message",t))}this.onFeature(r)}else this.onMessage(e)}async _fetchServiceDefinition(e){const t={f:"json",...this._config.customParameters},r=i(e.path,{query:t,responseType:"json"}),s=(await r).data;return this._serviceDefinition=s,s}_fetchWebSocketUrl(e,t){const r=e[0],{urls:i,token:s}=r,o=this._inferWebSocketBaseUrl(i);return a.addQueryParameters(`${o}/subscribe`,{outSR:""+t.wkid,token:s})}_inferWebSocketBaseUrl(e){if(1===e.length)return e[0];for(const t of e)if(t.includes("wss"))return t;return o.getLogger(this).error(new s("geoevent-connection","Unable to infer WebSocket url",e)),null}async _setFilter(e,t){const r=this._websocket;if(null==r||null==e&&null==t)return;const i=JSON.stringify({filter:this._serializeFilter(e,t)});let a=!1;const c=n.createResolver(),u=()=>{a||(this.destroyed||this._websocket!==r||o.getLogger(this).error(new s("geoevent-connection","Server timed out when setting filter")),c.reject())},l=e=>{const t=JSON.parse(e.data);t.filter&&(t.error&&(o.getLogger(this).error(new s("geoevent-connection","Failed to set service filter",t.error)),this._set("errorString",`Could not set service filter - ${t.error}`),c.reject(t.error)),this._setWebSocketJSONParseHandler(r),a=!0,c.resolve())};return r.onmessage=l,r.send(i),setTimeout(u,m),c.promise}_serializeFilter(e,t){const r={};if(null==e&&null==t)return r;if(e?.geometry)try{const t=g.fromJSON(e.geometry);if("extent"!==t.type)throw new s(`Expected extent but found type ${t.type}`);r.geometry=JSON.stringify(t.shiftCentralMeridian())}catch(i){o.getLogger(this).error(new s("geoevent-connection","Encountered an error when setting connection geometryDefinition",i))}return e?.where&&"1 = 1"!==e.where&&"1=1"!==e.where&&(r.where=e.where),null!=t&&(r.outFields=t.join(",")),r}_enrich(e){if(!this._relatedFeatures)return e;const t=this._serviceDefinition.relatedFeatures.joinField,r=e.attributes[t],i=this._relatedFeatures.get(r);if(!i)return o.getLogger(this).warn("geoevent-connection","Feature join failed. Is the join field configured correctly?",e),e;const{attributes:n,geometry:a}=i;for(const s in n)e.attributes[s]=n[s];return a&&(e.geometry=a),e.geometry||e.centroid||o.getLogger(this).error(new s("geoevent-connection","Found malformed feature - no geometry found",e)),e}async _queryBuddyServices(){try{const{relatedFeatures:e,keepLatestArchive:t}=this._serviceDefinition,r=this._queryRelatedFeatures(e),i=this._queryArchive(t);await r;const s=await i;if(!s)return;for(const o of s.features)this.onFeature(this._enrich(o))}catch(e){o.getLogger(this).error(new s("geoevent-connection","Encountered an error when querying buddy services",{error:e}))}}async _queryRelatedFeatures(e){if(!e)return;const t=await this._queryBuddy(e.featuresUrl);this._addRelatedFeatures(t)}async _queryArchive(e){if(e)return this._queryBuddy(e.featuresUrl)}async _queryBuddy(t){const r=new((await new Promise(((t,r)=>e(["../../../FeatureLayer"],(e=>t(p(e))),r)))).default)({url:t}),{capabilities:i}=await r.load(),s=i.query.supportsMaxRecordCountFactor,o=i.query.supportsPagination,n=i.query.supportsCentroid,a=this._config.maxRecordCountFactor,c=r.capabilities.query.maxRecordCount,u=s?c*a:c,l=new y;if(l.outFields=this._config.outFields??["*"],l.where=this._config.filter?.where??"1=1",l.returnGeometry=!0,l.returnExceededLimitFeatures=!0,l.outSpatialReference=_.fromJSON(this._config.spatialReference),n&&(l.returnCentroid=!0),s&&(l.maxRecordCountFactor=a),o)return l.num=u,r.destroy(),this._queryPages(t,l);const d=await f.executeQuery(t,l,this._config.sourceSpatialReference);return r.destroy(),d.data}async _queryPages(e,t,r=[],i=0){t.start=null!=t.num?i*t.num:null;const{data:s}=await f.executeQuery(e,t,this._config.sourceSpatialReference);return s.exceededTransferLimit&&i<(this._config.maxQueryDepth??0)?(s.features.forEach((e=>r.push(e))),this._queryPages(e,t,r,i+1)):(r.forEach((e=>s.features.push(e))),s)}_addRelatedFeatures(e){const t=new Map,r=e.features,i=this._serviceDefinition.relatedFeatures.joinField;for(const s of r){const e=s.attributes[i];t.set(e,s)}this._relatedFeatures=t}};b=t.__decorate([d.subclass("esri.layers.graphics.sources.connections.GeoEventConnection")],b);return b}));
