/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../request","../../../../core/asyncUtils","../../../../core/Error","../../../../core/Logger","../../../../core/promiseUtils","../../../../geometry/support/jsonUtils","../../../../geometry/support/spatialReferenceUtils","../../featureConversionUtils","../../data/FeatureStore","../../data/projectionSupport","../../data/QueryEngine","./geojson","../support/clientSideDefaults","../support/sourceUtils","../../../support/FieldsIndex","../../../support/fieldType","../../../support/fieldUtils","../../../../time/timeZoneUtils"],(function(e,t,s,i,r,n,a,o,u,l,d,c,p,y,h,m,f,g){"use strict";const _={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class F{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const i=[],[r]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),n=c.inferLayerProperties(r,{geometryType:e.geometryType}),o=e.fields||n.fields||[],l=null!=e.hasZ?e.hasZ:n.hasZ,y=n.geometryType;let F=e.objectIdField||n.objectIdFieldName||"__OBJECTID";const E=e.spatialReference||a.WGS84;let I=e.timeInfo;o===n.fields&&n.unknownFields.length>0&&i.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:n.unknownFields}});const b=new h(o);let T=b.get(F);T?("esriFieldTypeString"!==T.type&&(T.type="esriFieldTypeOID"),T.editable=!1,T.nullable=!1,F=T.name):(T={alias:F,name:F,type:"string"===n.objectIdFieldType?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(T));const j={};for(const a of o){if(null==a.name&&(a.name=a.alias),null==a.alias&&(a.alias=a.name),!a.name)throw new s("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!m.kebabDict.jsonValues.includes(a.type))throw new s("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==T.name){const e=f.getFieldDefaultValue(a);void 0!==e&&(j[a.name]=e)}null==a.length&&(a.length=f.getFieldDefaultLength(a))}if(I){if(I.startTimeField){const e=b.get(I.startTimeField);e?(I.startTimeField=e.name,e.type="esriFieldTypeDate"):I.startTimeField=null}if(I.endTimeField){const e=b.get(I.endTimeField);e?(I.endTimeField=e.name,e.type="esriFieldTypeDate"):I.endTimeField=null}if(I.trackIdField){const e=b.get(I.trackIdField);e?I.trackIdField=e.name:(I.trackIdField=null,i.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:I}}))}I.startTimeField||I.endTimeField||(i.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:I}}),I=null)}const S=y?p.createDrawingInfo(y):void 0,w=b.dateFields.length?{timeZoneIANA:g.utc}:null,q={warnings:i,featureErrors:[],layerDefinition:{..._,drawingInfo:S??void 0,templates:p.createDefaultTemplate(j),extent:void 0,geometryType:y,objectIdField:F,fields:o,hasZ:!!l,timeInfo:I,dateFieldsTimeReference:w}};this._queryEngine=new d.QueryEngine({fieldsIndex:h.fromLayerJSON({fields:o,timeInfo:I,dateFieldsTimeReference:w}),geometryType:y,hasM:!1,hasZ:l,objectIdField:F,spatialReference:E,timeInfo:I,featureStore:new u({geometryType:y,hasM:!1,hasZ:l}),cacheSpatialQueries:!0});const x=this._queryEngine.fieldsIndex.requiredFields.indexOf(T);x>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(x,1),this._createDefaultAttributes=p.createDefaultAttributesFunction(j,F);const R=await this._createFeatures(r);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,R);const k=this._normalizeFeatures(R,q.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:D,timeExtent:O}=await this._queryEngine.fetchRecomputedExtents();if(q.layerDefinition.extent=D,O){const{start:e,end:t}=O;q.layerDefinition.timeInfo.timeExtent=[e,t]}return q}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([y.loadGeometryEngineForSimplify(t,s),l.checkProjectionSupport(e.adds,t),l.checkProjectionSupport(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=t.createTask(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,e);const t=this._normalizeFeatures(e);t&&this._queryEngine.featureStore.addMany(t)}),(e=>{this._queryEngine.featureStore.clear(),r.isAbortError(e)||i.getLogger("esri.layers.GeoJSONLayer").error(new s("geojson-layer:refresh","An error occurred during refresh",{error:e}))})),await this._waitSnapshotComplete();const{fullExtent:n,timeExtent:a}=await this._queryEngine.fetchRecomputedExtents();return{extent:n,timeExtent:a}}async _createFeatures(e){if(null==e)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=c.createOptimizedFeatures(e,{geometryType:t,hasZ:s,objectIdField:i});if(!a.equals(this._queryEngine.spatialReference,a.WGS84))for(const n of r)null!=n.geometry&&(n.geometry=o.convertFromGeometry(l.project(o.convertToGeometry(n.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),a.WGS84,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(t){const{url:s,customParameters:i}=this._loadOptions,r=(await e(s,{responseType:"json",query:{...i},signal:t})).data;return c.validateGeoJSON(r),r}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const n of e){const e=this._createDefaultAttributes(),a=y.mixAttributes(i,e,n.attributes,!0);a?t?.push(a):(this._assignObjectId(e,n.attributes,!0),n.attributes=e,n.objectId=e[s],r.push(n))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),s?.length&&this._applyUpdateEdits(r,s),i?.length){for(const e of i)r.deleteResults.push(y.createFeatureEditSuccessResult(e));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:n,timeExtent:a}=await this._queryEngine.fetchRecomputedExtents();return{extent:n,timeExtent:a,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:a,objectIdField:u,spatialReference:d,featureStore:c,fieldsIndex:p}=this._queryEngine,h=[];for(const o of t){if(o.geometry&&i!==n.getJsonType(o.geometry)){s.push(y.createFeatureEditErrorResult("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),r=y.mixAttributes(p,t,o.attributes);if(r)s.push(r);else{if(this._assignObjectId(t,o.attributes),o.attributes=t,null!=o.uid){const t=o.attributes[u];e.uidToObjectId[o.uid]=t}if(null!=o.geometry){const e=o.geometry.spatialReference??d;o.geometry=l.project(y.simplify(o.geometry,e),e,d)}h.push(o),s.push(y.createFeatureEditSuccessResult(o.attributes[u]))}}c.addMany(o.convertFromFeatures([],h,i,a,r,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:a,spatialReference:u,featureStore:d,fieldsIndex:c}=this._queryEngine;for(const p of t){const{attributes:t,geometry:h}=p,m=t?.[a];if(null==m){e.push(y.createFeatureEditErrorResult(`Identifier field ${a} missing`));continue}if(!d.has(m)){e.push(y.createFeatureEditErrorResult(`Feature with object id ${m} missing`));continue}const f=o.convertToFeature(d.getFeature(m),s,r,i);if(null!=h){if(s!==n.getJsonType(h)){e.push(y.createFeatureEditErrorResult("Incorrect geometry type."));continue}const t=h.spatialReference??u;f.geometry=l.project(y.simplify(h,t),t,u)}if(t){const s=y.mixAttributes(c,f.attributes,t);if(s){e.push(s);continue}}d.add(o.convertFromFeature(f,s,r,i,a)),e.push(y.createFeatureEditSuccessResult(m))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if("esriFieldTypeString"===s.type)return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await l.checkProjectionSupport(a.WGS84,e)}catch{throw new s("geojson-layer","Projection not supported")}}}return F}));
