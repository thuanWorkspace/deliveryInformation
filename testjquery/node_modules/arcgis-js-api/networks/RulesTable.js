/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../chunks/tslib.es6","../request","../core/JSONSupport","../core/Loadable","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/arrayUtils","../core/has","../core/accessorSupport/decorators/subclass","./support/typeUtils"],(function(e,t,s,o,r,n,a,i,u,c){"use strict";let p=class extends(s.JSONSupportMixin(o)){constructor(e){super(e),this.request=t}initialize(){}async load(e){const t=this.layer.load(e).then((()=>this._initializeRulesTable()));return this.addResolvingPromise(t),this}getFeatureSQL(e,t){const s=e.layerId.toString(),o=e.fieldsIndex?.normalizeFieldName("assetGroup"),r=e.fieldsIndex?.normalizeFieldName("assetType"),n=o?t.attributes[o]:null,a=r?t.attributes[r]:null,i=this.rulesHash[s];if(i){const e=i.assetGroupHash[n];if(e){return e.assetTypeHash[a]||null}}return null}async _initializeRulesTable(){const e={};let t;!function(e){e[e.from=0]="from",e[e.to=1]="to",e[e.via=2]="via"}(t||(t={}));const s=[{networkSourceId:"fromNetworkSource",assetGroupId:"fromAssetGroup",assetTypeId:"fromAssetType"},{networkSourceId:"toNetworkSource",assetGroupId:"toAssetGroup",assetTypeId:"toAssetType"},{networkSourceId:"viaNetworkSource",assetGroupId:"viaAssetGroup",assetTypeId:"viaAssetType"}];for(const o of this.rules){if(o.ruleType!==c.RuleType.RTJunctionJunctionConnectivity&&o.ruleType!==c.RuleType.RTJunctionEdgeConnectivity&&o.ruleType!==c.RuleType.RTEdgeJunctionEdgeConnectivity)continue;let r=[[t.from,t.to],[t.to,t.from]];o.ruleType===c.RuleType.RTEdgeJunctionEdgeConnectivity&&(r=[[t.from,t.via],[t.via,t.from],[t.to,t.via],[t.via,t.to]]);for(const n of r){const r=n.shift(),a=n.shift();let i=!1;switch(o.ruleType){case c.RuleType.RTEdgeJunctionEdgeConnectivity:i=r===t.from||r===t.to;break;case c.RuleType.RTJunctionEdgeConnectivity:i=r===t.to}const u=s[r],p=o[u.networkSourceId]?.layerId.toString()??"",y=o[u.assetGroupId]?.assetGroupCode?.toString(),l=o[u.assetTypeId],d=l?.assetTypeCode?.toString(),T=s[a],f=o[T.networkSourceId]?.layerId.toString()??"",h=o[T.assetGroupId]?.assetGroupCode?.toString(),S=o[T.assetTypeId],v=S?.assetTypeCode?.toString(),I=e[p]??{assetGroupHash:{}};if(!(y&&d&&h&&v))continue;const g=I.assetGroupHash[y]??{assetTypeHash:{}},x=g.assetTypeHash[d]??{};if(x[f]=x[f]??{},i){x[p]=x[p]??{};const e=`(assetgroup = ${y} AND assettype = ${d})`;x[p].anyVertex=x[p].anyVertex?`${x[p].anyVertex}`:`${e}`,"esriNECPEndVertex"===S?.connectivityPolicy&&(x[p].endVertex=x[p]?.endVertex?`${x[p].endVertex}`:`${e}`)}const R=`(assetgroup = ${h} AND assettype = ${v})`;x[f].anyVertex=x[f]?.anyVertex?`${x[f].anyVertex} OR ${R}`:`${R}`,"esriNECPEndVertex"===S?.connectivityPolicy&&(x[f].endVertex=x[f]?.endVertex?`${x[f].endVertex} OR ${R}`:`${R}`),g.assetTypeHash[d]=x,I.assetGroupHash[y]=g,e[p]=I}}this.rulesHash=e}};e.__decorate([r.property({constructOnly:!0})],p.prototype,"layer",void 0),e.__decorate([r.property({constructOnly:!0})],p.prototype,"rules",void 0),e.__decorate([r.property()],p.prototype,"rulesHash",void 0),e.__decorate([r.property({constructOnly:!0})],p.prototype,"request",void 0),p=e.__decorate([u.subclass("esri.networks.RulesTable")],p);return p}));
