/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../symbols","../../../core/Evented","../../../core/lang","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/accessorSupport/decorators/subclass","../../../layers/GraphicsLayer","./drawUtils","./HighlightHelper","./layerUtils","./input/GraphicMoverEvents","../../input/InputManager","../../interactive/GraphicManipulator","../../support/screenUtils","../../../symbols/SimpleMarkerSymbol","../../../symbols/SimpleLineSymbol","../../../symbols/SimpleFillSymbol"],(function(i,t,e,r,s,a,o,h,c,n,l,p,d,v,_,g,y,u,G){"use strict";const w="indicator-symbols";let m=class extends e.EventedAccessor{constructor(i){super(i),this._activeGraphic=null,this._dragEvent=null,this._hoverGraphic=null,this._indicators=[],this._initialDragGeometry=null,this._manipulators=[],this._layerViews=null,this.type="graphic-mover",this.callbacks={onGraphicClick(){},onGraphicDoubleClick(){},onGraphicMoveStart(){},onGraphicMove(){},onGraphicMoveStop(){},onGraphicPointerOver(){},onGraphicPointerOut(){},onGraphicPointerDown(){},onGraphicPointerUp(){}},this.enableMoveAllGraphics=!1,this.graphics=[],this.indicatorsEnabled=!1,this.layer=new c({listMode:"hide",internal:!0,title:"GraphicMover highlight layer"}),this.view=null}initialize(){p.addUniqueLayer(this.view,this.layer),this._highlightHelper=new l({view:this.view}),this.refresh(),this.addHandles([s.watch((()=>this.graphics.length),(()=>this.refresh())),s.when((()=>this.view?.ready),(()=>{this.addHandles([this.view.on("immediate-click",(i=>this._clickHandler(i)),v.ViewEventPriorities.TOOL),this.view.on("double-click",(i=>this._doubleClickHandler(i)),v.ViewEventPriorities.TOOL),this.view.on("pointer-down",(i=>this._pointerDownHandler(i)),v.ViewEventPriorities.TOOL),this.view.on("pointer-move",(i=>this._pointerMoveHandler(i)),v.ViewEventPriorities.TOOL),this.view.on("pointer-up",(i=>this._pointerUpHandler(i)),v.ViewEventPriorities.TOOL),this.view.on("drag",(i=>this._dragHandler(i)),v.ViewEventPriorities.TOOL),this.view.on("key-down",(i=>this._keyDownHandler(i)),v.ViewEventPriorities.TOOL)])}),{once:!0,initial:!0}),s.watch((()=>this.view),(i=>{this._highlightHelper.removeAll(),this._highlightHelper.view=i}))])}destroy(){this._removeIndicators(),this.view.map?.remove(this.layer),this.layer.destroy(),this.reset(),this._manipulators.forEach((i=>i.destroy())),this._manipulators=null}set highlightsEnabled(i){this._highlightHelper?.removeAll(),this._set("highlightsEnabled",i),i&&this._highlightHelper?.add(this.graphics)}get state(){const i=this.view.ready,t=this.graphics.length>0,e=this._activeGraphic;return i&&t?e?"moving":"active":i?"ready":"disabled"}refresh(){this.reset(),this._setup()}reset(){this._activeGraphic=null,this._hoverGraphic=null,this._dragEvent=null,this._highlightHelper.removeAll()}updateGeometry(i,t){const e=this.graphics[i];e&&(e.set("geometry",t),this._setUpIndicators())}_setup(){this._setUpHighlights(),this._setUpIndicators(),this._setUpManipulators(),this._syncLayerViews()}_clickHandler(i){const t=this._findTargetGraphic(g.createScreenPointFromEvent(i));if(t){const e=new d.GraphicClickEvent(t,this.graphics.indexOf(t),i.x,i.y,i);this.emit("graphic-click",e),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(e)}}_doubleClickHandler(i){const t=this._findTargetGraphic(g.createScreenPointFromEvent(i));if(t){const e=new d.GraphicDoubleClickEvent(t,this.graphics.indexOf(t),i.x,i.y,i);this.emit("graphic-double-click",e),this.callbacks.onGraphicDoubleClick&&this.callbacks.onGraphicDoubleClick(e)}}_pointerDownHandler(i){const t=this._findTargetGraphic(g.createScreenPointFromEvent(i));if(t){this._activeGraphic=t;const{x:e,y:r}=i,s=new d.GraphicPointerDownEvent(t,this.graphics.indexOf(t),e,r,i);this.emit("graphic-pointer-down",s),this.callbacks.onGraphicPointerDown&&this.callbacks.onGraphicPointerDown(s)}else this._activeGraphic=null}_pointerUpHandler(i){if(this._activeGraphic){const{x:t,y:e}=i,r=this.graphics.indexOf(this._activeGraphic),s=new d.GraphicPointerUpEvent(this._activeGraphic,r,t,e,i);this.emit("graphic-pointer-up",s),this.callbacks.onGraphicPointerUp&&this.callbacks.onGraphicPointerUp(s)}}_pointerMoveHandler(i){if(this._dragEvent)return;const t=this._findTargetGraphic(g.createScreenPointFromEvent(i));if(t){const{x:e,y:r}=i;if(this._hoverGraphic){if(this._hoverGraphic===t)return;const s=this.graphics.indexOf(this._hoverGraphic),a=new d.GraphicPointerOutEvent(this.graphics[s],s,e,r,i);this._hoverGraphic=null,this.emit("graphic-pointer-out",a),this.callbacks.onGraphicPointerOut&&this.callbacks.onGraphicPointerOut(a)}const s=this.graphics.indexOf(t),a=new d.GraphicPointerOverEvent(t,s,e,r,i);return this._hoverGraphic=t,this.emit("graphic-pointer-over",a),void(this.callbacks.onGraphicPointerOver&&this.callbacks.onGraphicPointerOver(a))}if(this._hoverGraphic){const{x:t,y:e}=i,r=this.graphics.indexOf(this._hoverGraphic),s=new d.GraphicPointerOutEvent(this.graphics[r],r,t,e,i);this._hoverGraphic=null,this.emit("graphic-pointer-out",s),this.callbacks.onGraphicPointerOut&&this.callbacks.onGraphicPointerOut(s)}}_dragHandler(i){if("start"!==i.action&&!this._dragEvent||!this._activeGraphic?.geometry)return;"start"===i.action&&this._removeIndicators(),i.stopPropagation();const{action:t,x:e,y:s}=i,a=this.graphics.indexOf(this._activeGraphic),o=this._dragEvent?e-this._dragEvent.x:0,h=this._dragEvent?s-this._dragEvent.y:0,c=e-i.origin.x,l=s-i.origin.y,p="start"===t?this._activeGraphic.geometry:this._initialDragGeometry,v=n.cloneMove(p,c,l,this.view);if(this._activeGraphic.geometry=v,this.enableMoveAllGraphics&&this.graphics.forEach((i=>{i!==this._activeGraphic&&(i.geometry=n.cloneMove(i.geometry,o,h,this.view))})),this._dragEvent=i,"start"===t){this._initialDragGeometry=r.clone(p);const t=new d.GraphicMoveStartEvent(this._activeGraphic,this.graphics,a,e,s,o,h,c,l,i);this.emit("graphic-move-start",t),this.callbacks.onGraphicMoveStart&&this.callbacks.onGraphicMoveStart(t),t.defaultPrevented&&this._activeGraphic.set("geometry",p)}else if("update"===t){const t=new d.GraphicMoveEvent(this._activeGraphic,this.graphics,a,e,s,o,h,c,l,i);this.emit("graphic-move",t),this.callbacks.onGraphicMove&&this.callbacks.onGraphicMove(t),t.defaultPrevented&&(this._activeGraphic.geometry=p)}else{const t=new d.GraphicMoveStopEvent(this._activeGraphic,this.graphics,a,e,s,o,h,c,l,i);this._dragEvent=null,this._activeGraphic=null,this._setUpIndicators(),this.emit("graphic-move-stop",t),this.callbacks.onGraphicMoveStop&&this.callbacks.onGraphicMoveStop(t),t.defaultPrevented&&(this.graphics[a].set("geometry",this._initialDragGeometry),this._setUpIndicators()),this._initialDragGeometry=null}}_keyDownHandler(i){"a"!==i.key&&"d"!==i.key&&"n"!==i.key||"moving"!==this.state||i.stopPropagation()}_findTargetGraphic(i){const t=this.view.toMap(i),e=this.graphics;let r=null,s=Number.MAX_VALUE;this._syncLayerViews();const a=this._layerViews.flatMap((i=>"graphicsViews"in i?Array.from(i.graphicsViews(),(i=>i.hitTest(t))).flat():i.graphicsView.hitTest(t))).filter((i=>e.includes(i))).sort(((i,t)=>e.indexOf(i)-e.indexOf(t)));return a.length?a[0]:(this._manipulators.forEach((t=>{const e=t.intersectionDistance(i);null!=e&&e<s&&(s=e,r=t.graphic)})),r)}_syncLayerViews(){this._layerViews=[];const i=new Set;for(const t of this.graphics){const e=p.findLayerView(this.view,t.layer);e&&i.add(e)}this._layerViews=[...i]}_setUpManipulators(){const{graphics:i,view:t}=this;this._manipulators.forEach((i=>i.destroy())),this._manipulators=i.length?i.map((i=>new _.GraphicManipulator({graphic:i,view:t}))):[]}_setUpHighlights(){this.highlightsEnabled&&this._highlightHelper.add(this.graphics)}_setUpIndicators(){if(this._removeIndicators(),this.indicatorsEnabled){for(const i of this.graphics){const t=i.clone();t.symbol=this._getSymbolForIndicator(i),this._indicators.push(t),this.addHandles(s.watch((()=>i.symbol),(()=>this._setUpIndicators())),w)}this.layer.addMany(this._indicators)}}_removeIndicators(){this.removeHandles(w),this._indicators.length&&(this.layer.removeMany(this._indicators),this._indicators.forEach((i=>i.destroy())),this._indicators=[])}_getSymbolForIndicator(i){const t=12;if(null==i.symbol)return null;switch(i.symbol.type){case"cim":return new y({style:"circle",size:t,color:[0,0,0,0],outline:{color:[255,127,0,1],width:1}});case"picture-marker":{const{xoffset:t,yoffset:e,height:r,width:s}=i.symbol,a=r===s?s:Math.max(r,s);return new y({xoffset:t,yoffset:e,size:a,style:"square",color:[0,0,0,0],outline:{color:[255,127,0,1],width:1}})}case"simple-marker":{const{xoffset:t,yoffset:e,size:r,style:s}=i.symbol;return new y({xoffset:t,yoffset:e,style:"circle"===s?"circle":"square",size:r+2,color:[0,0,0,0],outline:{color:[255,127,0,1],width:1}})}case"simple-fill":return new G({color:[0,0,0,0],outline:{style:"dash",color:[255,127,0,1],width:1}});case"simple-line":return new u({color:[255,127,0,1],style:"dash",width:1});case"text":{const{xoffset:e,yoffset:r}=i.symbol;return new y({xoffset:e,yoffset:r,size:t,color:[0,0,0,0],outline:{color:[255,127,0,1],width:1}})}default:return null}}};i.__decorate([a.property()],m.prototype,"_activeGraphic",void 0),i.__decorate([a.property({readOnly:!0})],m.prototype,"type",void 0),i.__decorate([a.property()],m.prototype,"callbacks",void 0),i.__decorate([a.property()],m.prototype,"enableMoveAllGraphics",void 0),i.__decorate([a.property()],m.prototype,"graphics",void 0),i.__decorate([a.property({value:!1})],m.prototype,"highlightsEnabled",null),i.__decorate([a.property()],m.prototype,"indicatorsEnabled",void 0),i.__decorate([a.property()],m.prototype,"layer",void 0),i.__decorate([a.property({readOnly:!0})],m.prototype,"state",null),i.__decorate([a.property()],m.prototype,"view",void 0),m=i.__decorate([h.subclass("esri.views.draw.support.GraphicMover")],m);return m}));
