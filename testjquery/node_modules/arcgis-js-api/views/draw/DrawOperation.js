/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../chunks/tslib.es6","../../core/Accessor","../../core/Evented","../../core/lang","../../core/maybe","../../core/promiseUtils","../../core/reactiveUtils","../../core/screenUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/accessorSupport/decorators/subclass","../../core/accessorSupport/diffUtils","../../core/support/UpdatingHandles","../../layers/graphics/dehydratedFeatureComparison","../../support/elevationInfoUtils","../ViewingMode","./DrawingMode","./DrawManipulator","../interactive/coordinateHelper","../interactive/dragEventPipeline","../interactive/editGeometry/EditGeometry","../interactive/editGeometry/EditGeometryOperations","../interactive/sketch/normalizedPoint","../interactive/sketch/SketchLabelOptions","../interactive/sketch/SketchTooltipOptions","../interactive/snapping/SnappingContext","../interactive/snapping/SnappingDragPipelineStep","../interactive/snapping/SnappingOperation","../interactive/snapping/snappingUtils"],(function(e,t,i,n,r,o,a,s,p,c,d,l,h,g,u,y,_,m,v,w,x,f,O,S,D,V,b,M,T,P){"use strict";const C="crosshair",E="progress";function I(e,t,i){const n=e.x-t.x,r=e.y-t.y;return n*n+r*r<=i}e.DrawOperation=class extends(n.EventedMixin(i)){constructor(e){super(e),this._createOperationCompleted=!1,this._hideDefaultCursor=!1,this._pointerDownStates=new Set,this._stagedScreenPoint=null,this._stagedPointerType=null,this._stagedPointerId=null,this._updatingHandles=new g.UpdatingHandles,this.constraint=void 0,this.isDraped=!0,this.labelOptions=new D,this.tooltipOptions=new V,this.cursor=null,this.loading=!1,this.snapToSceneEnabled=null,this.lastVertex=null,null==e.elevationInfo&&(this.elevationInfo=y.getEffectiveElevationInfo(!!e.hasZ))}initialize(){const{geometryType:e,view:t}=this,i=t.spatialReference,n="viewingMode"in t.state?t.state.viewingMode:_.ViewingMode.Local,r="segment"===e||"multipoint"===e?"polyline":e;this.coordinateHelper=w.createCoordinateHelper(this.hasZ,this.hasM,i),this._editGeometryOperations=new O.EditGeometryOperations(new f.EditGeometry(r,this.coordinateHelper)),this._snappingOperation=new T.SnappingOperation({view:t,constrainResult:e=>e?this._getEffectiveDrawSurface()?.constrainZ(e):void 0}),this.addHandles([s.watch((()=>this.stagedVertex),(e=>{null!=e&&this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(e)}],operation:"apply",type:"vertex-update"})}),{sync:!0,equals:(e,t)=>o.equalsMaybe(e,t,u.pointEquals)}),s.watch((()=>this.view.viewpoint),((e,t)=>{e&&t&&h.diff(e,t)&&this._onViewpointChange()}))]),this._activeComponent=new f.Component(i,n),this._editGeometryOperations.data.components.push(this._activeComponent);const p=this.segmentLabels;null!=p&&(p.context={view:t,editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,labelOptions:this.labelOptions},this.addHandles([s.watch((()=>this.labelOptions.enabled),(e=>{p.visible=e}),s.syncAndInitial),this.on("cursor-update",(()=>{const e=this.stagedVertex;p.stagedVertex=null!=e?this.coordinateHelper.pointToVector(e):null}))])),this.addHandles(this._editGeometryOperations.on(["vertex-add","vertex-update","vertex-remove"],(e=>{const t=e.vertices.map((e=>({componentIndex:0,vertexIndex:e.index,coordinates:this.coordinateHelper.vectorToArray(e.pos)}))),i=t.map((e=>e.coordinates));switch(e.type){case"vertex-add":this.emit(e.type,{...e,added:i,vertices:t});break;case"vertex-update":this.emit(e.type,{...e,updated:i,vertices:t});break;case"vertex-remove":this.emit(e.type,{...e,removed:i,vertices:t})}const n=this._activeComponent.getLastVertex(),r=null!=n?this.coordinateHelper.vectorToDehydratedPoint(n.pos):null;null!=r&&null!=this.lastVertex&&u.pointEquals(this.lastVertex,r)||(this.lastVertex=r)})));const c=this._manipulator=new v.DrawManipulator({grabbableForEvent:e=>"click"!==this.drawingMode||"touch"===e.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size});this.manipulators.add(c),c.grabbable="point"!==e,this.addHandles([this._createManipulatorDragPipeline(c),c.events.on("immediate-click",(e=>this._onImmediateClick(e))),c.events.on("immediate-double-click",(e=>this._onImmediateDoubleClick(e))),s.watch((()=>({effectiveCursor:this.effectiveCursor})),(({effectiveCursor:e})=>{c.cursor=e}),s.syncAndInitial)]),P.setupSnappingToggleHandles(this,(()=>{const e=this.view.inputManager.latestPointerType??"mouse",t=this._getSnappingContext(e);null!=this.snappingManager&&this._updatingHandles.addPromise(a.ignoreAbortErrors(this._snappingOperation.resnap(this.snappingManager,t)))}))}destroy(){o.destroyMaybe(this.segmentLabels),o.destroyMaybe(this._snappingOperation),this._editGeometryOperations=o.destroyMaybe(this._editGeometryOperations),this._updatingHandles.destroy()}get _snappingEnabled(){return null!=this.snappingManager&&this.snappingManager.options.effectiveEnabled}get _requiresScenePoint(){const e=this._getEffectiveDrawSurface();return"3d"===this.view.type&&this.drawSurface!==e}get canRedo(){return this._editGeometryOperations.canRedo}get canUndo(){return this._editGeometryOperations.canUndo}get committedVertices(){return this._activeComponent.vertices.map((e=>this.coordinateHelper.vectorToArray(e.pos)))}set drawingMode(e){this._set("drawingMode",e??m.defaultDrawingMode)}get effectiveCursor(){return this.loading?E:this._hideDefaultCursor?null:this.cursor||C}get interactive(){return this._manipulator.interactive}set interactive(e){this._manipulator.interactive=e}get isCompleted(){return this._createOperationCompleted}get numCommittedVertices(){return this._activeComponent.vertices.length}get numVertices(){return null!=this.stagedVertex?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}get snappingOptions(){return null!=this.snappingManager?this.snappingManager.options:null}get stagedVertex(){const e=this._snappingOperation.stagedPoint,{constraint:t,elevationInfo:i,view:n}=this;if(!e||!t)return e;const r=S.fromPoint(e,n,i),o=r?t.closestTo(r):void 0;return o?S.toDehydratedPoint(o,e.spatialReference):e}set stagedVertex(e){this._snappingOperation.stagedPoint=r.clone(e)}get updating(){return this._updatingHandles.updating}get vertices(){const e=this.committedVertices;return null!=this.stagedVertex&&e.push(this.coordinateHelper.pointToArray(this.stagedVertex)),e}cancel(){this.complete({aborted:!0})}commitStagedVertex(){if(this._snappingOperation.abort(),null!=this.stagedVertex){const{stagedVertex:e}=this;this.stagedVertex=null,this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e))}}complete(e){const t=e&&e.aborted||!1;this._snappingOperation.abort(),null!=this.snappingManager&&this.snappingManager.doneSnapping(),"segment"===this.geometryType||"point"===this.geometryType?this.commitStagedVertex():this.stagedVertex=null;const i="multipoint"===this.geometryType&&0===this.numVertices||"polyline"===this.geometryType&&this.numVertices<2||"polygon"===this.geometryType&&this.numVertices<3;this._createOperationCompleted=!i,(this.isCompleted||t)&&this.emit("complete",{vertices:this.vertices.map(((e,t)=>({componentIndex:0,vertexIndex:t,coordinates:e}))),aborted:t,type:"complete"})}onInputEvent(e){switch(e.type){case"pointer-down":this._pointerDownStates.add(e.pointerId);break;case"pointer-up":this._pointerDownStates.delete(e.pointerId)}switch(e.type){case"pointer-move":return this._onPointerMove(e);case"hold":return this._onHold(e)}}redo(){this._editGeometryOperations.redo()}undo(){null!=this.snappingManager&&this.snappingManager.doneSnapping(),this._editGeometryOperations.undo()}_closeOnClickVertexIndex(e){const t=this._activeComponent;if("polygon"===this.geometryType&&t.vertices.length>2){if(this._vertexWithinPointerDistance(t.vertices[0].pos,e))return 0;if(this._vertexWithinPointerDistance(t.vertices[t.vertices.length-1].pos,e))return t.vertices.length-1}return null}_createManipulatorDragPipeline(e){switch(this.drawingMode){case"click":return this._createManipulatorDragPipelineClick(e);case"freehand":return this._createManipulatorDragPipelineFreehand(e);case"hybrid":return this._createManipulatorDragPipelineHybrid(e)}}_createManipulatorDragPipelineClick(e){return x.createManipulatorDragEventPipeline(e,((e,t,i,n)=>{const r="touch"===n&&this._snappingEnabled;if(this.isCompleted||!r)return;const{snappingStep:o,cancelSnapping:a}=M.createSnapDragEventPipelineStep({predicate:()=>r,snappingManager:this.snappingManager,snappingContext:new b.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,feature:this.graphic,pointer:n,visualizer:this.snappingVisualizer}),updatingHandles:this._updatingHandles,useZ:!this._requiresScenePoint});i=i.next((e=>(r&&null!=this.snappingManager&&this.snappingManager.doneSnapping(),e))).next(a),t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(this.stagedVertex=e.mapStart,("segment"===this.geometryType||r&&0===this.numVertices)&&this.commitStagedVertex()),e))).next(x.sceneSnappingAtLocation(this.view,this.elevationInfo)).next(...o).next((e=>(r&&(this.stagedVertex=e.mapEnd,"end"===e.action&&this.commitStagedVertex()),e))).next((e=>("end"===e.action&&("segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()),e)))}))}_createManipulatorDragPipelineFreehand(e){return x.createManipulatorDragEventPipeline(e,((e,t)=>{this.isCompleted||t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(null==this.stagedVertex&&(this.stagedVertex=e.mapStart),"segment"===this.geometryType&&this.commitStagedVertex()),e))).next((e=>{switch(e.action){case"start":case"update":this.stagedVertex=e.mapEnd,"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case"end":this.complete()}return e}))}))}_createManipulatorDragPipelineHybrid(e){return x.createManipulatorDragEventPipeline(e,((e,t)=>{this.isCompleted||t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(null==this.stagedVertex&&(this.stagedVertex=e.mapStart),this.commitStagedVertex()),e))).next((e=>{switch(e.action){case"start":case"update":this.stagedVertex=e.mapEnd,"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case"end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return e}))}))}get _drawAtFixedElevation(){return("segment"===this.geometryType||"polygon"===this.geometryType)&&this.numCommittedVertices>0}_getEffectiveDrawSurface(){if(null==this.elevationDrawSurface)return this.drawSurface;if(!this.coordinateHelper.hasZ())return this.elevationDrawSurface.defaultZ=null,this.elevationDrawSurface;let e=this.defaultZ,t=!1;return null!=this.elevationInfo&&"absolute-height"===this.elevationInfo.mode&&(t=!0),null!=this.snapToSceneEnabled&&(t=this.snapToSceneEnabled),null!=this.elevationInfo&&"on-the-ground"===this.elevationInfo.mode&&(t=!1),this._drawAtFixedElevation&&(e=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),t=!1),t?this.drawSurface:(this.elevationDrawSurface.defaultZ=e,this.elevationDrawSurface)}_mapToScreen(e){return this._getEffectiveDrawSurface()?.mapToScreen(e)}_onHold(e){this._snappingOperation.abort(),"click"===this.drawingMode&&"touch"===e.pointerType&&this._snappingEnabled&&(this.stagedVertex=e.mapPoint),e.stopPropagation()}_onImmediateClick(e){if("mouse"===e.pointerType&&2===e.button||this._manipulator.dragging)return;const t=this._activeComponent;if(null!=this._closeOnClickVertexIndex(e.screenPoint))return e.stopPropagation(),void this.complete();const i=this._screenToMap(e.screenPoint);if(null!=i)switch(this.drawingMode){case"freehand":"point"===this.geometryType&&(null!=this.stagedVertex?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(i)),this.complete());break;case"click":case"hybrid":this._snappingOperation.abort(),null!=this.stagedVertex?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(i)),("point"===this.geometryType||"segment"===this.geometryType&&2===t.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===t.vertices.length)&&this.complete()}e.stopPropagation()}_onImmediateDoubleClick(e){this._manipulator.dragging||"point"===this.geometryType||(this.complete(),e.stopPropagation())}_onPointerMove(e){const t=p.createScreenPoint(e.x,e.y);this._stagedScreenPoint=t,this._stagedPointerType=e.pointerType,this._stagedPointerId=e.pointerId;const i=this._snappingOperation,n=this._manipulator;this._pointerDownStates.has(e.pointerId)||n.grabbing||!n.interactive?i.abort():(e.stopPropagation(),this._updateStagedVertexOnPointerMove(t,e.pointerType))}_onViewpointChange(){const e=this._manipulator;"mouse"===this._stagedPointerType&&this._stagedScreenPoint&&null!=this._stagedPointerId&&!this._pointerDownStates.has(this._stagedPointerId)&&!e.grabbing&&e.interactive?this._updateStagedVertexOnPointerMove(this._stagedScreenPoint,this._stagedPointerType??"mouse"):this._snappingOperation.abort()}_updateStagedVertexOnPointerMove(e,t){const i=this._snappingOperation,n=this._closeOnClickVertexIndex(e);if(null!=n)return this._closeOnVertex(n),void i.abort();const r=this._screenToMap(e),o=this._requiresScenePoint?this.drawSurface?.screenToMap(e):null;if(null==r)return this._hideDefaultCursor=!0,void i.abort();this._hideDefaultCursor=!1;const s=this.snappingManager;if(null==s)return this.stagedVertex=r,void i.abort();const p=this._getSnappingContext(t);this._updatingHandles.addPromise(a.ignoreAbortErrors(i.snap({point:r,scenePoint:o},s,p)))}_closeOnVertex(e){this.stagedVertex=null;const t={componentIndex:0,vertexIndex:e,coordinates:this.coordinateHelper.vectorToArray(this._activeComponent.vertices[e].pos)};this.emit("cursor-update",{updated:null,vertices:[t],operation:"apply",type:"vertex-update"})}_screenToMap(e){return this._getEffectiveDrawSurface()?.screenToMap(e)}_screenToMapDragEventStep(){let e=null;return t=>{if("start"===t.action&&(e=this._screenToMap(t.screenStart)),null==e)return null;const i=this._screenToMap(t.screenEnd);return null!=i?{...t,mapStart:e,mapEnd:i}:null}}_vertexWithinPointerDistance(e,t){const i=25,n=this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(e));return null!=n&&I(n,t,i)}_getSnappingContext(e){const t=this._drawAtFixedElevation?this.elevationDrawSurface?.defaultZ:null;return new b.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:e,feature:this.graphic,visualizer:this.snappingVisualizer,selfSnappingZ:null!=t?{value:t,elevationInfo:this.elevationInfo}:null})}},t.__decorate([c.property()],e.DrawOperation.prototype,"_hideDefaultCursor",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"_snappingOperation",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"_snappingEnabled",null),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"graphic",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"constraint",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"defaultZ",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"isDraped",void 0),t.__decorate([c.property({value:m.defaultDrawingMode})],e.DrawOperation.prototype,"drawingMode",null),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"elevationDrawSurface",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"elevationInfo",void 0),t.__decorate([c.property({constructOnly:!0,type:D})],e.DrawOperation.prototype,"labelOptions",void 0),t.__decorate([c.property({constructOnly:!0,type:V})],e.DrawOperation.prototype,"tooltipOptions",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"geometryType",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"hasM",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"hasZ",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"cursor",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"effectiveCursor",null),t.__decorate([c.property()],e.DrawOperation.prototype,"loading",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"manipulators",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"drawSurface",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"segmentLabels",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"snappingManager",void 0),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"snappingVisualizer",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"snapToSceneEnabled",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"stagedVertex",null),t.__decorate([c.property()],e.DrawOperation.prototype,"lastVertex",void 0),t.__decorate([c.property()],e.DrawOperation.prototype,"updating",null),t.__decorate([c.property({constructOnly:!0})],e.DrawOperation.prototype,"view",void 0),e.DrawOperation=t.__decorate([l.subclass("esri.views.draw.DrawOperation")],e.DrawOperation),e.defaultCursor=C,e.defaultLoadingCursor=E,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
