/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../Graphic","../../../core/arrayUtils","../../../core/Collection","../../../core/handleUtils","../../../core/reactiveUtils","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/has","../../../core/Error","../../../core/accessorSupport/decorators/subclass","./LayerView2D","./graphics/GraphicContainer","./graphics/GraphicsView2D","../../layers/LayerView"],(function(e,i,t,s,a,r,h,n,o,l,c,p,g,d,u){"use strict";const w="sublayers",y="layerView";let f=class extends(p.LayerView2DMixin(u)){constructor(){super(...arguments),this._highlightIds=new Map}async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),(i=>i.hitTest(e).filter((e=>!!e.popupTemplate)))).flat()}*graphicsViews(){null==this._graphicsViewsFeatureCollectionMap?null==this._graphicsViews?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(e,i){return Array.from(this.graphicsViews(),(i=>{const t=i.hitTest(e);if(null!=this._graphicsViewsFeatureCollectionMap){const e=this._graphicsViewsFeatureCollectionMap.get(i);for(const i of t)!i.popupTemplate&&e.popupTemplate&&(i.popupTemplate=e.popupTemplate),i.sourceLayer=i.layer=this.layer}return t})).flat().map((i=>({type:"graphic",graphic:i,layer:this.layer,mapPoint:e})))}highlight(e){let r;"number"==typeof e?r=[e]:e instanceof i?r=[e.uid]:Array.isArray(e)&&e.length>0?r="number"==typeof e[0]?e:e.map((e=>e&&e.uid)):s.isCollection(e)&&(r=e.map((e=>e&&e.uid)).toArray());const h=r?.filter(t.isSome);return h?.length?(this._addHighlight(h),a.makeHandle((()=>this._removeHighlight(h)))):a.makeHandle()}update(e){for(const i of this.graphicsViews())i.processUpdate(e)}attach(){const e=this.view,i=()=>this.requestUpdate(),t=this.layer.featureCollections;if(null!=t&&t.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of t){const t=new g(this.view.featuresTilingScheme),a=new d({view:e,graphics:s.source,renderer:s.renderer,requestUpdateCallback:i,container:t});this._graphicsViewsFeatureCollectionMap.set(a,s),this.container.addChild(a.container),this.addHandles([r.watch((()=>s.visible),(e=>a.container.visible=e),r.initial),r.watch((()=>a.updating),(()=>this.notifyChange("updating")),r.initial)],y)}this._updateHighlight()}else null!=this.layer.sublayers&&this.addHandles(r.on((()=>this.layer.sublayers),"change",(()=>this._createGraphicsViews()),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),w)}detach(){this._destroyGraphicsViews(),this.removeHandles(w)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(y);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),null==this.layer.sublayers)return;const e=[],i=this.view,t=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new g(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const h=new d({view:i,graphics:s.graphics,requestUpdateCallback:t,container:a});this.addHandles([s.on("graphic-update",h.graphicUpdateHandler),r.watch((()=>s.visible),(e=>h.container.visible=e),r.initial),r.watch((()=>h.updating),(()=>this.notifyChange("updating")),r.initial)],y),this.container.addChild(h.container),e.push(h)}this._graphicsViews=e,this._updateHighlight()}_addHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i);this._highlightIds.set(i,e+1)}else this._highlightIds.set(i,1);this._updateHighlight()}_removeHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i)-1;0===e?this._highlightIds.delete(i):this._highlightIds.set(i,e)}this._updateHighlight()}_updateHighlight(){const e=Array.from(this._highlightIds.keys());for(const i of this.graphicsViews())i.setHighlight(e)}};f=e.__decorate([c.subclass("esri.views.2d.layers.MapNotesLayerView2D")],f);return f}));
