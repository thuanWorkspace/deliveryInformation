/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../engine/webgl/DisplayId","./DisplayIdGenerator","./StaticBitSet"],(function(e,t,s,i){"use strict";function n(e,t,s){if(!(e.length>t))for(;e.length<=t;)e.push(s)}class r{constructor(){this._numerics=[],this._strings=[],this._idGenerator=new s.DisplayIdGenerator,this._allocatedSize=256,this._bitsets=[],this._instanceIds=[],this._bounds=[]}createBitset(){const e=this._bitsets.length;return this._bitsets.push(i.StaticBitSet.create(this._allocatedSize,t.displayIdTexelMask)),e+1}getBitset(e){return this._bitsets[e-1]}_expand(){this._allocatedSize<<=1;for(const e of this._bitsets)e.resize(this._allocatedSize)}_ensureNumeric(e,t){this._numerics[e]||(this._numerics[e]=[]);n(this._numerics[e],t,0)}_ensureInstanceId(e){n(this._instanceIds,e,0)}_ensureString(e,t){this._strings[e]||(this._strings[e]=[]);n(this._strings[e],t,null)}createDisplayId(e=!1){const s=this._idGenerator.createId();return s>this._allocatedSize&&this._expand(),t.createDisplayId(s,e)}releaseDisplayId(e){for(const t of this._bitsets)t.unset(e);return this._idGenerator.releaseId(e&t.displayIdTexelMask)}getComputedNumeric(e,s){return this.getComputedNumericAtIndex(e&t.displayIdTexelMask,0)}setComputedNumeric(e,s,i){return this.setComputedNumericAtIndex(e&t.displayIdTexelMask,i,0)}getComputedString(e,s){return this.getComputedStringAtIndex(e&t.displayIdTexelMask,0)}setComputedString(e,s,i){return this.setComputedStringAtIndex(e&t.displayIdTexelMask,0,i)}getComputedNumericAtIndex(e,s){const i=e&t.displayIdTexelMask;return this._ensureNumeric(s,i),this._numerics[s][i]}setComputedNumericAtIndex(e,s,i){const n=e&t.displayIdTexelMask;this._ensureNumeric(s,n),this._numerics[s][n]=i}getInstanceId(e){const s=e&t.displayIdTexelMask;return this._ensureInstanceId(s),this._instanceIds[s]}setInstanceId(e,s){const i=e&t.displayIdTexelMask;this._ensureInstanceId(i),this._instanceIds[i]=s}getComputedStringAtIndex(e,s){const i=e&t.displayIdTexelMask;return this._ensureString(s,i),this._strings[s][i]}setComputedStringAtIndex(e,s,i){const n=e&t.displayIdTexelMask;this._ensureString(s,n),this._strings[s][n]=i}getXMin(e){return this._bounds[4*(e&t.displayIdTexelMask)]}getYMin(e){return this._bounds[4*(e&t.displayIdTexelMask)+1]}getXMax(e){return this._bounds[4*(e&t.displayIdTexelMask)+2]}getYMax(e){return this._bounds[4*(e&t.displayIdTexelMask)+3]}setBounds(e,s){const i=s.readHydratedGeometry();if(!i?.coords.length)return!1;let r=1/0,d=1/0,a=-1/0,u=-1/0;i.forEachVertex(((e,t)=>{r=Math.min(r,e),d=Math.min(d,t),a=Math.max(a,e),u=Math.max(u,t)}));const o=e&t.displayIdTexelMask;return n(this._bounds,4*o+4,0),this._bounds[4*o]=r,this._bounds[4*o+1]=d,this._bounds[4*o+2]=a,this._bounds[4*o+3]=u,!0}}e.ComputedAttributeStorage=r,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
