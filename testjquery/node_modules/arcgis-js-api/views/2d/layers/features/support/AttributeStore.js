/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","../../../../../core/Error","../../../../../core/has","../../../../../core/Logger","../../../../../core/mathUtils","../../../../../core/promiseUtils","../../../../../core/accessorSupport/diffUtils","../../../../../core/support/UpdatingHandles","../../../../../layers/support/FieldsIndex","../../../engine/webgl/definitions","../../../engine/webgl/DisplayId","../../../engine/webgl/Utils","../../../engine/webgl/util/debug","../tileRenderers/support/visualVariablesUtils","../../../../webgl/enums"],(function(t,e,i,s,r,a,n,l,o,h,u,d,p,c,g){"use strict";const _=t=>Object.freeze(Object.defineProperty({__proto__:null,default:t},Symbol.toStringTag,{value:"Module"})),y=s.getLogger("esri.views.layers.2d.features.support.AttributeStore"),f=p.createDebugLogger(p.debugAttrUpdates,y),b={sharedArrayBuffer:i("esri-shared-array-buffer"),atomics:i("esri-atomics")};function x(t,e){return i=>e(t(i))}class m{constructor(t,e,i,s){this.size=0,this.texelSize=4,this.dirtyStart=0,this.dirtyEnd=0;const{pixelType:r,layout:a,textureOnly:n}=s;this.textureOnly=n||!1,this.pixelType=r,this._ctype=e,this.layout=a,this._resetRange(),this._shared=t,this.size=i,n||(this.data=this._initData(r,i,t,e))}get buffer(){return this.data?.buffer}unsetComponentAllTexels(t,e){const i=this.data;for(let s=0;s<this.size*this.size;s++)i[s*this.texelSize+t]&=~e;this.dirtyStart=0,this.dirtyEnd=this.size*this.size-1}setComponentAllTexels(t,e){const i=this.data;for(let s=0;s<this.size*this.size;s++)i[s*this.texelSize+t]|=255&e;this.dirtyStart=0,this.dirtyEnd=this.size*this.size-1}setComponent(t,e,i){const s=this.data;for(const r of i)s[r*this.texelSize+t]|=e,this.dirtyStart=Math.min(this.dirtyStart,r),this.dirtyEnd=Math.max(this.dirtyEnd,r)}setComponentTexel(t,e,i){this.data[i*this.texelSize+t]|=e,this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,i)}unsetComponentTexel(t,e,i){this.data[i*this.texelSize+t]&=~e,this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,i)}getData(t,e){const i=u.getDisplayIdTexel(t);return this.data[i*this.texelSize+e]}setData(t,e,i){const s=u.getDisplayIdTexel(t),r=1<<e;0!=(this.layout&r)?null!=this.data&&(this.data[s*this.texelSize+e]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s)):y.error("mapview-attributes-store","Tried to set a value for a texel's readonly component")}lock(){this.pixelType===g.PixelType.UNSIGNED_BYTE&&this._shared&&b.atomics&&"local"!==this._ctype&&Atomics.store(this.data,0,1)}unlock(){this.pixelType===g.PixelType.UNSIGNED_BYTE&&this._shared&&b.atomics&&"local"!==this._ctype&&Atomics.store(this.data,0,0)}expand(t){if(this.size=t,!this.textureOnly){const e=this._initData(this.pixelType,t,this._shared,this._ctype),i=this.data;e.set(i),this.data=e}}toMessage(){const t=this.dirtyStart,e=this.dirtyEnd,i=this.texelSize;if(t>e)return null;this._resetRange();const s=!(this._shared||"local"===this._ctype),r=this.pixelType,a=this.layout,n=this.data;return{start:t,end:e,data:s&&n.slice(t*i,(e+1)*i)||null,pixelType:r,layout:a}}_initData(t,e,i,s){const r=i&&"local"!==s?SharedArrayBuffer:ArrayBuffer,a=d.getPixelArrayCtor(t),n=new a(new r(e*e*4*a.BYTES_PER_ELEMENT));for(let l=0;l<n.length;l+=4)n[l+1]=255;return n}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}}class T{constructor(t,e){this._client=t,this.config=e,this.updatingHandles=new l.UpdatingHandles,this._blocks=new Array,this._filters=new Array(h.maxFilters),this._attributeComputeInfo=null,this._targetType=0,this._abortController=new AbortController,this._hasScaleExpr=!1,this._size=32,this._nextUpdate=null,this._currUpdate=null,this._idsToHighlight=new Set;const i=e.supportsTextureFloat?g.PixelType.FLOAT:g.PixelType.UNSIGNED_BYTE;f(`Creating AttributeStore ${b.sharedArrayBuffer?"with":"without"} shared memory`),this._blockDescriptors=[{pixelType:g.PixelType.UNSIGNED_BYTE,layout:1},{pixelType:g.PixelType.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:g.PixelType.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:i,layout:15},{pixelType:i,layout:15},{pixelType:i,layout:15},{pixelType:i,layout:15}],this._blocks=this._blockDescriptors.map((()=>null))}destroy(){this._abortController.abort(),this.updatingHandles.destroy()}get hasScaleExpr(){return this._hasScaleExpr}get _signal(){return this._abortController.signal}get hasHighlight(){return this._idsToHighlight.size>0}isUpdating(){const t=this.updatingHandles.updating||!!this._nextUpdate;return i("esri-2d-log-updating")&&console.log(`Updating AttributeStore: ${t}\n  -> updatingHandles ${this.updatingHandles.updating} (currUpdate: ${!!this._currUpdate})\n  -> nextUpdate: ${!!this._nextUpdate}\n`),t}update(t,e){this.config=e;const s=e.schema.processors[0].storage,r=n.diff(this._schema,s);if((t.targets.feature||t.targets.aggregate)&&(t.storage.data=!0),r&&(i("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:",r),t.storage.data=!0,this._schema=s,this._attributeComputeInfo=null,null!=s)){switch(s.target){case"feature":this._targetType=u.displayIdTypeFeature;break;case"aggregate":this._targetType=u.displayIdTypeAggregate}if("subtype"===s.type){this._attributeComputeInfo={isSubtype:!0,subtypeField:s.subtypeField,map:new Map};for(const t in s.mapping){const e=s.mapping[t];if(null!=e?.vvMapping)for(const i of e.vvMapping)this._bindAttribute(i,parseInt(t,10))}}else{if(this._attributeComputeInfo={isSubtype:!1,map:new Map},null!=s.vvMapping)for(const t of s.vvMapping)this._bindAttribute(t);if(null!=s.attributeMapping)for(const t of s.attributeMapping)this._bindAttribute(t)}}}onTileData(t,e){if(null==e.addOrUpdate)return;const i=e.addOrUpdate.getCursor();for(;i.next();){const t=i.getDisplayId();this.setAttributeData(t,i)}}async setHighlight(t,e){const i=1,s=this._getBlock(0),r=e.map((t=>u.getDisplayIdTexel(t)));s.lock(),s.unsetComponentAllTexels(0,i),s.setComponent(0,i,r),s.unlock(),this._idsToHighlight.clear();for(const a of t)this._idsToHighlight.add(a);await this.sendUpdates()}async updateFilters(t,e,s){i("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters");const{service:r,spatialReference:a}=s,{filters:n}=e,l=n.map(((t,e)=>this._updateFilter(t,e,r,a))),o=(await Promise.all(l)).some((t=>t));i("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters - finsihed"),o&&(t.storage.filters=!0,i("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:","Filters changed"))}setData(t,e,i,s){const r=u.getDisplayIdTexel(t);this._ensureSizeForTexel(r),this._getBlock(e).setData(t,i,s)}getData(t,e,i){return this._getBlock(e).getData(t,i)}getHighlightFlag(t){return this._idsToHighlight.has(t)?h.highlightFlag:0}unsetAttributeData(t){const e=u.getDisplayIdTexel(t);this._getBlock(0).setData(e,0,0)}setAttributeData(t,e){const i=u.getDisplayIdTexel(t);if(this._ensureSizeForTexel(i),this._getBlock(0).setData(i,0,this.getFilterFlags(e)),this._targetType!==u.getDisplayIdType(t))return;const s=this._attributeComputeInfo,a=this.config.supportsTextureFloat?1:2,n=4;let l=null;s&&(l=s.isSubtype?s.map.get(e.readAttribute(s.subtypeField)):s.map,l?.size&&l.forEach(((t,s)=>{const l=s*a%n,o=Math.floor(s*a/n),u=this._getBlock(o+h.attributeDataVv),d=t(e);if(this.config.supportsTextureFloat)u.setData(i,l,d);else if(d===h.nanMagicNumber)u.setData(i,l,255),u.setData(i,l+1,255);else{const t=r.clamp(Math.round(d),-32767,32766)+32768,e=255&t,s=(65280&t)>>8;u.setData(i,l,e),u.setData(i,l+1,s)}})))}sendUpdates(){if(i("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate"),this._nextUpdate)return this._nextUpdate.promise;if(this._currUpdate)return this._nextUpdate=a.createResolver(),this.updatingHandles.addPromise(this._nextUpdate.promise),this._nextUpdate.promise;const t={blocks:this._blocks.map((t=>null!=t?t.toMessage():null))};return this._currUpdate=this._createResources().then((()=>{const e=()=>{if(this._currUpdate=null,this._nextUpdate){const t=this._nextUpdate;this._nextUpdate=null,this.sendUpdates().then((()=>t.resolve()))}else i("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::No additional updates queued")};i("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::client.update");const s=this.updatingHandles.addPromise(this._client.update(t,this._signal).then(e).catch(e));return this._client.render(this._signal),s})).catch((t=>{if(a.isAbortError(t))return this._createResourcesPromise=null,this._createResources();y.error(new e("mapview-attribute-store","Encountered an error during client update",t))})),this._currUpdate}_ensureSizeForTexel(t){for(;t>=this._size*this._size;)if(this._expand())return}_bindAttribute(t,e){function i(){const{normalizationField:e}=t;return e?i=>{const s=i.readAttribute(e);if(!s)return null;return i.readAttribute(t.field)/s}:e=>e.readAttribute(t.field)}function s(){return t.normalizationField&&y.warn("mapview-arcade","Ignoring normalizationField specified with an arcade expression which is not supported."),e=>e.getComputedNumericAtIndex(t.fieldIndex)}let r;if(null!=t.fieldIndex)r=s();else{if(!t.field)return;r=i()}const{valueRepresentation:a}=t;if(a){r=x(r,(t=>c.getVisualVariableSizeValueRepresentationRatio(t,a)))}const n=t=>null===t||isNaN(t)||t===1/0||t===-1/0?h.nanMagicNumber:t,l=this._attributeComputeInfo;if(l.isSubtype){const i=l.map.get(e)??new Map;i.set(t.binding,x(r,n)),l.map.set(e,i)}else l.map.set(t.binding,x(r,n))}_createResources(){if(null!=this._createResourcesPromise)return this._createResourcesPromise;this._getBlock(h.attributeDataAnimation),this._getBlock(h.attributeDataGpgpu),f("Initializing AttributeStore");const t={shared:b.sharedArrayBuffer&&!("local"===this._client.type),size:this._size,blocks:this._blocks.map((t=>null!=t?{textureOnly:t.textureOnly,buffer:t.buffer,pixelType:t.pixelType}:null))},i=this._client.initialize(t,this._signal).catch((t=>{a.isAbortError(t)?this._createResourcesPromise=null:y.error(new e("mapview-attribute-store","Encountered an error during client initialization",t))}));return this._createResourcesPromise=i,i.then((()=>null==this._createResourcesPromise?this._createResources():void 0)),i}_getBlock(t){const e=this._blocks[t];if(null!=e)return e;f(`Initializing AttributeBlock at index ${t}`);const i=b.sharedArrayBuffer,s=this._client.type,r=new m(i,s,this._size,this._blockDescriptors[t]);return this._blocks[t]=r,this._createResourcesPromise=null,r}_expand(){if(this._size<this.config.maxTextureSize){const t=this._size<<=1;f("Expanding block size to",t,this._blocks);for(const e of this._blocks)e?.expand(t);return this._createResourcesPromise=null,this._size=t,0}return y.error(new e("mapview-limitations","Maximum number of onscreen features exceeded.")),-1}async _updateFilter(t,e,i,s){const r=this._filters[e],a=null!=r&&r.hash;if(!r&&!t)return!1;if(a===JSON.stringify(t))return!1;if(null==t){if(!r)return!1;const t=1<<e+1,i=this._getBlock(0);return this._filters[e]=null,i.setComponentAllTexels(0,t),this.sendUpdates(),!0}const n=await this._getFilter(e,i);return await n.update(t,s),!0}async _getFilter(e,i){const s=this._filters[e];if(null!=s)return s;const{default:r}=await new Promise(((e,i)=>t(["./FeatureFilter"],(t=>e(_(t))),i))),a=new r({geometryType:i.geometryType,hasM:!1,hasZ:!1,timeInfo:i.timeInfo,fieldsIndex:o.fromJSON(i.fieldsIndex)});return this._filters[e]=a,a}isVisible(t){return!!(2&this._getBlock(0).getData(t,0))}getFilterFlags(t){let e=0;const i=u.getDisplayIdFilterMask(t.getDisplayId());for(let r=0;r<this._filters.length;r++){const s=!!(i&1<<r),a=this._filters[r];e|=(!s||null==a||a.check(t)?1:0)<<r}let s=0;if(this._idsToHighlight.size){const e=t.getObjectId();s=this.getHighlightFlag(e)}return e<<1|s}}return T}));
