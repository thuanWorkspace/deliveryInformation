/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../../chunks/tslib.es6","../../../../../core/BidiText","../../../../../core/Error","../../../../../core/has","../../../../../core/Logger","../../../../../core/maybe","../../../../../core/promiseUtils","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/accessorSupport/diffUtils","../../../../../geometry/SpatialReference","../../../engine/webgl/DisplayId","../../../engine/webgl/enums","../../../engine/webgl/mesh/MeshData","../../../engine/webgl/mesh/factories/WGLMeshFactory","../../../engine/webgl/mesh/templates/WGLTemplateStore","../../../engine/webgl/util/Matcher","../textUtils","./BaseProcessor","../support/ResourceManagerProxy"],(function(e,t,s,r,a,i,o,n,l,c,d,h,u,f,g,y,m,p,_,b,I){"use strict";function w(e,t){const s=t-t/4,r=t+t/2;return(!e.minScale||e.minScale>=s)&&(!e.maxScale||e.maxScale<=r)}function S(e){const t=e.message,s={message:{data:{},tileKey:t.tileKey,tileKeyOrigin:t.tileKeyOrigin,version:t.version},transferList:new Array};for(const r in t.data){const e=r,a=t.data[e];if(s.message.data[e]=null,null!=a){const t=a.stride,r=a.indices.slice(0),i=a.vertices.slice(0),o=a.records.slice(0),n=a.metrics?.slice(0),l={stride:t,indices:r,vertices:i,records:o,metrics:n};s.transferList.push(r,i,o),s.message.data[e]=l}}return s}let M=class extends b{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map,this._bufferIds=new Map}initialize(){this.addHandles([this.tileStore.on("update",this.onTileUpdate.bind(this))]),this._resourceManagerProxy=new I(this.remoteClient)}destroy(){this._resourceManagerProxy.destroy()}get supportsTileUpdates(){return!0}forEachBufferId(e){this._bufferIds.forEach((t=>{t.forEach(e)}))}async update(e,t){const s=t.schema.processors[0];if("symbol"!==s.type)return;const r=d.diff(this._schema,s);(d.hasDiff(r,"mesh")||d.hasDiff(r,"target"))&&(e.mesh=!0,e.why?.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo))}onTileMessage(e,t,s,r){return o.throwIfAborted(r),this._onTileData(e,t,s,r)}onTileClear(e,t){const s={clear:!0,end:t};return this._bufferData.delete(e.key.id),this._bufferIds.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:s})}onTileError(e,t,s){const r=s.signal,a={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",a,{signal:r})}onTileUpdate(e){for(const t of e.removed)this._bufferData.has(t.key.id)&&this._bufferData.delete(t.key.id),this._bufferIds.has(t.key.id)&&this._bufferIds.delete(t.key.id);for(const t of e.added)this._bufferData.forEach((e=>{for(const s of e)s.message.tileKey===t.id&&this._updateTileMesh("append",t,S(s),[],!1,!1,null)}))}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e)?.push(S(t))}_createFactory(e){const{geometryType:t,objectIdField:s,fields:r}=this.service,a=(e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t),i={geometryType:t,fields:r,spatialReference:h.fromJSON(this.spatialReference)},o=new m.WGLTemplateStore(a,this.tileStore.tileScheme.tileInfo),{matcher:n,aggregateMatcher:l}=e.mesh;return this._store=o,this._matchers.feature=p.createMatcher(n,o,i,this._resourceManagerProxy),this._matchers.aggregate=l?p.createMatcher(l,o,i,this._resourceManagerProxy):null,new y.WGLMeshFactory(t,s,o)}async _onTileData(e,t,s,r){o.throwIfAborted(r);const{type:a,addOrUpdate:i,remove:n,clear:l,end:c}=t,d=!!this._schema.mesh.sortKey;if(!i){const t={type:a,addOrUpdate:null,remove:n,clear:l,end:c,sort:d};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const h=this._processFeatures(e,i,s,r,t.status?.version);try{const s=await h;if(null==s){const t={type:a,addOrUpdate:null,remove:n,clear:l,end:c,sort:d};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const i=[];for(const t of s){let s=!1;const r=t.message.bufferIds,a=e.key.id,o=t.message.tileKey;if(a!==o&&null!=r){if(!this.tileStore.get(o)){this._addBufferData(a,t),i.push(t);continue}let e=this._bufferIds.get(o);e||(e=new Set,this._bufferIds.set(o,e));const n=Array.from(r);for(const t of n){if(e.has(t)){s=!0;break}e.add(t)}}s||(this._addBufferData(a,t),i.push(t))}await Promise.all(i.map((s=>{const i=e.key.id===s.message.tileKey,o=i?t.remove:[],n=i&&t.end;return this._updateTileMesh(a,e,s,o,n,!!t.clear,r.signal)})))}catch(u){this._handleError(e,u,r)}}async _updateTileMesh(e,t,s,r,a,i,n){const l=e,c=s.message.tileKey,d=!!this._schema.mesh.sortKey;c!==t.key.id&&(a=!1);const h=s?.message,u={type:l,addOrUpdate:h,remove:r,clear:i,end:a,sort:d},f={transferList:s?.transferList??[],signal:n};return o.throwIfAborted(f),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:c,data:u},f)}async _processFeatures(e,t,s,r,a){if(null==t||!t.hasFeatures)return null;const i={transform:e.transform,hasZ:!1,hasM:!1},n=this._factory,l={viewingMode:"",scale:e.scale},c=await this._matchers.feature,d=await this._matchers.aggregate;o.throwIfAborted(r);const h=this._getLabelInfos(e,t);return await n.analyze(t.getCursor(),this._resourceManagerProxy,c,d,i,l),o.throwIfAborted(r),this._writeFeatureSet(e,t,i,h,n,s,a)}_writeFeatureSet(e,t,s,r,a,i,o){const n=t.getSize(),l=this._schema.mesh.matcher.symbologyType,c=new g.MeshData(e.key.id,{features:n,records:n,metrics:0},l,i,l!==f.WGLSymbologyType.HEATMAP,o),d={viewingMode:"",scale:e.scale},h=t.getCursor();for(;h.next();)try{const t=h.getDisplayId(),i=null!=r?r.get(t):null;a.writeCursor(c,h,s,d,e.level,i,this._resourceManagerProxy)}catch(y){}const u=e.tileInfoView.tileInfo.isWrappable;return c.serialize(u)}_handleError(e,t,s){if(!o.isAbortError(t)){const r={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",r,{signal:s.signal})}return Promise.resolve()}_getLabelingSchemaForScale(e){const t=this._schema.mesh.labels;if(null==t)return null;if("subtype"===t.type){const s={type:"subtype",classes:{}};let r=!1;for(const a in t.classes){const i=t.classes[a].filter((t=>w(t,e.scale)));r=r||!!i.length,s.classes[a]=i}return r?s:null}const s=t.classes.filter((t=>w(t,e.scale)));return s.length?{type:"simple",classes:s}:null}_getLabels(e,t){if("subtype"===t.type){const s=this.service.subtypeField;i.assertIsSome(s,"Expected to find subtype Field");const r=e.readAttribute(s);return null==r?[]:t.classes[r]??[]}return t.classes}_getLabelInfos(e,s){const r=this._getLabelingSchemaForScale(e);if(null==r)return null;const a=new Map,i=s.getCursor();for(;i.next();){const e=i.getDisplayId(),s=[],o=u.isAggregateId(e),n=o&&1!==i.readAttribute("cluster_count")?"aggregate":"feature",l=this._getLabels(i,r);for(const r of l){if(r.target!==n)continue;const a=i.getStorage(),l=o&&"feature"===n?a.getComputedStringAtIndex(i.readAttribute("referenceId"),r.fieldIndex):a.getComputedStringAtIndex(e,r.fieldIndex);if(!l)continue;const c=t.bidiText(l.toString()),d=c[0],h=c[1];this._store.getMosaicItem(r.symbol,_.codepoints(d)).then((e=>{s[r.index]={glyphs:e.glyphMosaicItems??[],rtl:h,index:r.index}}))}a.set(e,s)}return a}};M=e.__decorate([c.subclass("esri.views.2d.layers.features.processors.SymbolProcessor")],M);return M}));
