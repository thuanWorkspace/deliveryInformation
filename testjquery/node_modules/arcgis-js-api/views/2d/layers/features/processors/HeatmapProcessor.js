/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../../chunks/tslib.es6","../../../../../core/has","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/Error","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/accessorSupport/diffUtils","../../../../../renderers/support/heatmapUtils","../../../engine/webgl/definitions","./BaseProcessor","../support/tileUtils"],(function(e,t,s,i,r,o,a,n,d,c,l,h){"use strict";class p{constructor(e,t){this.offset=e,this.extent=t}}function u(e){const t=e.key,s=new Map,i=256,r=c.tileSize,o=e.tileInfoView.tileInfo.isWrappable;return s.set(h.getPow2NeighborKey(t,-1,-1,o).id,new p([-r,-r],[r-i,r-i,r,r])),s.set(h.getPow2NeighborKey(t,0,-1,o).id,new p([0,-r],[0,r-i,r,r])),s.set(h.getPow2NeighborKey(t,1,-1,o).id,new p([r,-r],[0,r-i,i,r])),s.set(h.getPow2NeighborKey(t,-1,0,o).id,new p([-r,0],[r-i,0,r,r])),s.set(h.getPow2NeighborKey(t,1,0,o).id,new p([r,0],[0,0,i,r])),s.set(h.getPow2NeighborKey(t,-1,1,o).id,new p([-r,r],[r-i,0,r,i])),s.set(h.getPow2NeighborKey(t,0,1,o).id,new p([0,r],[0,0,r,i])),s.set(h.getPow2NeighborKey(t,1,1,o).id,new p([r,r],[0,0,i,i])),s}let y=class extends l{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.addHandles([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(e,t){const s=t.schema.processors[0];if("heatmap"!==s.type)return;n.diff(this._schema,s)&&(e.mesh=!0,this._schema=s)}onTileUpdate(e){for(const t of e.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(e){const t={clear:!0};return this._tileKeyToFeatureSets.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t})}async onTileMessage(e,t,s){this._tileKeyToFeatureSets.has(e.key.id)||this._tileKeyToFeatureSets.set(e.key.id,new Map);const i=this._tileKeyToFeatureSets.get(e.key.id);if(i&&null!=t.addOrUpdate&&t.addOrUpdate.hasFeatures&&i.set(t.addOrUpdate.instance,t),t.end){const t=[],i=u(e);this._tileKeyToFeatureSets.forEach(((s,r)=>{if(r===e.key.id)s.forEach((({addOrUpdate:e})=>{e&&t.push(e)}));else if(i.has(r)){const e=i.get(r),[o,a]=e.offset;s.forEach((({addOrUpdate:e})=>{if(e){const s=e.transform(o,a,1,1);t.push(s)}}))}}));const r=d.calculateHeatmapIntensityInfoReaders(t,this._schema.mesh,512,512),o={tileKey:e.key.id,intensityInfo:r},a=[r.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",o,{...s,transferList:a})}}onTileError(e,t,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:e.id,error:t},s)}};y=e.__decorate([a.subclass("esri.views.2d.layers.features.processors.HeatmapProcessor")],y);return y}));
