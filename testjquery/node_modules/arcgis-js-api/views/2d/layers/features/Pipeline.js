/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/has","../../../../core/reactiveUtils","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/accessorSupport/decorators/subclass","../../../../geometry/support/spatialReferenceUtils","../../../../layers/support/TileInfo","./processors","./controllers/FeatureController2D","./support/TileStore","./support/UpdateToken","../../tiling/TileInfoView"],(function(e,t,r,s,o,i,l,n,a,c,p,h,d,u,y){"use strict";let g=class extends t{constructor(){super(...arguments),this.controller=null,this.processor=null,this.remoteClient=null,this.tileStore=null,this.service=null,this.viewState=null,this._paused=!1,this._pendingTileUpdates=[]}initialize(){this.addHandles([s.watch((()=>this.updating),(e=>{this.remoteClient.invoke("setUpdating",e).catch((e=>{}))}))])}destroy(){this.stop(),this.controller?.destroy(),this.processor?.destroy(),this.controller=this.processor=this.tileStore=this.remoteClient=null}get updating(){return!this.controller||this.controller.updating}stop(){this._paused=!0,Array.isArray(this.service?.source)&&(this.service.source.forEach((e=>e.close())),this.service.source.length=0),this.tileStore?.updateTiles({added:[],removed:this.tileStore.tiles.map((e=>e.id))}),this.tileStore?.destroy(),this.tileStore=null,this._pendingTileUpdates.length=0}async startup({service:e,config:t,tileInfo:r,tiles:s}){if(this._paused=!0,Array.isArray(this.service?.source)&&(this.service.source.forEach((e=>e.close())),this.service.source.length=0),this.service=e,!this.tileStore||!a.equals(this.tileStore.tileScheme.spatialReference,r.spatialReference)){const e=new y(c.fromJSON(r));s.added.length=s.removed.length=0,this.tileStore?.updateTiles({added:[],removed:this.tileStore.tiles.map((e=>e.id))}),this.tileStore?.destroy(),this.tileStore=new d(e),this._pendingTileUpdates.length=0}for(await this._createProcessorAndController(t),await this.update({config:t}),this.controller.resume(),this.tileStore.clear(),this.tileStore.updateTiles(s),this._paused=!1;this._pendingTileUpdates.length;)this.tileStore.updateTiles(this._pendingTileUpdates.pop())}async updateTiles(e){this._paused?this._pendingTileUpdates.push(e):this.tileStore?.updateTiles(e)}async update({config:e}){const t=u.UpdateToken.empty();return await Promise.all([this.processor.update(t,e),this.controller.update(t,e)]),t.toJSON()}async applyUpdate(e){return this.controller.applyUpdate(u.UpdateToken.create(e))}async _createProcessorAndController(e){await Promise.all([this._handleControllerConfig(e),this._handleProcessorConfig(e)]),this.controller.processor=this.processor}async _handleControllerConfig(e){return this._createController(this.service,e)}async _handleProcessorConfig(e){return this._createProcessor(this.service,e)}async _createController(e,t){this.controller&&(this.controller.destroy(),this.removeHandles("controller"));const{tileStore:r,remoteClient:o}=this,i=new h({service:e,tileStore:r,remoteClient:o}),l=s.watch((()=>i.dataUpdating),(e=>{this.remoteClient.invoke("setDataUpdating",e).catch((e=>{}))}));return this.addHandles(l,"controller"),this.controller=i,i}async _createProcessor(e,t){const r=t.schema.processors[0].type,s=(await p.loadProcessorModule(r)).default,{remoteClient:o,tileStore:i}=this,l=new s({service:e,config:t,tileStore:i,remoteClient:o});return this.processor&&this.processor.destroy(),this.processor=l,l}};e.__decorate([o.property()],g.prototype,"controller",void 0),e.__decorate([o.property()],g.prototype,"processor",void 0),e.__decorate([o.property()],g.prototype,"updating",null),e.__decorate([o.property()],g.prototype,"viewState",void 0),g=e.__decorate([n.subclass("esri.views.2d.layers.features.Pipeline")],g);return g}));
