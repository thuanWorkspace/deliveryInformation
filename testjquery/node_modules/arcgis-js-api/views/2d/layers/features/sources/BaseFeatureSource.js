/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../../request","../../../../../core/Error","../../../../../core/has","../../../../../core/Logger","../../../../../core/promiseUtils","../controllers/support/sourceAdapters","./DataTileSource","../../../../support/QueueProcessor"],(function(e,t,r,s,i,a,o,u,n){"use strict";const c=4;class l extends u.DataTileSource{constructor(e){super(e),this.type="feature",this.mode="on-demand",this._adapter=o.createSourceAdapter(e.serviceInfo),this._queue=new n.QueueProcessor({concurrency:8,process:async e=>{if(a.throwIfAborted(e),null!=e.tile){const t=e.tile.key.id,{signal:r}=e,i=s("esri-tiles-debug")?{tile:t.replaceAll("/","."),depth:e.depth}:void 0,a=await this._adapter.executeQuery(e.query,{signal:r,query:{...i,...this._schema?.customParameters}});return a.level=e.tile.key.level,a}return this._adapter.executeQuery(e.query,{...e,query:this._schema?.customParameters})}}),this._patchQueue=new n.QueueProcessor({concurrency:8,process:async e=>{if(a.throwIfAborted(e),null!=e.tile){const t=e.tile.key.id,{signal:r}=e,i=s("esri-tiles-debug")?{tile:t.replaceAll("/","."),depth:e.depth}:void 0,a=await this._adapter.executeQuery(e.query,{signal:r,query:{...i,...this._schema?.customParameters}});return a.level=e.tile.key.level,a}return this._adapter.executeQuery(e.query,{...e,query:this._schema?.customParameters})}})}destroy(){super.destroy(),this._adapter.destroy(),this._queue.destroy(),this._patchQueue.destroy()}enqueueQuery(e,t){return this.updatingHandles.addPromise(this._queue.push(e,t))}enqueuePatchQuery(e,t){return this.updatingHandles.addPromise(this._patchQueue.push(e,t))}get maxRecordCountFactor(){const{query:e}=this._serviceInfo.capabilities;return e.supportsMaxRecordCountFactor?c:null}get maxPageSize(){const{query:e}=this._serviceInfo.capabilities;return(e.maxRecordCount??8e3)*(this.maxRecordCountFactor??1)}get pageSize(){return Math.min(8e3,this.maxPageSize)}enableEvent(e,t){}subscribe(e,t){const s=super.subscribe(e,t);return this._fetchDataTile(e).catch((t=>{a.isAbortError(t)||i.getLogger("esri.views.2d.layers.features.sources.BaseFeatureSource").error(new r("mapview-query-error","Encountered error when fetching tile",{tile:e,error:t}))})),s}unsubscribe(e){super.unsubscribe(e)}readers(e){return this._subscriptions.get(e).readers()}async query(e,t={}){const r=t.query??{};return this._adapter.executeQuery(e,{...t,query:{...r,...this._schema?.customParameters}})}async queryLastEditDate(){const e=this._serviceInfo.source,r={...e.query,f:"json"};return(await t(e.path,{query:r,responseType:"json"})).data.editingInfo.lastEditDate}createTileQuery(e,t={}){const r=this._serviceInfo.geometryType,i=this.createQuery(t);i.quantizationParameters=t.quantizationParameters??e.getQuantizationParameters(),i.resultType="tile",i.geometry=e.extent,this._serviceInfo.capabilities.query.supportsQuantization?"esriGeometryPolyline"===r&&(i.maxAllowableOffset=e.resolution*s("feature-polyline-generalization-factor")):"esriGeometryPolyline"!==r&&"esriGeometryPolygon"!==r||(i.maxAllowableOffset=e.resolution,"esriGeometryPolyline"===r&&(i.maxAllowableOffset*=s("feature-polyline-generalization-factor")));const a=this._serviceInfo.capabilities.query;return i.defaultSpatialReferenceEnabled=a.supportsDefaultSpatialReference,i.compactGeometryEnabled=a.supportsCompactGeometry,i}async _executePatchQuery(e,t,r,s){const i=t.clone();i.outFields=[this._serviceInfo.objectIdField,...r],i.returnCentroid=!1,i.returnGeometry=!1;const a=null!=i.start?i.start/8e3:0,o=s.signal;return await this.enqueuePatchQuery({tile:e,query:i,signal:o,depth:a})}async _resend(e,t){const{query:r,message:s}=e,i=null!=r.outFields?r.outFields:[],o=this._queryInfo.outFields,u=o.filter((e=>!i.includes(e)));if(null!=s.addOrUpdate)if(u.length)try{const e=this._subscriptions.get(s.id).tile,i=await this._executePatchQuery(e,r,u,t);a.throwIfAborted(t),r.outFields=o,s.addOrUpdate.joinAttributes(i),this._onMessage({...s,end:s.end,type:"append"})}catch(n){}else this._onMessage({...s,type:"append"});else this._onMessage({...s,type:"append"})}async _resendSubscription(e){if(s("esri-2d-update-debug")&&console.debug(e.tile.id,"Resend Subscription"),e.empty)return this._onMessage({id:e.tile.id,addOrUpdate:null,end:!1,type:"append"});const t=e.signal;for(const r of e.requests.done)await this._resend(r,{signal:t});return null!=e.edits?this._onMessage(e.edits):void 0}async resend(){const e=Array.from(this._subscriptions.values());await Promise.all(e.map((e=>this._resendSubscription(e))))}}e.BaseFeatureSource=l,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
