/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../core/screenUtils","../../../../chunks/rbush","../../../../geometry/support/aaBoundingRect","../../../../geometry/support/boundsUtils","../../../../geometry/support/normalizeUtils","../../../../geometry/support/spatialReferenceUtils","../../../../symbols/cim/CIMSymbolDrawHelper","../../../../symbols/cim/CIMSymbolHelper","./GraphicStoreItem","./graphicsUtils"],(function(e,t,i,r,s,o,n,l,u,a){"use strict";const h={minX:0,minY:0,maxX:0,maxY:0},c=i.create(),d=1e-5;function p(e,t,i,r,s){return h.minX=t,h.minY=i,h.maxX=r,h.maxY=s,e.search(h)}function m(e){return{minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}}class g{constructor(e,i,r,s,o,n,u){this._graphics=s,this._onAdd=o,this._onRemove=n,this._hashToCIM=u,this._index=t.rbush(9,m),this._itemByGraphic=new Map,this._inflatedSizeHelper=new l.CIMSymbolInflatedSizeHelper,this._tileInfoView=e,this._uidFieldName=r;const a=e.getClosestInfoForScale(i);a&&(this._resolution=this._tileInfoView.getTileResolution(a.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new n.HittestDrawHelper(e)}hitTest(e,t,r,o,n){e=s.normalizeMapX(e,this._tileInfoView.spatialReference);const l=.5*o*window.devicePixelRatio*r;c[0]=e-l,c[1]=t-l,c[2]=e+l,c[3]=t+l;const u=.5*o*(r+a.pixelBuffer),h=p(this._index,e-u,t-u,e+u,t+u);if(!h||0===h.length)return[];const d=[],m=i.create(),g=i.create();for(const s of h){const{geometry:e,symbolResource:t}=s;this._getSymbolBounds(m,t,e,g,n),g[3]=g[2]=g[1]=g[0]=0,i.intersects(m,c)&&s.graphic?.visible&&d.push(s)}if(0===d.length)return[];const _=this._hittestDrawHelper,b=[];for(const i of d){const{geometry:e,symbolResource:t}=i,{hash:r,textInfo:s}=t,l=this._hashToCIM.get(r);l&&(_.hitTest(c,l.symbol,e,s,n,o)&&b.push(i))}return b.sort(f),b.map((e=>e.graphic))}getGraphicsData(e,t,i){const r=this._searchForItems(t);if(0===r.length||0===i.length)return[];r.sort(((e,t)=>e.zorder-t.zorder)),r[0].insertAfter=-1;for(let u=1;u<r.length;u++)r[u].insertAfter=r[u-1].graphic.uid;r.sort(((e,t)=>e.graphic.uid-t.graphic.uid)),i.sort(((e,t)=>e.uid-t.uid));let s,o=0,n=0;const l=t.resolution,a=[],h={originPosition:"upperLeft",scale:[l,l],translate:[t.bounds[0],t.bounds[3]]};for(const c of i){for(n=-2;o<r.length;)if(s=r[o],o++,c.uid===s.graphic.uid){n=s.insertAfter;break}if(!s?.geometry||-2===n)continue;const i=s.getGeometryQuantized(h,t.bounds,this._tileInfoView.spatialReference,l),d={...s.graphic.attributes};d[this._uidFieldName]=c.uid,null==s.groupId&&(s.groupId=e.createTemplateGroup(s.symbol,null)),a.push({centroid:u.getCentroidQuantized(s,h),geometry:i,attributes:d,symbol:s.symbol,groupId:s.groupId,insertAfter:n,zorder:s.zorder})}return a.sort(((e,t)=>e.zorder-t.zorder)),a}queryTileData(e,t){if(0===this._graphics.length)return[];const{bounds:i,resolution:r}=t,s=this._searchForItems(t),o=[];return 0===s.length||this._createTileGraphics(o,e,s,{originPosition:"upperLeft",scale:[r,r],translate:[i[0],i[3]]},t),o}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter((e=>e.graphic.visible)).map((e=>e.bounds))}addOrModify(e,t,i){if(!e||null==t)return;this.has(e)&&this.remove(e),this._onAdd(e);const r=[0,0,0,0],s=this._getSymbolBounds(null,t,i,r,0),o=u.acquire(e,t,i,null!=s?s:null,r);return this._itemByGraphic.set(e,o),i&&this._index.insert(o),o.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t?.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,i;for(let r=0;r<e.length;r++)i=e[r],t=this._itemByGraphic.get(i),t&&(t.zorder=r)}update(e,t,r){const s=this._itemByGraphic.get(e);s.groupId=null;const o=i.clone(s.bounds);this._index.remove(s);const n=this._getSymbolBounds(s.bounds,t,r,s.size,0);return null!=n&&s.set(e,t,r,n,s.size),r&&this._index.insert(s),{oldBounds:o,newBounds:s.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,i=[];for(const[r,s]of t){const e=this._getSymbolBounds(s.bounds,s.symbolResource,s.geometry,s.size,0);s.geometry&&null!=e&&(s.bounds=e,i.push(s))}this._index.load(i)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,i,r,s){const o=this._uidFieldName,n=this._tileInfoView.spatialReference,{bounds:l,resolution:a}=s;let h,c,d,p;i.sort(((e,t)=>e.zorder-t.zorder));for(let m=0;m<i.length;m++){d=i[m],h=d.graphic,c=d.getGeometryQuantized(r,l,n,a),p=0===m?-1:i[m-1].graphic.uid;const s={...d.graphic.attributes};s[o]=h.uid,null==d.groupId&&(d.groupId=t.createTemplateGroup(d.symbol,null)),e.push({centroid:u.getCentroidQuantized(d,r),geometry:c,attributes:s,symbol:d.symbol,groupId:d.groupId,insertAfter:p,zorder:d.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,r=e.bounds,s=o.getInfo(t);if(s&&t.isWrappable){const[t,o]=s.valid,n=Math.abs(r[2]-o)<d,l=Math.abs(r[0]-t)<d;if((!n||!l)&&(n||l)){const s=e.resolution;let l;l=n?i.create([t,r[1],t+s*a.pixelBuffer,r[3]]):i.create([o-s*a.pixelBuffer,r[1],o,r[3]]);const u=p(this._index,r[0],r[1],r[2],r[3]),h=p(this._index,l[0],l[1],l[2],l[3]);return[...new Set([...u,...h])]}}return p(this._index,r[0],r[1],r[2],r[3])}_getSymbolBounds(t,s,o,n,u){if(!s||!s.symbol||!o)return null;if(t||(t=i.create()),r.getBoundsXY(t,o),!n||0===n[0]&&0===n[1]&&0===n[2]&&0===n[3]){const{hash:t,textInfo:i}=s,r=this._hashToCIM.get(t);if(!r)return null;n||(n=[0,0,0,0]);const o=this._inflatedSizeHelper.getSymbolInflateSize(n,r.symbol,this._cimResourceManager,u,i);n[0]=e.pt2px(o[0]),n[1]=e.pt2px(o[1]),n[2]=e.pt2px(o[2]),n[3]=e.pt2px(o[3])}const a=this._resolution,h=l.CIMSymbolInflatedSizeHelper.safeSize(n);return t[0]-=h*a,t[1]-=h*a,t[2]+=h*a,t[3]+=h*a,t}}const f=(e,t)=>{const i=a.graphicGeometryToNumber(e.graphic),r=a.graphicGeometryToNumber(t.graphic);return i===r?t.zorder-e.zorder:i-r};return g}));
