/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../geometry/support/aaBoundingRect","../../../../geometry/support/centroid","../../../../geometry/support/jsonUtils","../../../../geometry/support/quantizationUtils","../../../../geometry/support/spatialReferenceUtils","../../../../layers/graphics/featureConversionUtils","../../../../layers/graphics/OptimizedGeometry"],(function(e,t,s,i,n,r,o){"use strict";const l=new o,a=new o,u="esriGeometryPolyline";function h(e){e.coords.length=0,e.lengths.length=0}class y{constructor(){this.bounds=e.create(),this.graphic=null}static acquire(e=null,t,s,i,n){let r;return 0===y._pool.length?r=new y:(r=y._pool.pop(),this._set.delete(r)),r.acquire(e,t,s,i,n),r}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,n){if(s.isPolygon(e.geometry)){const s=e.symbol;if(null==s)return null;if(s?.layers.length>0&&s.layers.some((e=>"text"===e.type||"marker"===e.type))){const s=t.polygonCentroid(e.geometry);return null!==s?i.quantizePoint(n,{},{x:s[0],y:s[1]},!1,!1):null}}return null}acquire(e=null,t,s,i,n){e&&this.set(e,t,s,i,n)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,n){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,n&&(this.size=n)}getGeometryQuantized(t,o,y,c){const g=this.geometry,m=s.getJsonType(g);if(null==m)return null;switch(m){case"esriGeometryPolygon":{const e=g,{rings:s}=e;if(!s||0===s.length)return null;let n;if(n=1===s.length&&2===s[0].length?i.quantizeGeometry(t,{paths:[[s[0][0],s[0][1]]]}):i.quantizeGeometry(t,this.geometry),!n){const e={x:s[0][0][0],y:s[0][0][1]};if(n=i.quantizeGeometry(t,e),n){const{x:e,y:t}=n;return{rings:[[[e-1,t],[1,-1],[1,1],[-1,1],[-1,-1]]]}}}return n}case"esriGeometryPolyline":{const e=g;h(l),h(a);const s=e.hasZ??!1,i=e.hasM??!1;return r.convertFromPolyline(l,e),r.generalizeOptimizedGeometry(a,l,s,i,u,t.scale[0]),r.quantizeOptimizedGeometry(l,a,s,i,u,t),r.convertToPolyline(l,e.hasZ??!1,e.hasM??!1)}case"esriGeometryMultipoint":{const s=g,r=.5*c*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),l=n.getInfo(y);let a=s.points;if(l){const[t,s]=l.valid,i=s-t;a=a.filter((n=>{if(n[0]+r>s||n[0]-r<t){const t=[...n];return n[0]+r>s?t[0]-=i:t[0]+=i,e.containsPointWithMargin(o,n,r)||e.containsPointWithMargin(o,t,r)}return e.containsPointWithMargin(o,n,r)}))}return 0===a.length?{points:a}:i.quantizeGeometry(t,{points:a})}}return i.quantizeGeometry(t,this.geometry)}}return y._pool=[],y._set=new Set,y}));
