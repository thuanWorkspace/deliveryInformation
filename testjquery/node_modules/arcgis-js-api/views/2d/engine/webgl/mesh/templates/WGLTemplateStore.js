/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../../../core/Error","../../../../../../core/Logger","../../../../../../core/promiseUtils","../../../../../../symbols/support/defaultsJSON","../../enums","../../materialKey/MaterialKey","./WGLDynamicFillTemplate","./WGLDynamicLineTemplate","./WGLDynamicMarkerTemplate","./WGLDynamicTextTemplate","./WGLFillTemplate","./WGLLineTemplate","./WGLMarkerTemplate","./WGLTextTemplate","../../util/Lock","../../util/Result","../../../../layers/features/textUtils","../../../../layers/support/cimSymbolUtils"],(function(e,t,r,i,s,a,o,l,n,c,m,h,p,u,_,y,f,M,T){"use strict";const I=r.getLogger("esri.views.2d.engine.webgl.mesh.templates.WGLTemplateStore"),S={sortKey:null,templates:new Array},g={isOutline:!1,placement:null,symbologyType:a.WGLSymbologyType.DEFAULT,vvFlags:0},d={...s.errorPointSymbolJSON,hash:JSON.stringify(s.errorPointSymbolJSON),materialKey:o.createMaterialKey(a.WGLGeometryType.MARKER,g)},k={...s.errorPolylineSymbolJSON,hash:JSON.stringify(s.errorPolylineSymbolJSON),materialKey:o.createMaterialKey(a.WGLGeometryType.LINE,g)},L={...s.errorPolygonSymbolJSON,hash:JSON.stringify(s.errorPolygonSymbolJSON),materialKey:o.createMaterialKey(a.WGLGeometryType.FILL,g)};function w(e,t){const r=e.length;return e.push(null),t.then((t=>e[r]=t)),e}function b(e){return null!=e&&!!(1&e)}function C(e){return"worker:port-closed"===e.name}class G{constructor(e,t){this._idCounter=1,this._templateIdCounter=1,this._idToTemplateGroup=new Map,this._symbolToTemplate=new Map,this._fetchQueue=[],this._idToResolver=new Map,this._cimTemplateCache=new Map,this._cimAnalyses=[],this._lock=new y.Lock,this._fetchResource=e,this._tileInfo=t}get _markerError(){return this._errorTemplates.marker[0]}get _fillError(){return this._errorTemplates.fill[0]}get _lineError(){return this._errorTemplates.line[0]}get _textError(){return this._errorTemplates.line[0]}createTemplateGroup(e,t,r=null){this._initErrorTemplates();const i=e.hash,s=this._symbolToTemplate.get(i);if(null!=s)return s;const a=new Array,o={sortKey:r,templates:a};t&&this._createMeshTemplates(a,t,!0),this._createMeshTemplates(a,e,!1);const l=this._createGroupId("expanded-cim"===e.type&&P(e));return this._idToTemplateGroup.set(l,o),this._symbolToTemplate.set(i,l),l}getTemplateGroup(e){return this._idToTemplateGroup.get(e)??S}getDynamicTemplateGroup(e){return this._idToTemplateGroup.has(e)?(b(e)||I.error("mapview-template-store",`Id ${e} does not refer to a dynamic template`),this._idToTemplateGroup.get(e)):S}getMosaicItem(e,t){const r=this._createTemplateId(),i=new Promise((e=>this._idToResolver.set(r,e)));return this._fetchQueue.push({symbol:e,id:r,glyphIds:t}),i}finalize(e){return this._fetchQueue.length||this._lock.isHeld()?y.withLock(this._lock,this._fetchAllQueuedResources.bind(this),e):Promise.resolve()}_initErrorTemplates(){this._errorTemplates||(this._errorTemplates={fill:this._createMeshTemplates([],L,!1),marker:this._createMeshTemplates([],d,!1),line:this._createMeshTemplates([],k,!1)})}_fetchAllQueuedResources(e){if(!this._fetchQueue.length)return Promise.resolve();const r=this._fetchQueue,s=this._cimAnalyses;return this._fetchQueue=[],this._cimAnalyses=[],Promise.all(s).then((()=>this._fetchResource(r,e).then((e=>{for(const{id:t,mosaicItem:r}of e){this._idToResolver.get(t)(r),this._idToResolver.delete(t)}})))).catch((e=>{i.isAbortError(e)?this._fetchQueue=this._fetchQueue.concat(r):C(e)||I.error(new t("mapview-template-store","Unable to fetch requested texture resources",e))}))}_createGroupId(e){return this._idCounter++<<1|(e?1:0)}_createTemplateId(){return this._templateIdCounter++}async _createSMS(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e);return f.ok(t,I)?u.fromSimpleMarker(e,t):this._markerError}async _createPMS(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e);return f.ok(t,I)?u.fromPictureMarker(e,t):this._markerError}async _createSFS(e,t){const{spriteMosaicItem:r}=await this.getMosaicItem(e);return f.ok(r,I)?h.fromSimpleFill(e,r,t):this._fillError}async _createPFS(e,t){const{spriteMosaicItem:r}=await this.getMosaicItem(e);return f.ok(r,I)?h.fromPictureFill(e,r,t):this._fillError}async _createSLS(e,t){const{spriteMosaicItem:r}=await this.getMosaicItem(e);return f.ok(r,I)?p.fromSimpleLine(e,r):this._lineError}async _createLMS(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e);return f.ok(t,I)?u.fromLineSymbolMarker(e,t):this._markerError}async _createTS(e){const{glyphMosaicItems:t}=await this.getMosaicItem(e);return _.fromText(e,t??[])}async _createCIMText(e){const{glyphMosaicItems:t}=await this.getMosaicItem(T.cimLayerToRasterizationInfo(e),M.codepoints(e.text));return f.ok(t,I)?_.fromCIMText(e,t,this._tileInfo):this._textError}async _createCIMFill(e){const{spriteMosaicItem:t}=await this.getMosaicItem(T.cimLayerToRasterizationInfo(e));return f.ok(t,I)?h.fromCIMFill(e,t,this._tileInfo):this._fillError}async _createCIMLine(e){const{spriteMosaicItem:t}=await this.getMosaicItem(T.cimLayerToRasterizationInfo(e));return f.ok(t,I)?p.fromCIMLine(e,t,this._tileInfo):this._lineError}async _createCIMMarker(e){const{spriteMosaicItem:t}=await this.getMosaicItem(T.cimLayerToRasterizationInfo(e));return f.ok(t,I)?u.fromCIMMarker(e,t,this._tileInfo):this._markerError}async _createCIM(e){const t=e.templateHash;let r=this._cimTemplateCache.get(t);if(null!=r)return r;switch(e.type){case"marker":r=await this._createCIMMarker(e);break;case"line":r=await this._createCIMLine(e);break;case"fill":r=await this._createCIMFill(e);break;case"text":r=await this._createCIMText(e)}return this._cimTemplateCache.set(t,r),r}async _createDynamicCIM(e){const t=e.templateHash;let r=this._cimTemplateCache.get(t);if(null!=r)return r;switch(e.type){case"marker":r=c.fromCIMMarker(e,this._tileInfo);break;case"line":r=n.fromCIMLine(e,this._tileInfo);break;case"fill":r=l.fromCIMFill(e,this._tileInfo);break;case"text":r=m.fromCIMText(e,this._tileInfo)}return this._cimTemplateCache.set(t,r),r}_createPrimitiveMeshTemplates(e,t,r){switch(t.type){case"esriSMS":return w(e,this._createSMS(t));case"esriPMS":return w(e,this._createPMS(t));case"esriSFS":return w(e,this._createSFS(t,r));case"line-marker":return w(e,this._createLMS(t));case"esriPFS":return w(e,this._createPFS(t,r));case"esriSLS":return w(e,this._createSLS(t,!1));case"esriTS":return w(e,this._createTS(t));default:return I.error("Unable to create mesh template for unknown symbol type {: $ }{symbol.type}"),e}}_createMeshTemplates(e,t,r){if(t.type.includes("3d"))return I.error("3D symbols are not supported with MapView"),e;if("expanded-cim"===t.type){for(const r of t.layers)"function"==typeof r.materialHash?w(e,this._createDynamicCIM(r)):w(e,this._createCIM(r));return e}if("composite-symbol"===t.type){for(const i of t.layers)this._createPrimitiveMeshTemplates(e,i,r);return e}return"cim"===t.type||"label"===t.type||"web-style"===t.type?e:this._createPrimitiveMeshTemplates(e,t,r)}}const P=e=>{if(!e.layers)return!1;for(const t of e.layers)if("function"==typeof t.materialHash)return!0;return!1};e.WGLTemplateStore=G,e.errorPointSchema2D=d,e.errorPolygonSchema2D=L,e.errorPolylineSchema2D=k,e.isDynamicId=b,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
