/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../../../core/screenUtils","../../../../../../symbols/cim/enums","../../../../../../symbols/cim/utils","../../alignmentUtils","../../color","../../definitions","../../number","../../materialKey/MaterialKey","./util","./WGLBaseTextTemplate","./WGLDynamicMeshTemplate","../../../../layers/features/textUtils"],(function(t,e,i,s,a,n,o,r,l,h,c,p){"use strict";const u=5;function m(t,e,i,s){return"string"==typeof t.text?t.text:"function"==typeof t.text?t.text(e,i,s)??"":""}class _ extends(h(c)){constructor(s,l,h){super(s),this._horizontalAlignment="center",this._verticalAlignment="middle",this._textToGlyphs=new Map,this._minMaxZoom=o.i1616to32(Math.round(l*n.minMaxZoomPrecisionFactor),Math.round(h*n.minMaxZoomPrecisionFactor));const c=s.scaleFactor||1;this._cimTextLayer=s;const p=s.color;if(i.isFeatureValueFn(p)){const t=(t,e,i)=>a.premultiplyAlphaRGBA(p(t,e,i));this._dynamicPropertyMap.set("_color",t)}else this._color=a.premultiplyAlphaRGBA(p);const m=s.outlineColor;if(i.isFeatureValueFn(m)){const t=(t,e,i)=>a.premultiplyAlphaRGBA(m(t,e,i));this._dynamicPropertyMap.set("_haloColor",t)}else this._haloColor=a.premultiplyAlphaRGBA(m);let _;i.isFeatureValueFn(s.size)||(_=Math.min(Math.round(t.pt2px(s.size*s.sizeRatio)),127));const y=(e,a,n)=>i.isFeatureValueFn(s.size)?Math.min(Math.round(t.pt2px(s.size(e,a,n)*s.sizeRatio)),127):_;if(this._dynamicPropertyMap.set("_size",y),i.isFeatureValueFn(s.outlineSize)){const e=(e,i,a)=>Math.min(Math.floor(u*t.pt2px(s.outlineSize(e,i,a)*s.sizeRatio)),127);this._dynamicPropertyMap.set("_haloSize",e)}else this._haloSize=Math.min(Math.floor(u*t.pt2px(s.outlineSize*s.sizeRatio)),127);let f;i.isFeatureValueFn(s.offsetX)||(f=Math.round(t.pt2px(s.offsetX*s.sizeRatio)));const d=(e,a,n)=>i.isFeatureValueFn(s.offsetX)?Math.round(t.pt2px(s.offsetX(e,a,n)*s.sizeRatio)):f;let M;this._dynamicPropertyMap.set("_xOffset",d),i.isFeatureValueFn(s.offsetY)||(M=Math.round(t.pt2px(s.offsetY*s.sizeRatio)));const g=(e,a,n)=>i.isFeatureValueFn(s.offsetY)?Math.round(t.pt2px(s.offsetY(e,a,n)*s.sizeRatio)):M;if(this._dynamicPropertyMap.set("_yOffset",g),i.isFeatureValueFn(s.angle)?this._dynamicPropertyMap.set("_angle",s.angle):this._angle=s.angle,i.isFeatureValueFn(s.horizontalAlignment)?this._dynamicPropertyMap.set("_horizontalAlignment",s.horizontalAlignment):this._horizontalAlignment=s.horizontalAlignment,i.isFeatureValueFn(s.verticalAlignment)?this._dynamicPropertyMap.set("_verticalAlignment",s.verticalAlignment):this._verticalAlignment=s.verticalAlignment,null!=s.effects){const t=s.effects;i.isFeatureValueFn(t)?this._dynamicPropertyMap.set("_effects",t):this._effects=t}if(null!=s.markerPlacement){const t=s.markerPlacement;i.isFeatureValueFn(t)?this._dynamicPropertyMap.set("_markerPlacement",t):this._textPlacement=t}i.isFeatureValueFn(s.text)?this._dynamicPropertyMap.set("_text",s.text):this._text=s.text,this._backgroundColor=s.backgroundColor&&a.premultiplyAlphaRGBA(s.backgroundColor),this._borderLineColor=s.borderLineColor&&a.premultiplyAlphaRGBA(s.borderLineColor),this._borderLineSize=s.borderLineWidth,this._scaleFactor=c;const x=Math.min(Math.round(t.pt2px(s.referenceSize*s.sizeRatio)),127);this._referenceSize=Math.round(Math.sqrt(256*x)),this._materialKey=s.materialKey;const F=r.TextMaterialKey.load(this._materialKey);F.sdf=!0,this._bitset=(s.alignment===e.Alignment.MAP?1:0)|(s.colorLocked?1:0)<<1,this._materialKey=F.data,this._decoration="none",this._lineHeight=1,this._lineWidth=512,this._isCIM=!0}static fromCIMText(t,e){const[i,s]=l.getMinMaxZoom(t.scaleInfo,e);return new _(t,i,s)}async analyze(t,e,i,s){const a=e.readLegacyFeature(),n=m(this._cimTextLayer,a,i,s),o=await super.analyze(t,e,i,s,p.codepoints(n));return o?.glyphMosaicItems&&this._textToGlyphs.set(n,o.glyphMosaicItems),o}bindFeature(t,e,i){const a=t.readLegacyFeature();if(this._dynamicPropertyMap.forEach(((t,s)=>{this[s]=t(a,e,i)})),!this._text||0===this._text.length)return void(this._shapingInfo=null);this._size*=this._scaleFactor,this._scale=this._size/n.glyphSize,this._xOffset*=this._scaleFactor,this._yOffset*=this._scaleFactor,this._xAlignD=s.getXAnchorDirection(this._horizontalAlignment??"center"),this._yAlignD=s.getYAnchorDirection(this._verticalAlignment??"baseline");const o=this._textToGlyphs.get(this._text)??[];this.bindTextInfo(o,!1)}}return _}));
