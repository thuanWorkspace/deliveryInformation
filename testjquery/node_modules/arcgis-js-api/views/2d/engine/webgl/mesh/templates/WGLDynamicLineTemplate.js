/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../../../core/screenUtils","../../../../../../symbols/cim/utils","../../color","../../definitions","../../number","../../materialKey/MaterialKey","./util","./WGLBaseLineTemplate","./WGLDynamicMeshTemplate","../../util/Result"],(function(t,e,i,s,a,r,l,o,n,h){"use strict";class c extends(o(n)){constructor(r,o,n){super(r),this._minMaxZoom=a.i1616to32(Math.round(o*s.minMaxZoomPrecisionFactor),Math.round(n*s.minMaxZoomPrecisionFactor)),this._cimLineLayer=r;let h=0;e.isFeatureValueFn(r.width)||(h=.5*t.pt2px(r.width));const c=(i,s,a)=>e.isFeatureValueFn(r.width)?.5*t.pt2px(r.width(i,s,a)):h;this._dynamicPropertyMap.set("_halfWidth",c),e.isFeatureValueFn(r.cap)?this._dynamicPropertyMap.set("_capType",r.cap):this._capType=r.cap,e.isFeatureValueFn(r.join)?this._dynamicPropertyMap.set("_joinType",r.join):this._joinType=r.join;const p=r.color;if(e.isFeatureValueFn(p)){const t=(t,e,s)=>i.premultiplyAlphaRGBA(p(t,e,s));this._dynamicPropertyMap.set("_fillColor",t)}else this._fillColor=p&&i.premultiplyAlphaRGBA(p)||0;const m=r.miterLimit;if(e.isFeatureValueFn(m)){const t=(t,e,i)=>l.getLimitCosine(m(t,e,i));this._dynamicPropertyMap.set("_miterLimitCosine",t)}else this._miterLimitCosine=l.getLimitCosine(m);if(null!=r.effects){const t=r.effects;e.isFeatureValueFn(t)?this._dynamicPropertyMap.set("_effects",t):this._effects=t}this._scaleFactor=r.scaleFactor||1,this._isDashed=null!=r.dashTemplate;const _=r.colorLocked?s.bitsetGenericLockColor:0,d=r.scaleDash?s.bitsetLineScaleDash:0,u=r.sampleAlphaOnly?s.bitsetGenericConsiderAlphaOnly:0;this.tessellationProperties._bitset=_|d|u,this._materialKey=r.materialKey,this._initializeTessellator(!0)}static fromCIMLine(t,e){const[i,s]=l.getMinMaxZoom(t.scaleInfo,e);return new c(t,i,s)}bindFeature(t,e,i){const l=t.readLegacyFeature();this._dynamicPropertyMap.forEach(((t,s)=>{this[s]=t(l,e,i)})),this._halfWidth*=this._scaleFactor;const o=this._materialCache,n=(0,this._cimLineLayer.materialHash)(l,e,i),c=o.get(n);let p=null;if(c&&h.ok(c.spriteMosaicItem)&&(p=c.spriteMosaicItem),p){this._hasPattern=!0;const{rect:t,width:e,height:i}=p,r=t.x+s.spritePadding,l=t.y+s.spritePadding,o=r+e,n=l+i;this.tessellationProperties._tl=a.i1616to32(r,l),this.tessellationProperties._br=a.i1616to32(o,n)}else this._hasPattern=!1,this.tessellationProperties._tl=0,this.tessellationProperties._br=0;this.tessellationProperties._fillColor=this._fillColor,this.tessellationProperties._halfWidth=this._halfWidth,this.tessellationProperties.offset=0,this.tessellationProperties._halfReferenceWidth=this.tessellationProperties._halfWidth;const m=r.LineMaterialKey.load(this._materialKey);p&&(m.sdf=p.sdf,m.pattern=!0,m.textureBinding=p.textureBinding),this._materialKey=m.data}}return c}));
