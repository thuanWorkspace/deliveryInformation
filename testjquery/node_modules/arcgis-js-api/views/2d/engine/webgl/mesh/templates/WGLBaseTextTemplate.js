/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../../../core/screenUtils","../../../../../../geometry/GeometryCursor","../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper","../../definitions","../../enums","../../number","../../materialKey/MaterialKey","./shapingUtils"],(function(e,t,i,r,o,s,n,h){"use strict";const a=8,d=s.i1616to32(4,4),x=s.i1616to32(16,4),c=s.i1616to32(4,2),l=s.i1616to32(4,6),_=[c,c,l,l],u=[c,l,c,l],g=[l,l,d,d],f=[d,d,l,l],y=[l,d,l,d],m=[d,l,d,l];return d=>class extends d{constructor(...e){super(...e),this._isCIM=!1,this._vertexBoundsScale=1,this.geometryType=o.WGLGeometryType.TEXT,this._aux=s.i8888to32(0,0,this._referenceSize,this._bitset)}bindTextInfo(e,t){this._shapingInfo=e?.length?h.shapeGlyphs(e,t,{scale:this._scale,angle:this._angle,xOffset:this._xOffset,yOffset:this._yOffset,hAlign:this._xAlignD,vAlign:this._yAlignD,maxLineWidth:Math.max(32,Math.min(this._lineWidth,512)),lineHeight:r.magicLabelLineHeight*Math.max(.25,Math.min(this._lineHeight,4)),decoration:this._decoration,isCIM:this._isCIM,hasBackground:!!this._backgroundColor,borderLineSize:this._borderLineSize}):null}_write(e,t,i,r){const o=t.getDisplayId();this._writeGeometry(e,t,o,i,r)}_writeGeometry(e,t,i,r,o){const s=this._shapingInfo;if(null==s)return;if(this._textPlacement)return this._writePlacedText(e,i,s,r,t,o);const n=o?o.asOptimized():"esriGeometryPolygon"===t.geometryType?t.readCentroid():t.readGeometryForDisplay();if(null!=n){if(n.isPoint){const[t,r]=n.coords;if(!e.hasAggregates&&e.hasPixelBufferEnabled&&(t<0||t>=512||r<0||r>=512))return;return this._writeGlyphs(e,i,{x:t,y:r},s)}n.forEachVertex(((t,r)=>this._writeGlyphs(e,i,{x:t,y:r},s)))}}_writePlacedText(r,o,s,n,h,a){const d=this._textPlacement,x=a||t.GeometryCursor.fromFeatureSetReaderCIM(h);if(!x)return;const c=-1,l=i.CIMMarkerPlacementHelper.getPlacement(x,c,d,e.pt2px(1),r.tileKey,n.geometryEngine);if(!l)return;const _=s.bounds,u=Math.sqrt(_.height*_.height+_.width*_.width);let g,f,y;for(;g=l.next();)if(f=g.tx,y=-g.ty,f+u>=0&&f-u<512&&y+u>=0&&y-u<512){const e=-g.getAngle();s.setRotation(e),this._writeGlyphs(r,o,{x:f,y},s),s.setRotation(-e)}}_writeGlyphs(e,t,i,r){const o=n.MaterialKeyBase.load(this._materialKey),h=s.i1616to32(Math.round(a*i.x),Math.round(a*i.y)),d=this._vertexBoundsScale,{bounds:x,background:c,glyphs:l}=r;l.length>0&&(this._borderLineColor||this._backgroundColor)&&(o.textureBinding=l[0].textureBinding,e.recordStart(t,o.data,this.geometryType,!0),this._writeBackgroundGeometry(e,t,i,x,c),e.recordEnd());const _=2*Math.max(x.width,x.height);for(const s of r.glyphs)o.textureBinding=s.textureBinding,e.recordStart(t,o.data,this.geometryType,!0),e.vertexBounds(i.x+x.x+this._xOffset,i.y+x.y-this._yOffset,_*d,_*d),this._writeVertices(e,t,h,s),e.recordEnd()}_writeGlyph(e,t,i,r,o){const h=n.MaterialKeyBase.load(this._materialKey),d=s.i1616to32(Math.round(a*i),Math.round(a*r));h.textureBinding=o.textureBinding,e.recordStart(t,h.data,this.geometryType,!0);const x=o.bounds,c=this._vertexBoundsScale;e.vertexBounds(i+x.x*c,r+x.y*c,x.width*c,x.height*c),this._writeVertices(e,t,d,o),e.recordEnd()}_writeVertices(e,t,i,r){const o=e.vertexCount();this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.upperLeft),e.vertexWrite(r.texcoords.upperLeft),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.upperRight),e.vertexWrite(r.texcoords.upperRight),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.lowerLeft),e.vertexWrite(r.texcoords.lowerLeft),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.lowerRight),e.vertexWrite(r.texcoords.lowerRight),e.vertexEnd(),e.indexWrite(o+0),e.indexWrite(o+1),e.indexWrite(o+2),e.indexWrite(o+1),e.indexWrite(o+3),e.indexWrite(o+2)}_writeVertexCommon(e,t,i,r){const o=this._color,n=this._haloColor,h=s.i8888to32(0,0,this._referenceSize,this._bitset),a=s.i8888to32(0,0,this._size,this._haloSize);e.vertexWrite(i),e.vertexWrite(t),e.vertexWrite(o),e.vertexWrite(n),e.vertexWrite(a),e.vertexWrite(h),e.vertexWrite(this._minMaxZoom)}_writeBackgroundVertex(e,t,i,r,o,n){const h=s.i8888to32(0,1,this._referenceSize,this._bitset),a=s.i8888to32(0,0,this._size,this._haloSize),d=s.i8888to32(0,0,0,0);e.vertexWrite(i),e.vertexWrite(t),e.vertexWrite(r),e.vertexWrite(d),e.vertexWrite(a),e.vertexWrite(h),e.vertexWrite(this._minMaxZoom),e.vertexWrite(o),e.vertexWrite(n),e.vertexEnd()}_writeBackgroundQuad(e,t,i,r,o,s){const n=e.vertexCount();this._writeBackgroundVertex(e,t,i,r,o.upperLeft,s[0]),this._writeBackgroundVertex(e,t,i,r,o.upperRight,s[1]),this._writeBackgroundVertex(e,t,i,r,o.lowerLeft,s[2]),this._writeBackgroundVertex(e,t,i,r,o.lowerRight,s[3]),e.indexWrite(n+0),e.indexWrite(n+1),e.indexWrite(n+2),e.indexWrite(n+1),e.indexWrite(n+3),e.indexWrite(n+2)}_writeBackgroundGeometry(e,t,i,r,o){const n=s.i1616to32(Math.round(a*i.x),Math.round(a*i.y)),{x:h,y:d,width:c,height:l}=r,w=2*Math.max(c,l);if(e.vertexBounds(i.x+h+this._xOffset,i.y+d-this._yOffset,w*this._vertexBoundsScale,w*this._vertexBoundsScale),this._backgroundColor){const i=[x,x,x,x];this._writeBackgroundQuad(e,t,n,this._backgroundColor,o.main,i)}if(this._borderLineColor||this._backgroundColor){const i=!!this._borderLineColor&&!!this._borderLineSize&&this._borderLineSize>0,[r,s,h,a,d]=i?[_,_,u,u,this._borderLineColor]:[g,f,y,m,this._backgroundColor];this._writeBackgroundQuad(e,t,n,d,o.top,r),this._writeBackgroundQuad(e,t,n,d,o.bot,s),this._writeBackgroundQuad(e,t,n,d,o.left,h),this._writeBackgroundQuad(e,t,n,d,o.right,a)}}}}));
