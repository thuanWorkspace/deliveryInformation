/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../enums","../../number","../../Utils","../../materialKey/MaterialKey","./templateUtils","./WGLLineTemplate"],(function(e,t,r,i,s,o){"use strict";const l=100,n=1;return a=>class extends a{constructor(...t){super(...t),this.forceLibtess=!1,this._bitset=0,this._lineTemplate=null,this.geometryType=e.WGLGeometryType.FILL}_maybeAddLineTemplate(e){this._lineTemplate=o.fromFillOutline(e)}_write(e,t,r,s){const o="esriGeometryPoint"===t.geometryType,l=i.FillMaterialKey.load(this._materialKey);e.recordStart(t.getDisplayId(),this._materialKey,this.geometryType,o),this._writeGeometry(e,t,l,s,o),i.hasOutlineFillSymbology(l)&&null!=this._lineTemplate&&this._lineTemplate.writeGeometry(e,t,s,o),e.recordEnd()}_writeGeometry(e,t,r,i,o){const n=this._getGeometry(t,i,o);if(null==n)return;const a=[];if(!(n.maxLength>l)&&!this.forceLibtess&&s.triangulate(a,n))return void(a.length&&this._writeVertices(e,t,n.coords,n.lengths,r,a));const y=s.triangulateLibtess(n);this._writeVertices(e,t,y,[y.length/2],r)}_writeVertex(r,s,o,l,a,y){const m=t.i1616to32(n*l,n*a);if(r.vertexBounds(l,a,0,0),r.vertexWrite(m),r.vertexWrite(s),o.symbologyType===e.WGLSymbologyType.DOT_DENSITY)r.vertexWriteF32(1/Math.abs(y.readGeometryArea()));else{r.vertexWrite(this.fillColor);const e=i.hasSimpleSymbology(o);e||(r.vertexWrite(this.tl),r.vertexWrite(this.br)),r.vertexWrite(this.aux21),r.vertexWrite(this.aux22),r.vertexWrite(this.aux3),e||r.vertexWrite(this._minMaxZoom)}}_writeVertices(e,t,i,s,o,l){const n=t.getDisplayId(),a=this._bitset<<24|n,y=s.reduce(((e,t)=>e+t)),m=r.getStrides(o.geometryType,o.symbologyType).geometry/4,h=e.vertexCount();e.vertexEnsureSize(m*y);let u=0;if(l)for(const r of l){const s=i[2*r],l=i[2*r+1];this._writeVertex(e,a,o,s,l,t),u++}else for(let r=0;r<i.length;r+=2){const s=Math.round(i[r]),l=Math.round(i[r+1]);this._writeVertex(e,a,o,s,l,t),u++}e.indexEnsureSize(u);for(let r=0;r<u;r++)e.indexWrite(r+h)}_getGeometry(e,t,r){const i=t?.asOptimized()||e.readGeometryForDisplay();if(!i)return null;const o=r?256:8;return s.clipMarshall(i,o)}}}));
