/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../tiling/TileInfoView","../../../tiling/TileKey","../../../tiling/TileQueue","../../../tiling/TileStrategy","../definitions","../DisplayId","../enums","../Utils","./VertexDataWriter","../../../layers/features/support/tileUtils"],(function(e,t,r,i,s,n,a,h,u,c,o){"use strict";const _=1,l=2,y=4,d=8,g=16,p=32,x=64,f=128;function m(e){switch(e){case _:case d:case p:return-1;case l:case x:return 0;case y:case g:case f:return 1}}function w(e){switch(e){case _:case l:case y:return-1;case d:case g:return 0;case p:case x:case f:return 1}}const T=_|d|p,v=y|g|f,L=_|l|y,W=p|x|f;class E{constructor(e,t,r,i,s,n=0){this._hasAggregate=!1,this.hasRecords=!1,this._data={self:new Map,neighbors:new Array},this._version=0,this._current={geometryType:0,writer:null,overlaps:0,start:0,insertAfter:0,sortKey:0,id:0,materialKey:0,indexStart:0,vertStart:0,isDotDensity:!1,bufferingEnabled:!1,metricBoxLenPointer:0},this.hint=t,this.tileKey=e,this._hasAggregate=i,this._pixelBufferEnabled=s,this._version=n,this._symbologyType=r}get hasAggregates(){return this._hasAggregate}get hasPixelBufferEnabled(){return this._pixelBufferEnabled}serialize(e){const t=[];return t.push(this._serializeTileVertexData(this.tileKey,this.tileKey,this._data.self)),this._data.neighbors.forEach(((i,s)=>{const n=1<<s,a=m(n),h=w(n),u=o.getPow2NeighborKey(new r(this.tileKey),a,h,e),c=this._serializeTileVertexData(this.tileKey,u.id,i.vertexData);c.message.bufferIds=i.displayIds,t.push(c)})),t}_serializeTileVertexData(e,t,r){const i=new Array;return{message:{tileKeyOrigin:e,tileKey:t,data:{[h.WGLGeometryType.MARKER]:r.get(h.WGLGeometryType.MARKER)?.serialize(i),[h.WGLGeometryType.FILL]:r.get(h.WGLGeometryType.FILL)?.serialize(i),[h.WGLGeometryType.LINE]:r.get(h.WGLGeometryType.LINE)?.serialize(i),[h.WGLGeometryType.TEXT]:r.get(h.WGLGeometryType.TEXT)?.serialize(i),[h.WGLGeometryType.LABEL]:r.get(h.WGLGeometryType.LABEL)?.serialize(i)},version:this._version},transferList:i}}featureStart(e,t){this._current.insertAfter=e,this._current.sortKey=t}featureEnd(){}recordStart(e,t,r,i){this._current.writer=this._getVertexWriter(r),this._current.overlaps=0,this._current.indexStart=this._current.writer.indexCount,this._current.vertStart=this._current.writer.vertexCount,this._current.bufferingEnabled=i,this._current.id=e,this._current.materialKey=t,this._current.geometryType=r,this._current.isDotDensity=!1,this._current.writer.recordStart()}recordCount(){return this._current.writer.recordCount}vertexCount(){return this._current.writer.vertexCount}indexCount(){return this._current.writer.indexCount}vertexEnsureSize(e){this._current.writer.vertexEnsureSize(e)}indexEnsureSize(e){this._current.writer.indexEnsureSize(e)}vertexBounds(e,t,r,i){this._current.bufferingEnabled&&this._addOverlap(e,t,r,i)}vertexWrite(e){this._current.writer.writeVertex(e)}vertexWriteF32(e){this._current.writer.writeVertexF32(e)}vertexEnd(){}vertexWriter(){return this._current.writer.vertexWriter}indexWrite(e){this._current.writer.writeIndex(e)}indexWriter(){return this._current.writer.indexWriter}metricWriter(){return this._current.writer.metricWriter}metricStart(e,t,r,i,s,n,u,c){this._current.writer=this._getVertexWriter(h.WGLGeometryType.LABEL);const o=this._current.writer.metricWriter;o.push(a.getDisplayIdTexel(e)),o.push(t),o.push(r),o.push(i),o.push(s),o.push(n),o.push(u),o.push(c),o.push(255),this._current.metricBoxLenPointer=o.push(0)}metricEnd(){const e=this._current.writer.metricWriter;0===e.getValue(this._current.metricBoxLenPointer)&&e.seek(e.length-10)}metricBoxWrite(e,t,r,i){const s=this._current.writer.metricWriter;s.incr(this._current.metricBoxLenPointer),s.push(0),s.push(0),s.push(e),s.push(t),s.push(r),s.push(i)}recordEnd(){const e=this._current.vertStart,t=this._current.writer.vertexCount-e;if(!t)return!1;this.hasRecords=!0;const r=this._current.indexStart,i=this._current.writer.indexCount-r;if(this._current.writer.recordEnd(this._current.id,this._current.materialKey,this._current.insertAfter,r,i,e,t,this._current.sortKey),!this._pixelBufferEnabled||this._hasAggregate||0===this._current.overlaps||this._current.geometryType===h.WGLGeometryType.LABEL)return!0;const s=this._current.writer;for(let a=0;a<8;a++){const e=1<<a;if(!!(this._current.overlaps&e)){this._data.neighbors[a]||(this._data.neighbors[a]={vertexData:new Map,displayIds:new Set});const t=this._data.neighbors[a],r=this._current.geometryType;if(!t.vertexData.has(r)){const e=u.getStrides(r,this._symbologyType).geometry,i=new c.VertexDataWriter(r,e,n.patchPixelBufferAllocSize);t.vertexData.set(r,i)}const i=t.vertexData.get(this._current.geometryType),h=8,o=512*-m(e)*h,_=512*-w(e)*h;i?.copyLastFrom(s,o,_),t.displayIds.add(this._current.id)}}return!0}_addOverlap(e,t,r,i){const s=255^((e<0+r?v:e>=n.tileSize-r?T:v|T)|(t<0+i?W:t>=n.tileSize-i?L:W|L));this._current.overlaps|=s}_getVertexWriter(e){if(!this._data.self.has(e)){const t=this._data.self,r=u.getStrides(e,this._symbologyType).geometry;t.set(e,new c.VertexDataWriter(e,r,this.hint.records))}return this._data.self.get(e)}}e.MeshData=E,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
