/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../core/Error","../../../../core/has","../../../../core/Logger","../../../../core/promiseUtils","./definitions","./DisplayId","./Utils","./util/debug","../../../webgl/enums","../../../webgl/FramebufferObject","../../../webgl/Texture","../../../webgl/TextureDescriptor"],(function(t,e,i,r,s,a,n,u,d,h,l,o,x){"use strict";const g=r.getLogger("esri.views.2d.engine.webgl.AttributeStoreView"),p=d.createDebugLogger(d.debugAttrUpdates,g);class b{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:r,pixelType:s,textureOnly:a}=t,n=u.getPixelArrayCtor(s);this.shared=i,this.pixelType=s,this.size=e,this.textureOnly=a,a||(this.data=new n(r)),this._resetRange()}destroy(){this._texture?.dispose();for(const t in this._fbos){const e=this._fbos[t];e&&("0"===t&&e.detachColorTexture(),e.dispose()),this._fbos[t]=null}this._texture=null}get _textureDesc(){const t=new x.TextureDescriptor;return t.wrapMode=h.TextureWrapMode.CLAMP_TO_EDGE,t.samplingMode=h.TextureSamplingMode.NEAREST,t.dataType=this.pixelType,t.width=this.size,t.height=this.size,t}setData(t,e,i){const r=n.getDisplayIdTexel(t),s=this.data,a=r*this.texelSize+e;!s||a>=s.length||(s[a]=i,this.dirtyStart=Math.min(this.dirtyStart,r),this.dirtyEnd=Math.max(this.dirtyEnd,r))}getData(t,e){if(null==this.data)return null;const i=n.getDisplayIdTexel(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return this._texture??this._initTexture(t)}getFBO(t,e=0){if(!this._fbos[e]){const i=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new l.FramebufferObject(t,i)}return this._fbos[e]}get locked(){return!(this.pixelType!==h.PixelType.UNSIGNED_BYTE||!this.shared||this.textureOnly||!i("esri-atomics")||!this.data)&&1===Atomics.load(this.data,0)}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(t,i){if(!this.locked){try{const i=this.dirtyStart,r=this.dirtyEnd;if(!this.hasDirty)return;this._resetRange();const s=this.data.buffer,a=this.getTexture(t),n=4,d=(i-i%this.size)/this.size,h=(r-r%this.size)/this.size,l=d,o=this.size,x=h,p=d*this.size*n,b=(o+x*this.size)*n-p,c=u.getPixelArrayCtor(this.pixelType),_=new c(s,p*c.BYTES_PER_ELEMENT,b),T=this.size,f=x-l+1;if(f>this.size)return void g.error(new e("mapview-webgl","Out-of-bounds index when updating AttributeData"));a.updateData(0,0,l,T,f,_)}catch(r){}i()}}update(t){const{data:e,start:i,end:r}=t;if(null!=e&&null!=this.data){const r=this.data,s=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(r[s+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,r)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const r=u.getPixelArrayCtor(this.pixelType);this.destroy(),this.data=new r(t.buffer)}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new o.Texture(t,this._textureDesc,this.data??void 0);if(null!=this._lastTexture&&this._fbos[0]){const i=this._lastTexture.descriptor.width,r=this._lastTexture.descriptor.height,s=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,n=this.getFBO(t),d=u.getPixelBytes(s),h=new(u.getPixelArrayCtor(s))(new ArrayBuffer(i*r*d*this.texelSize)),l=t.getBoundFramebufferObject(),{x:o,y:x,width:g,height:p}=t.getViewport();t.bindFramebuffer(n),n.readPixels(0,0,i,r,a,s,h),e.updateData(0,0,0,2*i,r/2,h),t.setViewport(o,x,g,p),t.bindFramebuffer(l)}return this.destroy(),this._texture=e,this._texture}}class c{constructor(t){this._onUpdate=t,this._initialized=!1,this._forceNextUpload=!1,this._locked=!1}initialize(t){const{blocks:e,shared:i,size:r}=t;if(this.shared=i,this.size=r,p("Initializing AttributeStoreView",t),null==this._data)this._data=e.map((t=>null!=t?new b(t,r,i):null));else for(let s=0;s<this._data.length;s++){const t=this._data[s],a=e[s];null!=a&&(null==t?this._data[s]=new b(a,r,i):t.resize(a,r))}this._initialized=!0}destroy(){for(const t of this._data??[])t?.destroy();this._defaultTexture?.dispose()}isEmpty(){return null==this._data}isUpdating(){const t=null!=this._pendingAttributeUpdate,e=t;return i("esri-2d-log-updating")&&console.log(`Updating AttributeStoreView ${e}\n  -> hasPendingUpdate ${t}`),e}getBlock(t){if(null==this._data)return null;return this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVVSize(t){return this.getData(t,a.attributeDataVv,0,0)}getData(t,e,i,r){if(!this._data)return 0;const s=this._data[e];if(null==s)return 0;const a=s.getData(t,i);return null!=a?a:r}setData(t,e,i,r){this._data[e].setData(t,i,r)}lockTextureUpload(){this._locked=!0}unlockTextureUpload(){this._locked=!1}forceTextureUpload(){this._forceNextUpload=!0}async requestUpdate(t){if(this._pendingAttributeUpdate)return void g.error(new e("mapview-webgl","Tried to update attribute data with a pending update"));const i=s.createResolver();return p("AttributeStoreView Update Requested",t),this._pendingAttributeUpdate={data:t,resolver:i},this._onUpdate(),i.promise}update(){if(this._initialized&&null!=this._pendingAttributeUpdate){i("esri-2d-update-debug")&&console.debug("AttributeStoreView::update");const{data:t,resolver:e}=this._pendingAttributeUpdate,r=this._data;for(let i=0;i<t.blocks.length;i++){const e=t.blocks[i],s=r[i];null!=s&&null!=e&&(p(`Updating block ${i}`,e),s.update(e))}this._pendingAttributeUpdate=null,e(),this._onUpdate()}}bindTextures(t,e=!0){const i=this._getDefaultTexture(t);if(!this._initialized)return t.bindTexture(i,a.textureBindingAttributeData0),void(e&&(t.bindTexture(i,a.textureBindingAttributeData1),t.bindTexture(i,a.textureBindingAttributeData2),t.bindTexture(i,a.textureBindingAttributeData3),t.bindTexture(i,a.textureBindingAttributeData4),t.bindTexture(i,a.textureBindingAttributeData5),t.bindTexture(i,a.textureBindingGpgpu)));const r=this._data;if(!this._locked||this._forceNextUpload){for(const e of r)e?.updateTexture(t,(()=>this._onUpdate()));this._forceNextUpload=!1}t.bindTexture(r[a.attributeDataFilterFlags]?.getTexture(t)??i,a.textureBindingAttributeData0),e&&(t.bindTexture(r[a.attributeDataGpgpu]?.getTexture(t)??i,a.textureBindingGpgpu),t.bindTexture(r[a.attributeDataAnimation]?.getTexture(t)??i,a.textureBindingAttributeData1),t.bindTexture(r[a.attributeDataVv]?.getTexture(t)??i,a.textureBindingAttributeData2),t.bindTexture(r[a.attributeDataDd1]?.getTexture(t)??i,a.textureBindingAttributeData3),t.bindTexture(r[a.textureBindingAttributeData4]?.getTexture(t)??i,a.textureBindingAttributeData4),t.bindTexture(r[a.textureBindingAttributeData5]?.getTexture(t)??i,a.textureBindingAttributeData5))}_getDefaultTexture(t){if(null==this._defaultTexture){const e=new x.TextureDescriptor;e.wrapMode=h.TextureWrapMode.CLAMP_TO_EDGE,e.samplingMode=h.TextureSamplingMode.NEAREST,e.width=1,e.height=1,this._defaultTexture=new o.Texture(t,e,new Uint8Array(4))}return this._defaultTexture}}t.AttributeStoreView=c,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
