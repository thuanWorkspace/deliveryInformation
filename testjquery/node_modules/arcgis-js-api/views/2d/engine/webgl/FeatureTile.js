/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../core/CircularArray","../../../../core/has","../../../../chunks/mat2df32","./enums","./Utils","./WGLTile","./collisions/MetricReader","./cpuMapped/Geometry"],(function(e,t,r,s,i,a,n,h,d){"use strict";const u=50,c=4,o=100;let l=0;class _ extends n.WGLTile{constructor(e,r,i,a,n,h){super(e,r,i,a),this.instanceId=l++,this.patchCount=0,this._renderState={current:{geometry:new Map,metrics:null},next:null,swap:!1,swapFrames:0,locked:!1},this._patches=new t(o),this._bufferPatches=new t(o),this._lastCommitTime=0,this.transforms.labelMat2d=s.create(),this._store=n,this._requestLabelUpdate=h}destroy(){super.destroy(),this._renderState.current.geometry.forEach((e=>e.destroy())),null!=this._renderState.next&&this._renderState.next.geometry.forEach((e=>e.destroy())),this._renderState.current=null,this._renderState.next=null}get labelMetrics(){return this._renderState.current.metrics}get hasData(){return!!this._renderState.current.geometry.size}get updateStatus(){return`renderState:${!!this._renderState.current}, ${!!this._renderState.next}, hasData:${this.hasData}, queue:${this._patches.size}`}getGeometry(e){return this._renderState.current.geometry.get(e)}patch(e,t){this.patchCount++,e.clear&&this._patches.size>=u&&this._dropPatches();const r=e,s=r.addOrUpdate&&this.key.id!==r.addOrUpdate.tileKeyOrigin;t&&s?this._bufferPatches.enqueue(r):(r.sort=r.sort&&!t,this._patches.enqueue(r)),this.requestRender()}commit(e){if(this._lastCommitTime!==e.time){this._lastCommitTime=e.time;for(let e=0;e<c;e++)this._updateMesh(),this.isReady&&this._updateBufferMesh();this._renderState.swap&&(this._swapRenderStates(),this.requestRender())}}lock(){this._renderState.locked=!0}unlock(){this._renderState.locked=!1,this._flushUpdates(),this._swap()}_swapRenderStates(){if(this._renderState.next){if(this._renderState.locked)return this._renderState.swap=!0,void this.requestRender();this._renderState.swap=!0,this._swap()}}_swap(){this._renderState.swap&&(this._renderState.swap=!1,null!=this._renderState.next&&(this._renderState.current.geometry.forEach((e=>e.destroy())),this._renderState.current=this._renderState.next,this._renderState.next=null,this._requestLabelUpdate()))}_flushUpdates(){let e=this._patches.maxSize;for(;this._patches.size&&e--;)this._updateMesh(),this._swap()}_updateBufferMesh(){const e=this._bufferPatches.peek();if(null==e||!e.clear||null===this._renderState.next)for(;this._bufferPatches.size;){const e=this._bufferPatches.dequeue();null!=e&&this._patchBuffer(e)}}_updateMesh(){const e=this._patches.dequeue();if(null!=e){if(r("esri-2d-update-debug")){const t=e,r=t.addOrUpdate?.tileKeyOrigin,s=this.key.id===r?"SELF":r;let i="";for(let e=0;e<5;e++)i+=t.addOrUpdate?.data[e]?.records?.byteLength?1:0;console.debug(this.key.id,"FeatureTile:patch",`[clear: ${t.clear} origin: ${s}, end:${t.end} data:${i}]`)}!0===e.clear&&(null!=this._renderState.next&&(this._renderState.next.geometry.forEach((e=>e.destroy())),this._renderState.next=null),this._renderState.next={geometry:new Map,metrics:null},r("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Creating new renderState")),this.requestRender(),this._patch(e),e.end&&(r("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Encountered end message"),this.ready(),this._swapRenderStates())}}_patch(e){a.forEachGeometryType((t=>{this._remove(t,e.remove),this._insert(t,e,!1)}))}_patchBuffer(e){a.forEachGeometryType((t=>{this._insert(t,e,!0)}))}_insert(e,t,s){try{const a=this._renderState.next??this._renderState.current,n=t.addOrUpdate?.data[e],h=a.geometry;if(null==n)return;h.has(e)||(r("esri-2d-update-debug")&&console.debug(this.key.id,`FeatureTile:_insert - Creating geometry buffer ${e}`),h.set(e,new d.Geometry(e,this.stage))),r("esri-2d-update-debug")&&console.debug(this.key.id,`FeatureTile:_insert - Inserting into ${e}, version=${t.addOrUpdate?.version} stride=${n.stride}`),h.get(e).insert(n,t.sort,s),e===i.WGLGeometryType.LABEL&&this._insertLabelMetrics(t.type,n.metrics,t.clear)}catch(a){}}_insertLabelMetrics(e,t,r){const s=this._renderState.next??this._renderState.current;if(null==t)return;const i=h.MetricReader.from(t);if(null!=s.metrics){if("update"===e){const e=i.getCursor();for(;e.next();)s.metrics.delete(e.id)}s.metrics.link(i)}else s.metrics=i}_remove(e,t){const r=(this._renderState.next??this._renderState.current).geometry.get(e);t&&t.length&&r&&(r.remove(t),this._removeLabelMetrics(t))}_removeLabelMetrics(e){const{metrics:t}=this._renderState.next??this._renderState.current;if(null!=t&&e.length)for(const r of e)for(;t.delete(r););}_dropPatches(){const e=new Array;let t=!1;for(;this._patches.size;){const r=this._patches.dequeue();if(null==r)break;if(r.clear){if(t)break;t=!0}e.push(r)}this._patches.clear(),e.forEach((e=>this._patches.enqueue(e)))}}e.FeatureTile=_,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
