/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../core/screenUtils","../../../../chunks/mat3","../../../../chunks/mat3f32","../../../../chunks/vec2f32","../../../../chunks/vec3f32","../../../../geometry/support/normalizeUtils","../../../../geometry/support/spatialReferenceUtils","../../viewpointUtils","../brushes","./enums","./WGLContainer"],(function(e,t,s,r,a,o,i,n,c,l,d){"use strict";class h extends d{constructor(){super(...arguments),this._localOrigin=e.createScreenPoint(0,0),this._viewStateId=-1,this._dvsMat3=s.create()}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}prepareRenderPasses(e){const t=e.registerRenderPass({name:"overlay",brushes:[c.brushes.overlay],target:()=>this.children,drawPhase:l.WGLDrawPhase.MAP});return[...super.prepareRenderPasses(e),t]}_updateMatrices(e){const{state:s}=e,{id:i,size:n,pixelRatio:c,resolution:l,rotation:d,viewpoint:h,displayMat3:u}=s;if(this._viewStateId===i)return;const p=Math.PI/180*d,f=c*n[0],M=c*n[1],{x:v,y:m}=h.targetGeometry,w=o.normalizeMapX(v,s.spatialReference);this._localOrigin.x=w,this._localOrigin.y=m;const y=l*f,_=l*M,g=t.identity(this._dvsMat3);t.multiply(g,g,u),t.translate(g,g,r.fromValues(f/2,M/2)),t.scale(g,g,a.fromValues(f/y,-M/_,1)),t.rotate(g,g,-p),this._viewStateId=i}_updateOverlays(e,t){const{state:s}=e,{rotation:r,spatialReference:a,worldScreenWidth:o,size:c,viewpoint:l}=s,d=this._localOrigin;let h=0;const u=i.getInfo(a);if(u&&a.isWrappable){const e=c[0],i=c[1],p=180/Math.PI*r,f=Math.abs(Math.cos(p)),M=Math.abs(Math.sin(p)),v=Math.round(e*f+i*M),[m,w]=u.valid,y=n.getWorldWidth(a),{x:_,y:g}=l.targetGeometry,b=[_,g],P=[0,0];s.toScreen(P,b);const R=[0,0];let I;I=v>o?.5*o:.5*v;const O=Math.floor((_+.5*y)/y),S=m+O*y,W=w+O*y,x=[P[0]+I,0];s.toMap(R,x),R[0]>W&&(h=y),x[0]=P[0]-I,s.toMap(R,x),R[0]<S&&(h=-y);for(const s of t){const e=s.elementView.bounds;if(null==e)continue;const[t,,r]=e;t<m&&r>m?s.updateDrawCoords(d,y):r>w&&t<w?s.updateDrawCoords(d,-y):s.updateDrawCoords(d,h)}}else for(const i of t)i.updateDrawCoords(d,h)}}return h}));
