/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../geometry","../../../../core/has","../../../../core/Logger","../../../../core/mathUtils","../../../../core/promiseUtils","../../../../core/RandomLCG","../../../../geometry/support/spatialReferenceUtils","../../../../geometry/Extent"],(function(t,e,n,r,o,l,a,i,s){"use strict";const c=r.getLogger("esri.views.2d.engine.flow.dataUtils"),f=10;async function u(t,e,r,o){const a=performance.now(),i=h(e,r),s=performance.now(),u=m(e,i,r.width,r.height),d=performance.now(),w=g(u,!0),x=performance.now(),M="Streamlines"===t?p(w,f):y(w),A=performance.now();return n("esri-2d-profiler")&&(c.info("I.1","_createFlowFieldFromData (ms)",Math.round(s-a)),c.info("I.2","_getStreamlines (ms)",Math.round(d-s)),c.info("I.3","createAnimatedLinesData (ms)",Math.round(x-d)),c.info("I.4","create{Streamlines|Particles}Mesh (ms)",Math.round(A-x)),c.info("I.5","createFlowMesh (ms)",Math.round(A-a)),c.info("I.6","Mesh size (bytes)",M.vertexData.buffer.byteLength+M.indexData.buffer.byteLength)),await Promise.resolve(),l.throwIfAborted(o),M}function h(t,e){const n=w(e.data,e.width,e.height,t.smoothing);if(t.interpolate){return(t,r)=>{const o=Math.floor(t),l=Math.floor(r);if(o<0||o>=e.width)return[0,0];if(l<0||l>=e.height)return[0,0];const a=t-o,i=r-l,s=o,c=l,f=o<e.width-1?o+1:o,u=l<e.height-1?l+1:l,h=n[2*(c*e.width+s)],d=n[2*(c*e.width+f)],m=n[2*(u*e.width+s)],w=n[2*(u*e.width+f)],g=n[2*(c*e.width+s)+1],p=n[2*(c*e.width+f)+1];return[(h*(1-i)+m*i)*(1-a)+(d*(1-i)+w*i)*a,(g*(1-i)+n[2*(u*e.width+s)+1]*i)*(1-a)+(p*(1-i)+n[2*(u*e.width+f)+1]*i)*a]}}return(t,r)=>{const o=Math.round(t),l=Math.round(r);return o<0||o>=e.width||l<0||l>=e.height?[0,0]:[n[2*(l*e.width+o)],n[2*(l*e.width+o)+1]]}}function d(t,e,n,r,o,l,a,i,s){const c=[];let f=n,u=r,h=0,[d,m]=e(f,u);d*=t.velocityScale,m*=t.velocityScale;const w=Math.sqrt(d*d+m*m);let g,p;c.push({x:f,y:u,t:h,speed:w});for(let y=0;y<t.verticesPerLine;y++){let[n,r]=e(f,u);n*=t.velocityScale,r*=t.velocityScale;const d=Math.sqrt(n*n+r*r);if(d<t.minSpeedThreshold)return c;const m=n/d,w=r/d;f+=m*t.segmentLength,u+=w*t.segmentLength;if(h+=t.segmentLength/d,Math.acos(m*g+w*p)>t.maxTurnAngle)return c;if(t.collisions){const t=Math.round(f*s),e=Math.round(u*s);if(t<0||t>a-1||e<0||e>i-1)return c;const n=l[e*a+t];if(-1!==n&&n!==o)return c;l[e*a+t]=o}c.push({x:f,y:u,t:h,speed:d}),g=m,p=w}return c}function m(t,e,n,r){const o=[],l=new a,i=1/Math.max(t.lineCollisionWidth,1),s=Math.round(n*i),c=Math.round(r*i),f=new Int32Array(s*c);for(let a=0;a<f.length;a++)f[a]=-1;const u=[];for(let a=0;a<r;a+=t.lineSpacing)for(let e=0;e<n;e+=t.lineSpacing)u.push({x:e,y:a,sort:l.getFloat()});u.sort(((t,e)=>t.sort-e.sort));for(const{x:a,y:h}of u)if(l.getFloat()<t.density){const n=d(t,e,a,h,o.length,f,s,c,i);if(n.length<2)continue;o.push(n)}return o}function w(t,e,n,r){if(0===r)return t;const o=Math.round(3*r),l=new Array(2*o+1);let a=0;for(let c=-o;c<=o;c++){const t=Math.exp(-c*c/(r*r));l[c+o]=t,a+=t}for(let c=-o;c<=o;c++)l[c+o]/=a;const i=new Float32Array(t.length);for(let c=0;c<n;c++)for(let n=0;n<e;n++){let r=0,a=0;for(let i=-o;i<=o;i++){if(n+i<0||n+i>=e)continue;const s=l[i+o];r+=s*t[2*(c*e+(n+i))],a+=s*t[2*(c*e+(n+i))+1]}i[2*(c*e+n)]=r,i[2*(c*e+n)+1]=a}const s=new Float32Array(t.length);for(let c=0;c<e;c++)for(let t=0;t<n;t++){let r=0,a=0;for(let s=-o;s<=o;s++){if(t+s<0||t+s>=n)continue;const f=l[s+o];r+=f*i[2*((t+s)*e+c)],a+=f*i[2*((t+s)*e+c)+1]}s[2*(t*e+c)]=r,s[2*(t*e+c)+1]=a}return s}function g(t,e){const n=new a,r=t.reduce(((t,e)=>t+e.length),0),o=new Float32Array(4*r),l=new Array(t.length);let i=0,s=0;for(const a of t){const t=i;for(const e of a)o[4*i]=e.x,o[4*i+1]=e.y,o[4*i+2]=e.t,o[4*i+3]=e.speed,i++;l[s++]={startVertex:t,numberOfVertices:a.length,totalTime:a[a.length-1].t,timeSeed:e?n.getFloat():0}}return{lineVertices:o,lineDescriptors:l}}function p(t,e){const n=9,{lineVertices:r,lineDescriptors:o}=t;let l=0,a=0;for(const d of o){l+=2*d.numberOfVertices;a+=6*(d.numberOfVertices-1)}const i=new Float32Array(l*n),s=new Uint32Array(a);let c=0,f=0;function u(){s[f++]=c-2,s[f++]=c,s[f++]=c-1,s[f++]=c,s[f++]=c+1,s[f++]=c-1}function h(t,e,r,o,l,a,s,f){const u=c*n;let h=0;i[u+h++]=t,i[u+h++]=e,i[u+h++]=1,i[u+h++]=r,i[u+h++]=a,i[u+h++]=s,i[u+h++]=o/2,i[u+h++]=l/2,i[u+h++]=f,c++,i[u+h++]=t,i[u+h++]=e,i[u+h++]=-1,i[u+h++]=r,i[u+h++]=a,i[u+h++]=s,i[u+h++]=-o/2,i[u+h++]=-l/2,i[u+h++]=f,c++}for(const d of o){const{totalTime:t,timeSeed:n}=d;let o=null,l=null,a=null,i=null,s=null,c=null;for(let f=0;f<d.numberOfVertices;f++){const m=r[4*(d.startVertex+f)],w=r[4*(d.startVertex+f)+1],g=r[4*(d.startVertex+f)+2],p=r[4*(d.startVertex+f)+3];let y=null,x=null,M=null,A=null;if(f>0){y=m-o,x=w-l;const r=Math.sqrt(y*y+x*x);if(y/=r,x/=r,f>1){let t=y+s,n=x+c;const r=Math.sqrt(t*t+n*n);t/=r,n/=r;const o=Math.min(1/(t*y+n*x),e);t*=o,n*=o,M=-n,A=t}else M=-x,A=y;null!==M&&null!==A&&(h(o,l,a,M,A,t,n,p),u())}o=m,l=w,a=g,s=y,c=x,i=p}h(o,l,a,-c,s,t,n,i)}return{vertexData:i,indexData:s}}function y(t){const e=16,n=1,r=2,{lineVertices:o,lineDescriptors:l}=t;let a=0,i=0;for(const P of l){const t=P.numberOfVertices-1;a+=4*t*2,i+=6*t*2}const s=new Float32Array(a*e),c=new Uint32Array(i);let f,u,h,d,m,w,g,p,y,x,M,A,I,V,F=0,b=0;function S(){c[b++]=F-8,c[b++]=F-7,c[b++]=F-6,c[b++]=F-7,c[b++]=F-5,c[b++]=F-6,c[b++]=F-4,c[b++]=F-3,c[b++]=F-2,c[b++]=F-3,c[b++]=F-1,c[b++]=F-2}function v(t,o,l,a,i,c,f,u,h,d,m,w,g,p){const y=F*e;let x=0;for(const e of[n,r])for(const n of[1,2,3,4])s[y+x++]=t,s[y+x++]=o,s[y+x++]=l,s[y+x++]=a,s[y+x++]=f,s[y+x++]=u,s[y+x++]=h,s[y+x++]=d,s[y+x++]=e,s[y+x++]=n,s[y+x++]=g,s[y+x++]=p,s[y+x++]=i/2,s[y+x++]=c/2,s[y+x++]=m/2,s[y+x++]=w/2,F++}function D(t,e){let n=y+M,r=x+A;const o=Math.sqrt(n*n+r*r);n/=o,r/=o;const l=y*n+x*r;n/=l,r/=l;let a=M+I,i=A+V;const s=Math.sqrt(a*a+i*i);a/=s,i/=s;const c=M*a+A*i;a/=c,i/=c,v(f,u,h,d,-r,n,m,w,g,p,-i,a,t,e),S()}function k(t,e,n,r,o,l){if(y=M,x=A,M=I,A=V,null==y&&null==x&&(y=M,x=A),null!=m&&null!=w){I=t-m,V=e-w;const n=Math.sqrt(I*I+V*V);I/=n,V/=n}null!=y&&null!=x&&D(o,l),f=m,u=w,h=g,d=p,m=t,w=e,g=n,p=r}function L(t,e){y=M,x=A,M=I,A=V,null==y&&null==x&&(y=M,x=A),null!=y&&null!=x&&D(t,e)}for(const P of l){f=null,u=null,h=null,d=null,m=null,w=null,g=null,p=null,y=null,x=null,M=null,A=null,I=null,V=null;const{totalTime:t,timeSeed:e}=P;for(let n=0;n<P.numberOfVertices;n++){k(o[4*(P.startVertex+n)],o[4*(P.startVertex+n)+1],o[4*(P.startVertex+n)+2],o[4*(P.startVertex+n)+3],t,e)}L(t,e)}return{vertexData:s,indexData:c}}function x(t,e){const n=e.pixels,{width:r,height:l}=e,a=new Float32Array(r*l*2),i=e.mask||new Uint8Array(r*l*2);if(e.mask||i.fill(255),"vector-uv"===t)for(let o=0;o<r*l;o++)a[2*o]=n[0][o],a[2*o+1]=-n[1][o];else if("vector-magdir"===t)for(let s=0;s<r*l;s++){const t=n[0][s],e=o.deg2rad(n[1][s]),r=Math.cos(e-Math.PI/2),l=Math.sin(e-Math.PI/2);a[2*s]=r*t,a[2*s+1]=l*t}return{data:a,mask:i,width:r,height:l}}async function M(t,e,r,o,l,a){const f=performance.now(),u=i.getInfo(e.spatialReference);if(!u){const i=await A(t,e,r,o,l,a);return n("esri-2d-profiler")&&c.info("I.7","loadImagery, early exit (ms)",Math.round(performance.now()-f)),n("esri-2d-profiler")&&c.info("I.9","Number of parts",1),i}const[h,d]=u.valid,m=d-h,w=Math.ceil(e.width/m),g=e.width/w,p=Math.round(r/w);let y=e.xmin;const x=[],M=performance.now();for(let n=0;n<w;n++){const n=new s({xmin:y,xmax:y+g,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference});x.push(A(t,n,p,o,l,a)),y+=g}const I=await Promise.all(x);n("esri-2d-profiler")&&c.info("I.8","All calls to _fetchPart (ms)",Math.round(performance.now()-M)),n("esri-2d-profiler")&&c.info("I.9","Number of parts",I.length);const V={data:new Float32Array(r*o*2),mask:new Uint8Array(r*o),width:r,height:o};let F=0;for(const n of I){for(let t=0;t<n.height;t++)for(let e=0;e<n.width;e++)F+e>=r||(V.data[2*(t*r+F+e)]=n.data[2*(t*n.width+e)],V.data[2*(t*r+F+e)+1]=n.data[2*(t*n.width+e)+1],V.mask[t*r+F+e]=n.mask[t*n.width+e]);F+=n.width}return n("esri-2d-profiler")&&c.info("I.10","loadImagery, general exit (ms)",Math.round(performance.now()-f)),V}async function A(t,e,n,r,o,l){const a={requestProjectedLocalDirections:!0,signal:l};if(null!=o&&(a.timeExtent=o),"imagery"===t.type){await t.load({signal:l});const o=t.rasterInfo.dataType,i=await t.fetchImage(e,n,r,a);return null==i?.pixelData?.pixelBlock?{data:new Float32Array(n*r*2),mask:new Uint8Array(n*r),width:n,height:r}:x(o,i.pixelData.pixelBlock)}await t.load({signal:l});const i=t.rasterInfo.dataType,s=await t.fetchPixels(e,n,r,a);return null==s?.pixelBlock?{data:new Float32Array(n*r*2),mask:new Uint8Array(n*r),width:n,height:r}:x(i,s.pixelBlock)}t.createAnimatedLinesData=g,t.createFlowMesh=u,t.createParticlesMesh=y,t.createStreamlinesMesh=p,t.loadImagery=M,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
