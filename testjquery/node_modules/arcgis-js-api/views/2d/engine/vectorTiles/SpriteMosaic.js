/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../symbols/cim/rasterizingUtils","./RectangleBinPack","../webgl/Rect","../../../webgl/enums","../../../webgl/Texture","../../../webgl/TextureDescriptor"],(function(t,i,e,s,h,a){"use strict";const r="dasharray-";class n{constructor(t,e,s=0){this._size=[],this._mosaicsData=[],this._textures=[],this._dirties=[],this._maxItemSize=0,this._currentPage=0,this._pageWidth=0,this._pageHeight=0,this._mosaicRects={},this.pixelRatio=1,(t<=0||e<=0)&&console.error("Sprites mosaic defaultWidth and defaultHeight must be greater than zero!"),this._pageWidth=t,this._pageHeight=e,s>0&&(this._maxItemSize=s),this._binPack=new i(t-4,e-4)}destroy(){this.dispose()}dispose(){this._binPack=null,this._mosaicsData.length=0,this._mosaicRects={};for(const t of this._textures)t&&t.dispose();this._textures.length=0}getWidth(t){return t>=this._size.length?-1:this._size[t][0]}getHeight(t){return t>=this._size.length?-1:this._size[t][1]}getPageSize(t){return t>=this._size.length?null:this._size[t]}setSpriteSource(t){if(this.dispose(),this.pixelRatio=t.devicePixelRatio,0===this._mosaicsData.length){this._binPack=new i(this._pageWidth-4,this._pageHeight-4);const t=Math.floor(this._pageWidth),e=Math.floor(this._pageHeight),s=new Uint32Array(t*e);this._mosaicsData[0]=s,this._dirties.push(!0),this._size.push([this._pageWidth,this._pageHeight]),this._textures.push(void 0)}this._sprites=t}getSpriteItem(t,i=!1){let e,s,h=this._mosaicRects[t];if(h)return h;if(!this._sprites||"loaded"!==this._sprites.loadStatus)return null;if(t&&t.startsWith(r)?([e,s]=this._rasterizeDash(t),i=!0):e=this._sprites.getSpriteInfo(t),!e?.width||!e.height||e.width<0||e.height<0)return null;const a=e.width,n=e.height,[_,o,g]=this._allocateImage(a,n);return _.width<=0?null:(this._copy(_,e,o,g,i,s),h={rect:_,width:a,height:n,sdf:e.sdf,simplePattern:!1,pixelRatio:e.pixelRatio,page:o},this._mosaicRects[t]=h,h)}getSpriteItems(t){const i={};for(const e of t)i[e.name]=this.getSpriteItem(e.name,e.repeat);return i}getMosaicItemPosition(t,i){const e=this.getSpriteItem(t,i),s=e&&e.rect;if(!s)return null;s.width=e.width,s.height=e.height;const h=e.width,a=e.height,r=2;return{tl:[s.x+r,s.y+r],br:[s.x+r+h,s.y+r+a],page:e.page}}bind(t,i,e=0,r=0){if(e>=this._size.length||e>=this._mosaicsData.length)return;if(!this._textures[e]){const i=new a.TextureDescriptor;i.wrapMode=s.TextureWrapMode.CLAMP_TO_EDGE,i.width=this._size[e][0],i.height=this._size[e][1],this._textures[e]=new h.Texture(t,i,new Uint8Array(this._mosaicsData[e].buffer))}const n=this._textures[e];n.setSamplingMode(i),this._dirties[e]&&n.setData(new Uint8Array(this._mosaicsData[e].buffer)),t.bindTexture(n,r),this._dirties[e]=!1}static _copyBits(t,i,e,s,h,a,r,n,_,o,g){let c=s*i+e,l=n*a+r;if(g){l-=a;for(let r=-1;r<=o;r++,c=((r+o)%o+s)*i+e,l+=a)for(let i=-1;i<=_;i++)h[l+i]=t[c+(i+_)%_]}else for(let u=0;u<o;u++){for(let i=0;i<_;i++)h[l+i]=t[c+i];c+=i,l+=a}}_copy(t,i,e,s,h,a){if(!this._sprites||"loaded"!==this._sprites.loadStatus||e>=this._mosaicsData.length)return;const r=new Uint32Array(a?a.buffer:this._sprites.image.buffer),_=this._mosaicsData[e];_&&r||console.error("Source or target images are uninitialized!");const o=2,g=a?i.width:this._sprites.width;n._copyBits(r,g,i.x,i.y,_,s[0],t.x+o,t.y+o,i.width,i.height,h),this._dirties[e]=!0}_allocateImage(t,s){t+=2,s+=2;const h=Math.max(t,s);if(this._maxItemSize&&this._maxItemSize<h){const i=new e(0,0,t,s);return this._mosaicsData.push(new Uint32Array(t*s)),this._dirties.push(!0),this._size.push([t,s]),this._textures.push(void 0),[i,this._mosaicsData.length-1,[t,s]]}let a=t%4?4-t%4:4,r=s%4?4-s%4:4;1===a&&(a=5),1===r&&(r=5);const n=this._binPack.allocate(t+a,s+r);return n.width<=0?(this._dirties[this._currentPage]||(this._mosaicsData[this._currentPage]=null),this._currentPage=this._mosaicsData.length,this._mosaicsData.push(new Uint32Array(this._pageWidth*this._pageHeight)),this._dirties.push(!0),this._size.push([this._pageWidth,this._pageHeight]),this._textures.push(void 0),this._binPack=new i(this._pageWidth-4,this._pageHeight-4),this._allocateImage(t,s)):[n,this._currentPage,[this._pageWidth,this._pageHeight]]}_rasterizeDash(i){const e=/\[(.*?)\]/,s=i.match(e);if(!s)return null;const h=s[1].split(",").map(Number),a=i.slice(i.lastIndexOf("-")+1),[r,n,_]=t.rasterizeDash(h,a);return[{x:0,y:0,width:n,height:_,sdf:!0,pixelRatio:1},new Uint8Array(r.buffer)]}}return n}));
