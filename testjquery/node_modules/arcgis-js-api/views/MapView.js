/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","../chunks/tslib.es6","../Viewpoint","../core/Collection","../core/CollectionFlattener","../core/Error","../core/has","../core/Logger","../core/maybe","../core/reactiveUtils","../core/workers/workers","../core/accessorSupport/decorators/property","../core/accessorSupport/decorators/cast","../core/arrayUtils","../core/accessorSupport/decorators/subclass","../core/accessorSupport/ensureType","../geometry/projection","../layers/support/TileInfo","./BreakpointsOwner","./DOMContainer","./PopupView","./View","./2d/AnimationManager","./2d/FrameTask","./2d/GoToManager","./2d/layerViewModuleImportUtils","./2d/MapViewConstraints","./2d/tiling/TileInfoView","./2d/tiling/TileKey","./2d/tiling/TileQueue","./2d/tiling/TileStrategy","./2d/viewpointUtils","./2d/ViewStateManager","./2d/input/MapViewInputManager","./2d/layers/features/support/TileStore","./2d/support/HighlightOptions","./2d/support/hitTestUtils","./2d/support/screenshotUtils","./2d/support/StationaryManager","./2d/support/Timeline","./support/screenUtils","./support/WebGLRequirements","./ui/DefaultUI","./ui/2d/DefaultUI2D","../webmap/background/ColorBackground"],(function(e,t,i,r,a,s,n,o,p,l,h,d,c,g,u,y,w,_,m,f,M,V,v,b,S,T,O,k,L,R,C,P,D,E,x,z,I,A,G,q,U,F,N,W,$){"use strict";let H,B,j,Z,J,K;async function Q(){const[,{GraphicsView2D:t,GraphicContainer:i,LabelManager:r,MapViewNavigation:a,MagnifierView2D:s,Stage:n}]=await Promise.all([new Promise(((t,i)=>e(["./2d/webglDeps"],t,i))),new Promise(((t,i)=>e(["./2d/mapViewDeps"],t,i)))]);B=t,j=i,Z=r,J=a,K=s,H=n}let X=class extends(m.BreakpointsOwner(M.PopupView(f.DOMContainer(V)))){constructor(e){super(e),this._magnifierView=null,this.stage=null,this._resolveWhenReady=[],this.rootLayerViews=new a({getCollections:()=>[this.basemapView?.baseLayerViews,this.layerViews,this.basemapView?.referenceLayerViews],getChildrenFunction:()=>null}),this.featuresTilingScheme=null,this.fullOpacity=1,this.goToManager=new S.GoToManager({view:this}),this.graphicsView=null,this.stateManager=new D.ViewStateManager({constraints:new O({view:this})}),this.stationaryManager=new G.StationaryManager,this.labelManager=null,this.mapViewNavigation=null,this.renderingOptions={samplingMode:"dynamic",edgeLabelsVisible:!0,labelsAnimationTime:125,labelCollisionsEnabled:!0},this.supersampleScreenshotsEnabled=!0,this.supportsGround=!1,this.frameTask=new b(this),this.floors=new r,this.highlightOptions=new z,this.inputManager=new E({view:this}),this.map=null,this.spatialReferenceLocked=!1,this.timeline=new q.Timeline,this.type="2d",this.ui=new W,this.test={takeScreenshot:async e=>A.takeRawScreenshot(this._getScreenshotView(e),e)},this.padding={top:0,right:0,bottom:0,left:0},this.addHandles([l.watch((()=>this.viewpoint),(()=>this.stationaryManager.flip()),l.sync),this.on("resize",(e=>this.stateManager.resize(e.width,e.height))),l.watch((()=>this.animationManager?.animation),(e=>{this.animation=e}))]),h.initialize()}destroy(){this._set("preconditionsReady",!1),this.frameTask=p.destroyMaybe(this.frameTask),this.goToManager.destroy(),this.rootLayerViews.destroy(),this.inputManager.destroy(),this._set("inputManager",null)}get graphicsTileStore(){return new x(this.featuresTilingScheme)}get constraintsInfo(){const e=this.defaultsFromMap?.tileInfo,t=this.spatialReference;return{lods:e?.spatialReference?.equals(t)?e.lods:null,spatialReference:t}}get state(){return this.stateManager.state}get initialExtentRequired(){if(!this.stateManager)return!1;const{scale:e,constraints:t,center:i,viewpoint:r,extent:a}=this;let s=this.zoom;return!(this.map&&"initialViewProperties"in this.map&&this.map.initialViewProperties?.viewpoint)&&(!a&&(t?.effectiveLODs||(s=-1),(!i||0===e&&-1===s)&&(null==r?.targetGeometry||"extent"!==r.targetGeometry.type&&!r.scale)))}get _defaultsFromMapSettings(){return{required:{tileInfo:!0,heightModelInfo:!1,extent:!1},requiresExtentInSpatialReference:this.spatialReferenceLocked}}get typeSpecificPreconditionsReady(){const e=this._getDefaultViewpoint();if(!e)return!1;const t=this.spatialReference,i=e.targetGeometry;return!!w.canProjectWithoutEngine(i.spatialReference,t)||w.isLoadedOrLoad()}set animation(e){const t=this._get("animation");if(e===t)return;if(t&&t.stop(),!e||e.isFulfilled())return this._set("animation",null),void(this.frameTask.animationInProgress=!1);this._set("animation",e),this.frameTask.animationInProgress=!0;const i=()=>{e===this._get("animation")&&(this._set("animation",null),this.frameTask?.requestFrame()),this.frameTask.animationInProgress=!1};e.when(i,i)}get background(){return Y(this.map)?this.map.initialViewProperties.background:null}set background(e){this._override("background",e)}get center(){return this.stateManager?.center??null}set center(e){this.stateManager.center=e}get constraints(){return this.stateManager?.constraints}set constraints(e){e.view=this;const t=this.stateManager.constraints;this.stateManager.constraints=e,t?.destroy()}get extent(){return this.stateManager?.extent??null}set extent(e){this.stateManager.extent=e}get padding(){return this.stateManager?.padding}set padding(e){this.stateManager&&(this.stateManager.padding=e)}get rendering(){return this.stage?.renderRequested??!1}get resizeAlign(){return this.stateManager.resizeAlign}set resizeAlign(e){this.stateManager.resizeAlign=e}get resolution(){return this.stateManager.resolution??0}get rotation(){return this.stateManager.rotation??0}set rotation(e){const{rotationEnabled:t}=this.constraints;this.constraints.rotationEnabled=!0,this.stateManager.rotation=e,this.constraints.rotationEnabled=t}get scale(){return this.stateManager?.scale??0}set scale(e){this.stateManager&&(this.stateManager.scale=e)}get stationary(){return!this.animation&&!this.navigating&&!this.resizing&&this.stationaryManager.stationary}get updating(){const e=!this.destroyed&&(!this.layerViewManager||!this.labelManager||!this.graphicsView||!0===this.layerViewManager.updating||!0===this.labelManager.updating||!0===this.graphicsView.updating||this.allLayerViews.some((e=>!e.destroyed&&!("layerViews"in e)&&!0===e.updating)));if(n("esri-2d-log-updating")){const t=this.allLayerViews.reduce(((e,t)=>({...e,[t.layer.id]:!t.destroyed&&!("layerViews"in t)&&t.updating})),{});console.log(`Updating MapView: ${e}\n-> Null LayerViewManager: ${!this.layerViewManager}\n-> Null LabelManager: ${!this.labelManager}\n-> Null GraphicsView: ${!this.graphicsView}\n-> layerViewManager.updating: ${this.layerViewManager?.updating}\n-> labelManager.updating: ${this.labelManager?.updating}\n-> graphicsView.updating: ${this.graphicsView?.updating}\n-> allLayerViews: ${JSON.stringify(t)}\n`)}return e}get viewpoint(){return this.stateManager.viewpoint??null}set viewpoint(e){this.stateManager.viewpoint=e,this.frameTask.requestFrame()}get zoom(){return this.stateManager.zoom??-1}set zoom(e){this.stateManager.zoom=e}get navigating(){return this.mapViewNavigation?.interacting??!1}goTo(e,t){return this.goToManager.goTo(e,t)}async hitTest(e,t){return I.hitTest(this,e,t)}async takeScreenshot(e){return A.takeScreenshot(this._getScreenshotView(e),e)}toMap(e){if(!this.ready)return null;const t=U.isSupportedScreenPointEvent(e)?U.createScreenPointFromSupportedEvent(this,e):e;return this.stateManager.toMap(t)}toScreen(e,t){return this.stateManager.toScreen(e,t)}on(e,t,i,r){const a=this.inputManager&&this.viewEvents.on(e,t,i,r);return a||super.on(e,t)}hasEventListener(e){return super.hasEventListener(e)||this.viewEvents.hasHandler(e)}whenLayerView(e){return super.whenLayerView(e)}graphicChanged(e){if(this.graphicsView){this.graphicsView.graphicUpdateHandler(e)}}whenReady(){return new Promise((e=>{this.ready?e(this):this._resolveWhenReady.push(e)}))}forceDOMReadyCycle(){this.forceReadyCycle()}getDefaultSpatialReference(){return this.map&&"initialViewProperties"in this.map&&this.map?.initialViewProperties?.spatialReference||this.defaultsFromMap?.spatialReference||null}getDefaultTimeZone(){return Y(this.map)?this.map.initialViewProperties.timeZone:null}hasLayerViewModule(e){return T.layerView2DImporter.hasLayerViewModule(e)}importLayerView(e){return T.layerView2DImporter.importLayerView(e)}pixelSizeAt(){return this.ready?this.resolution:(o.getLogger(this).error("#pixelSizeAt()","Map view cannot be used before it is ready"),null)}popupHitTest(e){return this.hitTest(e).then((t=>({...t,mapPoint:this.toMap(e)})))}requestUpdate(){this.ready&&this.frameTask.requestUpdate()}async validate(){let e=F.check(this.type);if(n("safari")&&n("safari")<9&&(e=new s("mapview:browser-not-supported","This browser is not supported by MapView (Safari < 9)",{type:"safari",requiredVersion:9,detectedVersion:n("safari")})),null!=e)throw o.getLogger(this).warn("#validate()",e.message),e}loadAsyncDependencies(){return Q()}_getDefaultViewpoint(){const{constraints:e,initialExtent:t,map:r,padding:a,size:s}=this;if(!e)return null;const n=r&&"initialViewProperties"in r?r.initialViewProperties:void 0,o=this.stateManager.getUserStartupOptions(this.size),p=n?.viewpoint,l=p?.targetGeometry?.extent??t,h=l?.center,d=p?.rotation??0,c=p?.scale||l&&P.extentToScale(l,[s[0]-a.left-a.right,s[1]-a.top-a.bottom]),g=o.center??h,u=o.rotation??d,y=o.scale??c;return g&&y?new i({targetGeometry:g,scale:y,rotation:u}):null}_startup(){this.timeline.begin("MapView Startup");const e=this._getDefaultViewpoint();this.stateManager.startup(e,this.size,this.spatialReference,this.defaultsFromMap.extent?.center),this.graphics.owner=this;const t=new H(this.surface,{canvas:this.renderCanvas,contextOptions:{disabledExtensions:this.deactivatedWebGLExtensions,debugWebGLExtensions:this.debugWebGLExtensions},renderingOptions:this.renderingOptions,timeline:this.timeline});this.stage=t,this._magnifierView=new K,this._magnifierView.magnifier=this.magnifier;const i=new Z({view:this});this._set("labelManager",i);const r=new v({view:this});this._set("animationManager",r);const a=new J({view:this,animationManager:r});this._set("mapViewNavigation",a),this._setupSpatialReferenceDependentProperties(),this.addHandles([this.rootLayerViews.on("change",(()=>this._updateStageChildren())),t.on("webgl-error",(e=>this.fatalError=e.error)),l.watch((()=>this.stationary),(e=>t.stationary=e),l.syncAndInitial),l.watch((()=>this.background),(e=>{t.backgroundColor=e?.color,this._magnifierView.backgroundColor=e?.color}),l.syncAndInitial),l.watch((()=>this.magnifier),(e=>this._magnifierView.magnifier=e),l.syncAndInitial),l.watch((()=>this.renderingOptions),(e=>t.renderingOptions=e),l.syncAndInitial),l.watch((()=>this.highlightOptions),(e=>t.highlightOptions=e),l.syncAndInitial),l.watch((()=>this.state.id),(()=>t.state=this.state),l.syncAndInitial)],"map-view"),this._updateStageChildren();const s=this._resolveWhenReady;this._resolveWhenReady=[],s.forEach((e=>e(this))),this.timeline.end("MapView Startup"),this.frameTask.start(),this._set("ready",!0)}_teardown(){this._destroySpatialReferenceDependentProperties(),this.removeHandles("map-view"),this.mapViewNavigation.destroy(),this._set("mapViewNavigation",null),this.animationManager.destroy(),this._set("animationManager",null),this.layerViewManager.clear(),this.labelManager.destroy(),this._magnifierView.destroy(),this.stage.destroy(),this.stage=null,this._set("graphicsView",null),this._magnifierView=null,this._set("labelManager",null),this._set("mapViewNavigation",null),this.graphics.owner=null,this.frameTask.stop(),this.stationaryManager.clear(),this._set("ready",!1),this.stateManager.teardown(),this.animation=null}_updateStageChildren(){this.stage.removeAllChildren(),this.rootLayerViews.forEach((e=>{this.stage.addChild(e.container)}));const e=this.graphicsView;this.stage.addChild(e.container),this.stage.addChild(this._magnifierView)}_setupSpatialReferenceDependentProperties(){const e=new k(_.create({spatialReference:this.spatialReference,size:512,numLODs:36}));this._set("featuresTilingScheme",e);const t=new B({view:this,graphics:this.graphics,requestUpdateCallback:()=>this.requestUpdate(),container:new j(e)});this._set("graphicsView",t)}_destroySpatialReferenceDependentProperties(){const e=this.graphicsView;this._set("graphicsView",null),e.destroy(),this._set("featuresTilingScheme",null)}_getScreenshotView(e){const{allLayerViews:t,padding:i,size:r,stage:a}=this;return{allLayerViews:t,backgroundColor:e?.ignoreBackground?null:this.background?.color,padding:i,size:r,stage:a}}_spatialReferenceChanged(e){if(this.ready){this.frameTask.stop();for(const e of this.allLayerViews)e.processDetach();this._destroySpatialReferenceDependentProperties(),this.stateManager.changeSpatialReference(e),this.stage.state=this.state,this._setupSpatialReferenceDependentProperties();for(const e of this.allLayerViews)e.processAttach();this.frameTask.requestFrame(),this.frameTask.start(),this._updateStageChildren()}}};X.type="2d",t.__decorate([d.property({readOnly:!0})],X.prototype,"animationManager",void 0),t.__decorate([d.property({constructOnly:!0})],X.prototype,"deactivatedWebGLExtensions",void 0),t.__decorate([d.property({constructOnly:!0})],X.prototype,"debugWebGLExtensions",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"featuresTilingScheme",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"fullOpacity",void 0),t.__decorate([d.property()],X.prototype,"goToManager",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"graphicsTileStore",null),t.__decorate([d.property()],X.prototype,"graphicsView",void 0),t.__decorate([d.property()],X.prototype,"stateManager",void 0),t.__decorate([d.property()],X.prototype,"constraintsInfo",null),t.__decorate([d.property({readOnly:!0})],X.prototype,"state",null),t.__decorate([d.property()],X.prototype,"initialExtentRequired",null),t.__decorate([d.property()],X.prototype,"labelManager",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"mapViewNavigation",void 0),t.__decorate([d.property({constructOnly:!0})],X.prototype,"renderCanvas",void 0),t.__decorate([d.property()],X.prototype,"renderingOptions",void 0),t.__decorate([d.property({constructOnly:!0})],X.prototype,"supersampleScreenshotsEnabled",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"supportsGround",void 0),t.__decorate([d.property()],X.prototype,"_defaultsFromMapSettings",null),t.__decorate([d.property({readOnly:!0})],X.prototype,"typeSpecificPreconditionsReady",null),t.__decorate([d.property()],X.prototype,"animation",null),t.__decorate([d.property({type:$})],X.prototype,"background",null),t.__decorate([d.property()],X.prototype,"center",null),t.__decorate([d.property({type:O})],X.prototype,"constraints",null),t.__decorate([d.property()],X.prototype,"extent",null),t.__decorate([d.property()],X.prototype,"floors",void 0),t.__decorate([d.property({type:z})],X.prototype,"highlightOptions",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"inputManager",void 0),t.__decorate([d.property()],X.prototype,"map",void 0),t.__decorate([d.property()],X.prototype,"padding",null),t.__decorate([d.property({readOnly:!0})],X.prototype,"rendering",null),t.__decorate([d.property()],X.prototype,"resizeAlign",null),t.__decorate([d.property({readOnly:!0})],X.prototype,"resolution",null),t.__decorate([d.property()],X.prototype,"rotation",null),t.__decorate([d.property()],X.prototype,"scale",null),t.__decorate([d.property({constructOnly:!0})],X.prototype,"spatialReferenceLocked",void 0),t.__decorate([d.property()],X.prototype,"stationary",null),t.__decorate([d.property({type:q.Timeline,readOnly:!0})],X.prototype,"timeline",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"type",void 0),t.__decorate([d.property({readOnly:!0})],X.prototype,"updating",null),t.__decorate([d.property()],X.prototype,"viewpoint",null),t.__decorate([d.property()],X.prototype,"zoom",null),t.__decorate([d.property({readOnly:!0})],X.prototype,"navigating",null),t.__decorate([d.property(),c.cast((e=>e instanceof N?e:y.ensureClass(W,e)))],X.prototype,"ui",void 0),X=t.__decorate([u.subclass("esri.views.MapView")],X);function Y(e){return"esri.WebMap"===e?.declaredClass}return X}));
