/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../core/floatRGBA","../../core/has","../../core/maybe","../../chunks/vec3f64","./BufferObject","./doublePrecisionUtils","./enums","./FramebufferObject","./TextureDescriptor","./VertexArrayObject","./VertexElementDescriptor","./WebGLDriverTestModule"],(function(e,n,t,r,o,i,s,a,c,u,l,v,f){"use strict";class p extends f.WebGLDriverTestModule{constructor(e){super(),this._rctx=e,this._program=d(this._rctx,!1),this._obfuscated=d(this._rctx,!0)}dispose(){super.dispose(),this._obfuscated=r.disposeMaybe(this._obfuscated)}_test(e){if(t("force-double-precision-obfuscation"))return!0;if(null==this._obfuscated)return!1;const n=this._runProgram(e),r=this._runProgram(this._obfuscated);return 0!==n&&(0===r||n/r>5)}_runProgram(e){const t=this._rctx;t.resetState();const r=new u.TextureDescriptor(1);r.wrapMode=a.TextureWrapMode.CLAMP_TO_EDGE,r.samplingMode=a.TextureSamplingMode.NEAREST;const f=new c.FramebufferObject(t,r),p=i.BufferObject.createVertex(t,a.Usage.STATIC_DRAW,new Uint16Array([0,0,1,0,0,1,1,1])),d=new l.VertexArrayObject(t,new Map([["position",0]]),{geometry:[new v.VertexElementDescriptor("position",2,a.DataType.UNSIGNED_SHORT,0,4)]},{geometry:p}),h=o.fromValues(5633261.287538229,2626832.878767164,1434988.0495278358),_=o.fromValues(5633271.46742708,2626873.6381334523,1434963.231608387),A=new Float32Array(6);s.encodeDoubleArray(h,A,3);const m=new Float32Array(6);s.encodeDoubleArray(_,m,3),t.useProgram(e),e.setUniform3f("u_highA",A[0],A[2],A[4]),e.setUniform3f("u_lowA",A[1],A[3],A[5]),e.setUniform3f("u_highB",m[0],m[2],m[4]),e.setUniform3f("u_lowB",m[1],m[3],m[5]),t.bindFramebuffer(f),t.setViewport(0,0,1,1),t.bindVAO(d),t.drawArrays(a.PrimitiveType.TRIANGLE_STRIP,0,4);const b=new Uint8Array(4);f.readPixels(0,0,1,1,a.PixelFormat.RGBA,a.PixelType.UNSIGNED_BYTE,b),d.dispose(),f.dispose();const g=(h[2]-_[2])/25,B=n.unpackFloatRGBA(b);return Math.abs(g-B)}}function d(e,n){const t=`\n\n  precision highp float;\n\n  attribute vec2 position;\n\n  uniform vec3 u_highA;\n  uniform vec3 u_lowA;\n  uniform vec3 u_highB;\n  uniform vec3 u_lowB;\n\n  varying vec4 v_color;\n\n  ${n?"#define DOUBLE_PRECISION_REQUIRES_OBFUSCATION":""}\n\n  #ifdef DOUBLE_PRECISION_REQUIRES_OBFUSCATION\n\n  vec3 dpPlusFrc(vec3 a, vec3 b) {\n    return mix(a, a + b, vec3(notEqual(b, vec3(0))));\n  }\n\n  vec3 dpMinusFrc(vec3 a, vec3 b) {\n    return mix(vec3(0), a - b, vec3(notEqual(a, b)));\n  }\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = dpPlusFrc(hiA, hiB);\n    vec3 e = dpMinusFrc(t1, hiA);\n    vec3 t2 = dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;\n    return t1 + t2;\n  }\n\n  #else\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = hiA + hiB;\n    vec3 e = t1 - hiA;\n    vec3 t2 = ((hiB - e) + (hiA - (t1 - e))) + loA + loB;\n    return t1 + t2;\n  }\n\n  #endif\n\n  const float MAX_RGBA_FLOAT =\n    255.0 / 256.0 +\n    255.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 / 256.0;\n\n  const vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\n\n  vec4 float2rgba(const float value) {\n    // Make sure value is in the domain we can represent\n    float valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\n\n    // Decompose value in 32bit fixed point parts represented as\n    // uint8 rgba components. Decomposition uses the fractional part after multiplying\n    // by a power of 256 (this removes the bits that are represented in the previous\n    // component) and then converts the fractional part to 8bits.\n    vec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\n\n    // Convert uint8 values (from 0 to 255) to floating point representation for\n    // the shader\n    const float toU8AsFloat = 1.0 / 255.0;\n\n    return fixedPointU8 * toU8AsFloat;\n  }\n\n  void main() {\n    vec3 val = dpAdd(u_highA, u_lowA, -u_highB, -u_lowB);\n\n    v_color = float2rgba(val.z / 25.0);\n\n    gl_Position = vec4(position * 2.0 - 1.0, 0.0, 1.0);\n  }\n  `,r="\n  precision highp float;\n\n  varying vec4 v_color;\n\n  void main() {\n    gl_FragColor = v_color;\n  }\n  ";return e.programCache.acquire(t,r,new Map([["position",0]]))}e.DoublePrecisionRequiresObfuscation=p,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
