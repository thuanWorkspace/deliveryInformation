/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","exports","../../../../chunks/tslib.es6","../../../ViewingMode","../core/shaderLibrary/ShaderOutput","../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl","../core/shaderLibrary/shading/WaterDistortion.glsl","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../core/shaderTechnique/ShaderTechniqueConfiguration","../lib/DefaultVertexAttributeLocations","../lib/OrderIndependentTransparency","../lib/Program","../lib/TransparencyPassType","./DefaultTechniqueConfiguration","../../../../chunks/WaterSurface.glsl","../../../webgl/renderState"],(function(e,t,r,a,o,i,s,n,p,d,c,u,l,h,y,_,f){"use strict";class b extends s.WaterDistortionPassParameters{}class g extends p.ShaderTechnique{initializeConfiguration(e,t){t.spherical=e.viewingMode===a.ViewingMode.Global,t.doublePrecisionRequiresObfuscation=e.rctx.driverTest.doublePrecisionRequiresObfuscation.result}initializeProgram(e){return new l.Program(e.rctx,g.shader.get().build(this.configuration),c.Default3D)}_setPipelineState(e){const t=this.configuration,r=e===h.TransparencyPassType.NONE,a=e===h.TransparencyPassType.FrontFace;return f.makePipelineState({blending:t.output!==o.ShaderOutput.Normal&&t.output!==o.ShaderOutput.Highlight&&t.output!==o.ShaderOutput.ObjectAndLayerIdColor&&t.transparent?r?u.blendingDefault:u.oitBlending(e):null,depthTest:{func:u.oitDepthTest(e)},depthWrite:r?t.writeDepth?f.defaultDepthWriteParams:null:u.oitDepthWrite(e),colorWrite:f.defaultColorWriteParams,polygonOffset:r||a?null:u.getOITPolygonOffset(t.enableOffset)})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}g.shader=new n.ReloadableShaderModule(_.WaterSurface,(()=>new Promise(((t,r)=>e(["../shaders/WaterSurface.glsl"],t,r)))));class m extends y.DefaultTechniqueConfiguration{constructor(){super(...arguments),this.output=o.ShaderOutput.Color,this.transparencyPassType=h.TransparencyPassType.NONE,this.spherical=!1,this.receiveShadows=!1,this.hasSlicePlane=!1,this.transparent=!1,this.enableOffset=!0,this.writeDepth=!1,this.hasScreenSpaceReflections=!1,this.doublePrecisionRequiresObfuscation=!1,this.hasCloudsReflections=!1,this.objectAndLayerIdColorInstanced=!1,this.isDraped=!1,this.multipassEnabled=!1,this.cullAboveGround=!1}}r.__decorate([d.parameter({count:o.ShaderOutput.COUNT})],m.prototype,"output",void 0),r.__decorate([d.parameter({count:h.TransparencyPassType.COUNT})],m.prototype,"transparencyPassType",void 0),r.__decorate([d.parameter()],m.prototype,"spherical",void 0),r.__decorate([d.parameter()],m.prototype,"receiveShadows",void 0),r.__decorate([d.parameter()],m.prototype,"hasSlicePlane",void 0),r.__decorate([d.parameter()],m.prototype,"transparent",void 0),r.__decorate([d.parameter()],m.prototype,"enableOffset",void 0),r.__decorate([d.parameter()],m.prototype,"writeDepth",void 0),r.__decorate([d.parameter()],m.prototype,"hasScreenSpaceReflections",void 0),r.__decorate([d.parameter()],m.prototype,"doublePrecisionRequiresObfuscation",void 0),r.__decorate([d.parameter()],m.prototype,"hasCloudsReflections",void 0),r.__decorate([d.parameter()],m.prototype,"objectAndLayerIdColorInstanced",void 0),r.__decorate([d.parameter()],m.prototype,"isDraped",void 0),r.__decorate([d.parameter()],m.prototype,"multipassEnabled",void 0),r.__decorate([d.parameter()],m.prototype,"cullAboveGround",void 0),r.__decorate([d.parameter({constValue:!1})],m.prototype,"occlusionPass",void 0),r.__decorate([d.parameter({constValue:i.PBRMode.Water})],m.prototype,"pbrMode",void 0),r.__decorate([d.parameter({constValue:!0})],m.prototype,"useCustomDTRExponentForWater",void 0),r.__decorate([d.parameter({constValue:!0})],m.prototype,"highStepCount",void 0),r.__decorate([d.parameter({constValue:!1})],m.prototype,"useFillLights",void 0),t.WaterMaterialPassParameters=b,t.WaterTechnique=g,t.WaterTechniqueConfiguration=m,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
