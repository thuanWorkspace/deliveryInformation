/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","exports","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../lib/DefaultVertexAttributeLocations","../lib/Program","../../../../chunks/AtmosphereCompositing.glsl","../../../webgl/enums","../../../webgl/renderState"],(function(e,r,t,i,n,o,a,l,s){"use strict";class d extends i.ShaderTechnique{initializeProgram(e){return new o.Program(e.rctx,d.shader.get().build(this.configuration),n.Default3D)}initializePipeline(){return this.configuration.haze?s.makePipelineState({blending:s.separateBlendingParams(l.BlendFactor.ONE,l.BlendFactor.ZERO,l.BlendFactor.ONE_MINUS_SRC_COLOR,l.BlendFactor.ONE),depthTest:{func:l.CompareFunction.ALWAYS},colorWrite:s.defaultColorWriteParams}):s.makePipelineState({blending:s.simpleBlendingParams(l.BlendFactor.SRC_ALPHA,l.BlendFactor.ONE_MINUS_SRC_ALPHA),depthTest:{func:l.CompareFunction.ALWAYS},colorWrite:s.defaultColorWriteParams})}}d.shader=new t.ReloadableShaderModule(a.AtmosphereCompositing,(()=>new Promise(((r,t)=>e(["./AtmosphereCompositing.glsl"],r,t))))),r.AtmosphereCompositingTechnique=d,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})}));
