/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","exports","../../../../chunks/tslib.es6","../core/shaderLibrary/ShaderOutput","../core/shaderModules/interfaces","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../core/shaderTechnique/ShaderTechniqueConfiguration","../lib/basicInterfaces","../lib/OrderIndependentTransparency","../lib/Program","../lib/StencilUtils","../lib/TransparencyPassType","../lib/VertexAttribute","../materials/DefaultTechniqueConfiguration","../../../../chunks/ImageMaterial.glsl","../../../webgl/enums","../../../webgl/renderState"],(function(e,t,a,r,i,s,n,o,l,c,p,u,d,h,P,m,y,T){"use strict";class g extends i.NoParameters{}class _ extends n.ShaderTechnique{initializeProgram(e){return new p.Program(e.rctx,_.shader.get().build(this.configuration),f)}_setPipelineState(e,t){const a=this.configuration,i=e===d.TransparencyPassType.NONE,s=e===d.TransparencyPassType.FrontFace;return T.makePipelineState({blending:a.output!==r.ShaderOutput.Color&&a.output!==r.ShaderOutput.Alpha||!a.transparent?null:i?b:c.oitBlending(e),culling:T.cullingParams(a.cullFace),depthTest:{func:c.oitDepthTest(e)},depthWrite:i?a.writeDepth?T.defaultDepthWriteParams:null:c.oitDepthWrite(e),colorWrite:T.defaultColorWriteParams,stencilWrite:a.hasOccludees?u.stencilWriteMaskOn:null,stencilTest:a.hasOccludees?t?u.stencilToolMaskBaseParams:u.stencilBaseAllZerosParams:null,polygonOffset:i||s?null:c.getOITPolygonOffset(a.enableOffset)})}initializePipeline(){return this._occludeePipelineState=this._setPipelineState(this.configuration.transparencyPassType,!0),this._setPipelineState(this.configuration.transparencyPassType,!1)}getPipeline(e){return e?this._occludeePipelineState:super.getPipeline()}}_.shader=new s.ReloadableShaderModule(m.ImageMaterial,(()=>new Promise(((t,a)=>e(["./ImageMaterial.glsl"],t,a)))));const b=T.simpleBlendingParams(y.BlendFactor.ONE,y.BlendFactor.ONE_MINUS_SRC_ALPHA);class O extends P.DefaultTechniqueConfiguration{constructor(){super(...arguments),this.output=r.ShaderOutput.Color,this.cullFace=l.CullFaceOptions.None,this.hasSlicePlane=!1,this.transparent=!1,this.enableOffset=!0,this.writeDepth=!0,this.hasOccludees=!1,this.transparencyPassType=d.TransparencyPassType.NONE,this.multipassEnabled=!1,this.cullAboveGround=!1,this.perspectiveInterpolation=!0}}a.__decorate([o.parameter({count:r.ShaderOutput.COUNT})],O.prototype,"output",void 0),a.__decorate([o.parameter({count:l.CullFaceOptions.COUNT})],O.prototype,"cullFace",void 0),a.__decorate([o.parameter()],O.prototype,"hasSlicePlane",void 0),a.__decorate([o.parameter()],O.prototype,"transparent",void 0),a.__decorate([o.parameter()],O.prototype,"enableOffset",void 0),a.__decorate([o.parameter()],O.prototype,"writeDepth",void 0),a.__decorate([o.parameter()],O.prototype,"hasOccludees",void 0),a.__decorate([o.parameter({count:d.TransparencyPassType.COUNT})],O.prototype,"transparencyPassType",void 0),a.__decorate([o.parameter()],O.prototype,"multipassEnabled",void 0),a.__decorate([o.parameter()],O.prototype,"cullAboveGround",void 0),a.__decorate([o.parameter()],O.prototype,"perspectiveInterpolation",void 0),a.__decorate([o.parameter({constValue:!1})],O.prototype,"occlusionPass",void 0);const f=new Map([[h.VertexAttribute.POSITION,0],[h.VertexAttribute.UV0,2],[h.VertexAttribute.PERSPECTIVEDIVIDE,3]]);t.ImageMaterialPassParameters=g,t.ImageMaterialTechnique=_,t.ImageMaterialTechniqueConfiguration=O,t.vertexAttributeLocations=f,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
