/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","exports","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../lib/DefaultVertexAttributeLocations","../lib/Program","../../../../chunks/Compositing.glsl","./CompositingTechniqueConfiguration","../../../webgl/enums","../../../webgl/renderState"],(function(e,a,i,r,t,o,l,n,d,s){"use strict";class c extends r.ShaderTechnique{initializeProgram(e){return new o.Program(e.rctx,c.shader.get().build(this.configuration),t.Default3D)}initializePipeline(){switch(this.configuration.alphaMode){case n.AlphaMode.None:return s.makePipelineState({colorWrite:s.defaultColorWriteParams});case n.AlphaMode.Alpha:return s.makePipelineState({blending:s.separateBlendingParams(d.BlendFactor.SRC_ALPHA,d.BlendFactor.ONE,d.BlendFactor.ONE_MINUS_SRC_ALPHA,d.BlendFactor.ONE_MINUS_SRC_ALPHA),colorWrite:s.defaultColorWriteParams});case n.AlphaMode.PremultipliedAlpha:case n.AlphaMode.COUNT:return s.makePipelineState({blending:s.simpleBlendingParams(d.BlendFactor.ONE,d.BlendFactor.ONE_MINUS_SRC_ALPHA),colorWrite:s.defaultColorWriteParams})}}}c.shader=new i.ReloadableShaderModule(l.Compositing,(()=>new Promise(((a,i)=>e(["./Compositing.glsl"],a,i))))),a.CompositingTechnique=c,Object.defineProperty(a,Symbol.toStringTag,{value:"Module"})}));
