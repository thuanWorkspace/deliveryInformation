/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../core/screenUtils","../../../../chunks/vec4","../../../../chunks/vec4f64","../core/shaderModules/BooleanPassUniform","../core/shaderModules/Float4PassUniform","../core/shaderModules/interfaces","../core/shaderModules/ShaderBuilder","../core/shaderModules/Texture2DPassUniform","../lib/VertexAttribute"],(function(e,r,t,a,o,n,s,i,u,l){"use strict";class c{}class d extends s.NoParameters{constructor(){super(...arguments),this.textures=new c}}function f(){const e=new i.ShaderBuilder;return e.attributes.add(l.VertexAttribute.POSITION,"vec2"),e.vertex.uniforms.add(new n.Float4PassUniform("drawPosition",((e,r)=>v(e,r)))),e.varyings.add("vUV","vec2"),e.vertex.code.add(s.glsl`void main(void) {
vUV = position;
gl_Position = vec4(drawPosition.xy + vec2(position - 0.5) * drawPosition.zw, 0.0, 1.0);
}`),e.fragment.uniforms.add(new u.Texture2DPassUniform("textureInput",(e=>e.textures.input))),e.fragment.uniforms.add(new u.Texture2DPassUniform("textureMask",(e=>e.textures.mask))),e.fragment.uniforms.add(new u.Texture2DPassUniform("textureOverlay",(e=>e.textures.overlay))),e.fragment.uniforms.add(new o.BooleanPassUniform("maskEnabled",(e=>e.magnifier.maskEnabled))),e.fragment.uniforms.add(new o.BooleanPassUniform("overlayEnabled",(e=>e.magnifier.overlayEnabled))),e.fragment.code.add(s.glsl`const float barrelFactor = 1.1;
vec2 barrel(vec2 uv) {
vec2 uvn = uv * 2.0 - 1.0;
if (uvn.x == 0.0 && uvn.y == 0.0) {
return vec2(0.5, 0.5);
}
float theta = atan(uvn.y, uvn.x);
float r = pow(length(uvn), barrelFactor);
return r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;
}
void main() {
float mask = maskEnabled ? texture(textureMask, vUV).a : 1.0;
vec4 inputColor = texture(textureInput, barrel(vUV)) * mask;
vec4 overlayColor = overlayEnabled ? texture(textureOverlay, vUV) : vec4(0);
fragColor = overlayColor + (1.0 - overlayColor.a) * inputColor;
}`),e}function v(e,a){const o=a.camera.pixelRatio,n=e.magnifier.offset.x*o,s=e.magnifier.offset.y*o;r.screenPointObjectToArray(e.magnifier.position,m);const i=a.camera.screenToRender(m,x),u=Math.ceil(o*e.magnifier.size),l=a.camera.fullWidth,c=a.camera.fullHeight;return t.set(g,(i[0]+n)/l*2-1,(i[1]-s)/c*2-1,u/l*2,u/c*2)}const m=r.createScreenPointArray(),x=r.createRenderScreenPointArray(),g=a.create();e.MagnifierPassParameters=d,e.TextureResources=c,e.build=f,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
