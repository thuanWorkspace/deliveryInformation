/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/Evented","../../../../core/Logger","../../../../core/promiseUtils","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/has","../../../../core/accessorSupport/decorators/subclass","./basicInterfaces","./ContentObjectType","./ITexture","./TextureTechnique","./TextureTechniqueConfiguration","./Util","../../../support/Scheduler"],(function(e,t,r,s,o,i,n,u,a,c,h,d,p,l,_,T,g,x){"use strict";e.TextureRepository=class extends r{constructor(e,t,r){super({}),this._stage=e,this._techniqueRepository=t,this._rctx=r,this._textures=new Map,this._loadingCount=0,this._frameUpdates=new Map,this.events=new s,this._frameTask=e.view.resourceController.scheduler.registerTask(x.TaskPriority.TEXTURE_UNLOAD)}normalizeCtorArgs(){return{}}destroy(){this._frameTask.remove(),this._stage.forEachOfType(p.ContentObjectType.Texture,(e=>e.unload()))}get updating(){return this._loadingCount>0||this._frameTask.updating}get textureTechnique(){return null==this._textureTechnique&&(this._textureTechnique=this._techniqueRepository.acquire(_.TextureTechnique,new T.TextureTechniqueConfiguration)),this._textureTechnique}acquire(e){const t=this._textures.get(e);return t?(t.ref(),t.loadingPromise??t):this._createNewRef(e)}update(){let e=!1;this._frameUpdates.forEach((t=>{const r=t.texture.frameUpdate(t.previousToken);r>=0&&r!==t.previousToken&&(t.previousToken=r,e=!0)})),e&&this.events.emit("changed",d.RenderRequestType.BACKGROUND)}_createNewRef(e){const t=this._stage.getObject(e);if(null==t)return g.assert(void 0!==t),null;const r=t.events.on("unloaded",(()=>{r.remove(),this._onTextureUnloaded(e)})),s=new f(e,(()=>{this._frameTask.schedule((()=>{s.isUnreferenced&&t.unload()}))}));return this._textures.set(e,s),s.ref(),t.glTexture?(this._updateGLTexture(s,t.glTexture),l.isFrameUpdateTexture(t)&&this._frameUpdates.set(e,{texture:t,previousToken:-1}),s):(this._loadingCount++,s.loadingPromise=this._stage.schedule((()=>{const r=t.load(this._rctx),n=r=>(this._loadingCount--,s.loadingPromise=null,this._updateGLTexture(s,r),l.isFrameUpdateTexture(t)&&this._frameUpdates.set(e,{texture:t,previousToken:-1}),s),u=e=>(this._loadingCount--,s.loadingPromise=null,i.isAbortError(e)||o.getLogger(this).error(e),null);return i.isPromiseLike(r)?r.then(n,u):n(r)})),s.loadingPromise)}_updateGLTexture(e,t){e.glTexture=t,this.events.emit("changed",d.RenderRequestType.UPDATE)}_onTextureUnloaded(e){this._textures.delete(e),this._frameUpdates.delete(e)}},t.__decorate([n.property()],e.TextureRepository.prototype,"_loadingCount",void 0),t.__decorate([n.property()],e.TextureRepository.prototype,"_frameTask",void 0),t.__decorate([n.property()],e.TextureRepository.prototype,"updating",null),e.TextureRepository=t.__decorate([h.subclass("esri.views.3d.webgl-engine.lib.TextureRepository")],e.TextureRepository);class f{constructor(e,t){this.id=e,this._release=t,this._refCount=0}get isUnreferenced(){return 0===this._refCount}ref(){++this._refCount}release(){--this._refCount,this._refCount>0||(0!==this._refCount?(o.getLogger("esri.views.3d.webgl-engine.lib.TextureRepository.RefCountedTextureImpl").error("Cannot dereference texture that has no references!"),this._refCount=0):this._release())}}Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
