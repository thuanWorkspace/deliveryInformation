/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../core/ObjectPool","../../../../core/PooledArray","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../geometry/support/frustum","../../../../geometry/support/ray","../../../../chunks/sphere","./Util"],(function(e,t,o,n,r,s,i,h){"use strict";class a{get bounds(){return this._root.bounds}get halfSize(){return this._root.halfSize}get root(){return this._root.node}get maximumObjectsPerNode(){return this._maximumObjectsPerNode}get maximumDepth(){return this._maximumDepth}get objectCount(){return this._objectCount}constructor(e,t){this.objectToBoundingSphere=e,this._maximumObjectsPerNode=10,this._maximumDepth=20,this._degenerateObjects=new Set,this._root=new d,this._objectCount=0,t&&(void 0!==t.maximumObjectsPerNode&&(this._maximumObjectsPerNode=t.maximumObjectsPerNode),void 0!==t.maximumDepth&&(this._maximumDepth=t.maximumDepth))}destroy(){this._degenerateObjects.clear(),d.clearPool(),x[0]=null,E.prune(),C.prune()}add(e,t=e.length){this._objectCount+=t,this._grow(e,t);const o=d.acquire();for(let n=0;n<t;n++){const t=e[n];this._isDegenerate(t)?this._degenerateObjects.add(t):(o.init(this._root),this._add(t,o))}d.release(o)}remove(e,t=null){this._objectCount-=e.length;const o=d.acquire();for(const n of e){const e=null!=t?t:i.copy(this.objectToBoundingSphere(n),M);b(e[3])?(o.init(this._root),this._remove(n,e,o)):this._degenerateObjects.delete(n)}d.release(o),this._shrink()}update(e,t){if(!b(t[3])&&this._isDegenerate(e))return;const o=N(e);this.remove(o,t),this.add(o)}forEachAlongRay(e,t,o){const n=s.wrap(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNode(n,e))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObject(n,e)&&o(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObject(n,e)&&o(e)})),!0}))}forEachAlongRayWithVerticalOffset(e,t,o,n){const r=s.wrap(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNodeWithOffset(r,e,n))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObjectWithOffset(r,e,n)&&o(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObjectWithOffset(r,e,n)&&o(e)})),!0}))}forEach(e){this._forEachNode(this._root,(t=>{const o=t.node;return o.terminals.forAll(e),null!==o.residents&&o.residents.forAll(e),!0})),this._degenerateObjects.forEach(e)}forEachDegenerateObject(e){this._degenerateObjects.forEach(e)}findClosest(e,t,n,s=(()=>!0),h=1/0){let a=1/0,d=1/0,l=null;const u=_(e,t),c=o=>{if(--h,!s(o))return;const u=this.objectToBoundingSphere(o);if(!r.intersectsSphere(n,u))return;const c=p(e,t,i.getCenter(u)),f=c-u[3],m=c+u[3];f<a&&(a=f,d=m,l=o)};return this._forEachNodeDepthOrdered(this._root,(s=>{if(h<=0||!r.intersectsSphere(n,s.bounds))return!1;o.scale(T,u,s.halfSize),o.add(T,T,s.bounds);if(p(e,t,T)>d)return!1;const i=s.node;return i.terminals.forAll((e=>c(e))),null!==i.residents&&i.residents.forAll((e=>c(e))),!0}),e,t),l}forEachInDepthRange(e,t,n,s,h,d,l){let u=-1/0,c=1/0;const f={setRange:e=>{n===a.DepthOrder.FRONT_TO_BACK?(u=Math.max(u,e.near),c=Math.min(c,e.far)):(u=Math.max(u,-e.far),c=Math.min(c,-e.near))}};f.setRange(s);const m=p(t,n,e),b=_(t,n),g=_(t,-n),S=e=>{if(!l(e))return;const o=this.objectToBoundingSphere(e),s=i.getCenter(o),a=p(t,n,s)-m,_=a-o[3],b=a+o[3];_>c||b<u||!r.intersectsSphere(d,o)||h(e,f)};this._forEachNodeDepthOrdered(this._root,(e=>{if(!r.intersectsSphere(d,e.bounds))return!1;o.scale(T,b,e.halfSize),o.add(T,T,e.bounds);if(p(t,n,T)-m>c)return!1;o.scale(T,g,e.halfSize),o.add(T,T,e.bounds);if(p(t,n,T)-m<u)return!1;const s=e.node;return s.terminals.forAll((e=>S(e))),null!==s.residents&&s.residents.forAll((e=>S(e))),!0}),t,n)}forEachNode(e){this._forEachNode(this._root,(t=>e(t.node,t.bounds,t.halfSize,t.depth)))}forEachNeighbor(e,t){const n=i.getRadius(t),r=i.getCenter(t),s=t=>{const s=this.objectToBoundingSphere(t),h=i.getRadius(s),a=n+h;return!(o.squaredDistance(i.getCenter(s),r)-a*a<=0)||e(t)};let h=!0;const a=e=>{h&&(h=s(e))};this._forEachNode(this._root,(e=>{const t=i.getRadius(e.bounds),s=n+t;if(o.squaredDistance(i.getCenter(e.bounds),r)-s*s>0)return!1;const d=e.node;return d.terminals.forAll(a),h&&null!==d.residents&&d.residents.forAll(a),h})),h&&this.forEachDegenerateObject(a)}_intersectsNode(e,t){return c(t.bounds,2*-t.halfSize,z),c(t.bounds,2*t.halfSize,D),h.rayBoxTest(e.origin,e.direction,z,D)}_intersectsNodeWithOffset(e,t,o){return c(t.bounds,2*-t.halfSize,z),c(t.bounds,2*t.halfSize,D),o.applyToMinMax(z,D),h.rayBoxTest(e.origin,e.direction,z,D)}_intersectsObject(e,t){const o=this.objectToBoundingSphere(t);return!(o[3]>0)||i.intersectsRay(o,e)}_intersectsObjectWithOffset(e,t,o){const n=this.objectToBoundingSphere(t);return!(n[3]>0)||i.intersectsRay(o.applyToBoundingSphere(n),e)}_forEachNode(e,t){let o=d.acquire().init(e);const n=[o];for(;0!==n.length;){if(o=n.pop(),t(o)&&!o.isLeaf())for(let e=0;e<o.node.children.length;e++){o.node.children[e]&&n.push(d.acquire().init(o).advance(e))}d.release(o)}}_forEachNodeDepthOrdered(e,t,o,n=a.DepthOrder.FRONT_TO_BACK){let r=d.acquire().init(e);const s=[r];for(m(o,n,F);0!==s.length;){if(r=s.pop(),t(r)&&!r.isLeaf())for(let e=7;e>=0;--e){const t=F[e];r.node.children[t]&&s.push(d.acquire().init(r).advance(t))}d.release(r)}}_remove(e,t,o){E.clear();const n=o.advanceTo(t,((e,t)=>{E.push(e.node),E.push(t)}))?o.node.terminals:o.node.residents;if(n.removeUnordered(e),0===n.length)for(let r=E.length-2;r>=0;r-=2){const e=E.data[r],t=E.data[r+1];if(!this._purge(e,t))break}}_nodeIsEmpty(e){if(0!==e.terminals.length)return!1;if(null!==e.residents)return 0===e.residents.length;for(let t=0;t<e.children.length;t++)if(e.children[t])return!1;return!0}_purge(e,o){return o>=0&&(e.children[o]=null),!!this._nodeIsEmpty(e)&&(null===e.residents&&(e.residents=new t({shrink:!0})),!0)}_add(e,t){t.advanceTo(this.objectToBoundingSphere(e))?t.node.terminals.push(e):(t.node.residents.push(e),t.node.residents.length>this._maximumObjectsPerNode&&t.depth<this._maximumDepth&&this._split(t))}_split(e){const t=e.node.residents;e.node.residents=null;for(let o=0;o<t.length;o++){const n=d.acquire().init(e);this._add(t.at(o),n),d.release(n)}}_grow(e,t){if(0!==t&&(f(e,t,(e=>this.objectToBoundingSphere(e)),B),b(B[3])&&!this._fitsInsideTree(B)))if(this._nodeIsEmpty(this._root.node))i.copy(B,this._root.bounds),this._root.halfSize=1.25*this._root.bounds[3],this._root.updateBoundsRadiusFromHalfSize();else{const e=this._rootBoundsForRootAsSubNode(B);this._placingRootViolatesMaxDepth(e)?this._rebuildTree(B,e):this._growRootAsSubNode(e),d.release(e)}}_rebuildTree(e,t){o.copy(R,t.bounds),R[3]=t.halfSize,f([e,R],2,(e=>e),y);const n=d.acquire().init(this._root);this._root.initFrom(null,y,y[3]),this._root.increaseHalfSize(1.25),this._forEachNode(n,(e=>(this.add(e.node.terminals.data,e.node.terminals.length),null!==e.node.residents&&this.add(e.node.residents.data,e.node.residents.length),!0))),d.release(n)}_placingRootViolatesMaxDepth(e){const t=Math.log(e.halfSize/this._root.halfSize)*Math.LOG2E;let o=0;return this._forEachNode(this._root,(e=>(o=Math.max(o,e.depth),o+t<=this._maximumDepth))),o+t>this._maximumDepth}_rootBoundsForRootAsSubNode(e){const t=e[3],o=e;let n=-1/0;const r=this._root.bounds,s=this._root.halfSize;for(let h=0;h<3;h++){const e=r[h]-s-(o[h]-t),i=o[h]+t-(r[h]+s),a=Math.max(0,Math.ceil(e/(2*s))),d=Math.max(0,Math.ceil(i/(2*s)))+1,l=2**Math.ceil(Math.log(a+d)*Math.LOG2E);n=Math.max(n,l),A[h].min=a,A[h].max=d}for(let h=0;h<3;h++){let e=A[h].min,t=A[h].max;const o=(n-(e+t))/2;e+=Math.ceil(o),t+=Math.floor(o);const i=r[h]-s-e*s*2;j[h]=i+(t+e)*s}const i=n*s;return j[3]=i*O,d.acquire().initFrom(null,j,i,0)}_growRootAsSubNode(e){const t=this._root.node;o.copy(B,this._root.bounds),B[3]=this._root.halfSize,this._root.init(e),e.advanceTo(B,null,!0),e.node.children=t.children,e.node.residents=t.residents,e.node.terminals=t.terminals}_shrink(){for(;;){const e=this._findShrinkIndex();if(-1===e)break;this._root.advance(e),this._root.depth=0}}_findShrinkIndex(){if(0!==this._root.node.terminals.length||this._root.isLeaf())return-1;let e=null;const t=this._root.node.children;let o=0,n=0;for(;n<t.length&&null==e;)o=n++,e=t[o];for(;n<t.length;)if(t[n++])return-1;return o}_isDegenerate(e){return!b(this.objectToBoundingSphere(e)[3])}_fitsInsideTree(e){const t=this._root.bounds,o=this._root.halfSize;return e[3]<=o&&e[0]>=t[0]-o&&e[0]<=t[0]+o&&e[1]>=t[1]-o&&e[1]<=t[1]+o&&e[2]>=t[2]-o&&e[2]<=t[2]+o}toJSON(){const{maximumDepth:e,maximumObjectsPerNode:t,_objectCount:o}=this,n=this._nodeToJSON(this._root.node);return{maximumDepth:e,maximumObjectsPerNode:t,objectCount:o,root:{bounds:this._root.bounds,halfSize:this._root.halfSize,depth:this._root.depth,node:n}}}_nodeToJSON(e){const t=e.children.map((e=>e?this._nodeToJSON(e):null)),o=e.residents?.map((e=>this.objectToBoundingSphere(e))),n=e.terminals?.map((e=>this.objectToBoundingSphere(e)));return{children:t,residents:o,terminals:n}}static fromJSON(e){const t=new a((e=>e),{maximumDepth:e.maximumDepth,maximumObjectsPerNode:e.maximumObjectsPerNode});return t._objectCount=e.objectCount,t._root.initFrom(e.root.node,e.root.bounds,e.root.halfSize,e.root.depth),t}}class d{constructor(){this.bounds=i.create(),this.halfSize=0,this.initFrom(null,null,0,0)}init(e){return this.initFrom(e.node,e.bounds,e.halfSize,e.depth)}initFrom(e,t,o,n=this.depth){return this.node=null!=e?e:d.createEmptyNode(),null!=t&&i.copy(t,this.bounds),this.halfSize=o,this.depth=n,this}increaseHalfSize(e){this.halfSize*=e,this.updateBoundsRadiusFromHalfSize()}updateBoundsRadiusFromHalfSize(){this.bounds[3]=this.halfSize*O}advance(e){let t=this.node.children[e];t||(t=d.createEmptyNode(),this.node.children[e]=t),this.node=t,this.halfSize/=2,this.depth++;const o=g[e];return this.bounds[0]+=o[0]*this.halfSize,this.bounds[1]+=o[1]*this.halfSize,this.bounds[2]+=o[2]*this.halfSize,this.updateBoundsRadiusFromHalfSize(),this}advanceTo(e,t,o=!1){for(;;){if(this.isTerminalFor(e))return t&&t(this,-1),!0;if(this.isLeaf()){if(!o)return t&&t(this,-1),!1;this.node.residents=null}const n=this._childIndex(e);t&&t(this,n),this.advance(n)}}isLeaf(){return null!=this.node.residents}isTerminalFor(e){return e[3]>this.halfSize/2}_childIndex(e){const t=this.bounds;return(t[0]<e[0]?1:0)+(t[1]<e[1]?2:0)+(t[2]<e[2]?4:0)}static createEmptyNode(){return{children:[null,null,null,null,null,null,null,null],terminals:new t({shrink:!0}),residents:new t({shrink:!0})}}static acquire(){return d._pool.acquire()}static release(e){d._pool.release(e)}static clearPool(){d._pool.prune()}}function l(e,t){e[0]=Math.min(e[0],t[0]-t[3]),e[1]=Math.min(e[1],t[1]-t[3]),e[2]=Math.min(e[2],t[2]-t[3])}function u(e,t){e[0]=Math.max(e[0],t[0]+t[3]),e[1]=Math.max(e[1],t[1]+t[3]),e[2]=Math.max(e[2],t[2]+t[3])}function c(e,t,o){o[0]=e[0]+t,o[1]=e[1]+t,o[2]=e[2]+t}function f(e,t,n,r){if(1===t){const t=n(e[0]);i.copy(t,r)}else{z[0]=1/0,z[1]=1/0,z[2]=1/0,D[0]=-1/0,D[1]=-1/0,D[2]=-1/0;for(let o=0;o<t;o++){const t=n(e[o]);b(t[3])&&(l(z,t),u(D,t))}o.lerp(r,z,D,.5),r[3]=Math.max(D[0]-z[0],D[1]-z[1],D[2]-z[2])/2}}function m(e,t,o){if(!C.length)for(let n=0;n<8;++n)C.push({index:0,distance:0});for(let n=0;n<8;++n){const o=g[n];C.data[n].index=n,C.data[n].distance=p(e,t,o)}C.sort(((e,t)=>e.distance-t.distance));for(let n=0;n<8;++n)o[n]=C.data[n].index}function _(e,t){let o,n=1/0;for(let r=0;r<8;++r){const s=p(e,t,S[r]);s<n&&(n=s,o=S[r])}return o}function p(e,t,o){return t*(e[0]*o[0]+e[1]*o[1]+e[2]*o[2])}function b(e){return!isNaN(e)&&e!==-1/0&&e!==1/0&&e>0}d._pool=new e(d),function(e){var t;(t=e.DepthOrder||(e.DepthOrder={}))[t.FRONT_TO_BACK=1]="FRONT_TO_BACK",t[t.BACK_TO_FRONT=-1]="BACK_TO_FRONT"}(a||(a={}));const g=[n.fromValues(-1,-1,-1),n.fromValues(1,-1,-1),n.fromValues(-1,1,-1),n.fromValues(1,1,-1),n.fromValues(-1,-1,1),n.fromValues(1,-1,1),n.fromValues(-1,1,1),n.fromValues(1,1,1)],S=[n.fromValues(-1,-1,-1),n.fromValues(-1,-1,1),n.fromValues(-1,1,-1),n.fromValues(-1,1,1),n.fromValues(1,-1,-1),n.fromValues(1,-1,1),n.fromValues(1,1,-1),n.fromValues(1,1,1)],O=Math.sqrt(3),x=[null];function N(e){return x[0]=e,x}const j=i.create(),T=n.create(),z=n.create(),D=n.create(),E=new t,M=i.create(),B=i.create(),R=i.create(),y=i.create(),A=[{min:0,max:0},{min:0,max:0},{min:0,max:0}],C=new t,F=[0,0,0,0,0,0,0,0];return a}));
