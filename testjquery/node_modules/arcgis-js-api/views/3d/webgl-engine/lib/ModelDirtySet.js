/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/MapUtils","../../../../core/uid","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/has","../../../../core/accessorSupport/decorators/subclass","./ModelDirtyTypes","./Util"],(function(e,t,r,o,s,i,d,a,n,c,y){"use strict";class h{constructor(e,t,r,o){this.operation=e,this.geometry=t,this.states=r,this.sync=o}}let m=class extends t{constructor(e){super(e),this._residentGeomRecords=new Map,this._dirtyGeomRecords=new Map,this.dirty=!1}commitLayer(e,t){const r=this._dirtyGeomRecords.get(e);r&&(r.forEach(((r,o)=>{const s=this._ensureGeomRecord(e,o);r.forEach((({geometry:e,operation:r,states:i},d)=>{let a=!1;if(r===c.DirtyOperation.UPDATE){const r=s.get(d);if(r){if(i&c.DirtyState.TRANSFORMATION){const t=this.model.getObject(o);this.model.updateRenderGeometryTransformation(t,e,r)&&(a=!0)}a||t.updates.push({renderGeometry:r,updateType:i})}else y.assert(!1,"ModelDirtySet.commitLayer: invalid update")}if(r===c.DirtyOperation.REMOVE||a){const e=s.get(d);e?(t.removes.push(e),s.delete(d)):r===c.DirtyOperation.REMOVE&&y.assert(!1,"ModelDirtySet.commitLayer: invalid remove")}if(r===c.DirtyOperation.ADD||a){const r=this.model.getObject(o);if(null!=r){const o=this.model.getRenderGeometry(r,e);t.adds.push(o),s.set(d,o)}}})),0===s.size&&this._residentGeomRecords.get(e).delete(o)})),0===this._residentGeomRecords.get(e).size&&this._residentGeomRecords.delete(e),this._dirtyGeomRecords.delete(e),this.dirty=this._hasDirtyGeometryRecords)}commitSyncUpdates(e,t){const r=this._dirtyGeomRecords.get(e);r&&r.forEach(((r,o)=>{const s=this._ensureGeomRecord(e,o);r.forEach((({geometry:e,operation:r,states:i,sync:d},a)=>{let n=!1;if(r===c.DirtyOperation.UPDATE&&d){const r=s.get(a);if(r){if(i&c.DirtyState.TRANSFORMATION){const t=this.model.getObject(o);this.model.updateRenderGeometryTransformation(t,e,r)&&(n=!0)}n||t.updates.push({renderGeometry:r,updateType:i})}else y.assert(!1,"ModelDirtySet.commitSyncUpdates: invalid update")}}))}))}getResidentRenderGeometries(e,t){const r=this._residentGeomRecords.get(e);r&&r.forEach((e=>e.forEach((e=>t.push(e)))))}_objectStateChanged(e,t){for(const r of t.geometries)this._updateOrCreateDirtyRecord(t,r,null,c.DirtyOperation.UPDATE,e)}visibilityChanged(e){this._objectStateChanged(c.DirtyState.VISIBILITY,e)}highlightChanged(e){this._objectStateChanged(c.DirtyState.HIGHLIGHT,e)}occlusionChanged(e){this._objectStateChanged(c.DirtyState.OCCLUDEE,e)}attributesChanged({object:e,geometry:t,sync:r}){this._updateOrCreateDirtyRecord(e,t,null,c.DirtyOperation.UPDATE,c.DirtyState.GEOMETRY,r)}layerAdded(e){e.objects.forAll((t=>this._layerObjectAdded(e,t)))}layerRemoved(e){e.objects.forAll((t=>this._layerObjectRemoved(e,t)))}layerObjectAdded(e){this._layerObjectAdded(e.layer,e.object)}_layerObjectAdded(e,t){const r=e.id;for(const o of t.geometries)this._geometryAdded(t,o,r)}layerObjectRemoved(e){this._layerObjectRemoved(e.layer,e.object)}layerObjectsAdded(e){for(const t of e.objects)this._layerObjectAdded(e.layer,t)}layerObjectsRemoved(e){for(const t of e.objects)this._layerObjectRemoved(e.layer,t)}_layerObjectRemoved(e,t){const r=e.id;for(const o of t.geometries)this._geometryRemoved(t,o,r)}transformationChanged(e){const t=this._getParentLayerId(e),r=e.id;this._ensureGeomRecord(t,r).forEach((r=>{this._updateOrCreateDirtyRecord(e,r.geometry,t,c.DirtyOperation.UPDATE,c.DirtyState.TRANSFORMATION)}))}shaderTransformationChanged(e){const t=this._getParentLayerId(e),r=e.id;this._ensureGeomRecord(t,r).forEach((t=>{t.objectShaderTransformationChanged(e.shaderTransformation)}))}geometryAdded(e){this._geometryAdded(e.object,e.geometry)}_geometryAdded(e,t,r=null){this._updateOrCreateDirtyRecord(e,t,r,c.DirtyOperation.ADD)}geometryRemoved(e){this._geometryRemoved(e.object,e.geometry)}_geometryRemoved(e,t,r=null){this._updateOrCreateDirtyRecord(e,t,r,c.DirtyOperation.REMOVE)}_updateOrCreateDirtyRecord(e,t,r,o,s=c.DirtyState.NONE,i=!1){r=r??this._getParentLayerId(e);const d=e.id,a=t.id,n=this._ensureDirtyRecord(r,d),m=n.get(a);if(m){const e=m.operation;e===c.DirtyOperation.REMOVE&&o===c.DirtyOperation.ADD&&m.states!==c.DirtyState.NONE?m.operation=c.DirtyOperation.UPDATE:e===c.DirtyOperation.REMOVE&&o===c.DirtyOperation.ADD||e===c.DirtyOperation.ADD&&o===c.DirtyOperation.REMOVE?n.delete(a):e!==c.DirtyOperation.UPDATE||o!==c.DirtyOperation.REMOVE&&o!==c.DirtyOperation.UPDATE?(y.assert((e===c.DirtyOperation.REMOVE||e===c.DirtyOperation.ADD)&&o===c.DirtyOperation.UPDATE,"ModelDirtySet.objectGeometryAdded: inconsistent state"),m.states|=s):(m.operation=o,m.states|=s),m.sync=m.sync||i}else n.set(a,new h(o,t,s,i));this.dirty=this._hasDirtyGeometryRecords}_ensureGeomRecord(e,t){let r=this._residentGeomRecords.get(e);r||(r=new Map,this._residentGeomRecords.set(e,r));let o=r.get(t);return o||(o=new Map,r.set(t,o)),o}get _hasDirtyGeometryRecords(){return r.someMap(this._dirtyGeomRecords,(e=>r.someMap(e,(e=>e&&e.size>0))))}_ensureDirtyRecord(e,t){let r=this._dirtyGeomRecords.get(e);r||(r=new Map,this._dirtyGeomRecords.set(e,r));let o=r.get(t);return o||(o=new Map,r.set(t,o)),o}_getParentLayerId(e){return e.parentLayer?e.parentLayer.id:o.NullUID}formatDebugInfo(){const e=["ADD","UPD",void 0,"REM"];let t="";return this._dirtyGeomRecords.forEach(((r,o)=>{r.forEach(((r,s)=>{t.length>0&&(t+="\n"),t+=o+"."+s;const i=[];r.forEach((e=>{const t=e.operation;i[t]||(i[t]=[]),i[t].push(e.geometry.id)}));for(let o=0;o<i.length;o++)if(i[o]){t+=" "+e[o-1]+": ";for(let e=0;e<i[o].length;e++)t+=i[o][e]+", "}}))})),t}get test(){const e=this;return{get residentLayerCount(){return e._residentGeomRecords.size},get residentObjectCount(){return Array.from(e._residentGeomRecords.values()).reduce(((e,t)=>e+t.size),0)},commit:t=>e._dirtyGeomRecords.forEach(((r,o)=>e.commitLayer(o,t)))}}};e.__decorate([s.property({constructOnly:!0})],m.prototype,"model",void 0),e.__decorate([s.property()],m.prototype,"dirty",void 0),m=e.__decorate([n.subclass("esri.views.3d.webgl-engine.lib.ModelDirtySet")],m);return m}));
