/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../../core/arrayUtils","../../../../../geometry/support/buffer/BufferView","../Util","../VertexAttribute","./BackedBufferObject"],(function(t,e,i,s,r,a){"use strict";class n{constructor(t){this.modelOriginHi=t.getField(r.VertexAttribute.INSTANCEMODELORIGINHI,i.BufferViewVec3f),this.modelOriginLo=t.getField(r.VertexAttribute.INSTANCEMODELORIGINLO,i.BufferViewVec3f),this.model=t.getField(r.VertexAttribute.INSTANCEMODEL,i.BufferViewMat3f),this.modelNormal=t.getField(r.VertexAttribute.INSTANCEMODELNORMAL,i.BufferViewMat3f),this.featureAttribute=t.getField(r.VertexAttribute.INSTANCEFEATUREATTRIBUTE,i.BufferViewVec4f),this.color=t.getField(r.VertexAttribute.INSTANCECOLOR,i.BufferViewVec4u8),this.objectAndLayerIdColor=t.getField(r.VertexAttribute.INSTANCEOBJECTANDLAYERIDCOLOR,i.BufferViewVec4u8)}}class h{constructor(t,e){this._headIndex=0,this._tailIndex=0,this._firstIndex=null,this._captureFirstIndex=!0,this._updating=!1,this._prevHeadIndex=0,this._resized=!1,this._rctx=t,this._instanceBufferLayout=e,this._elementSize=e.stride,this._capacity=1}destroy(){this._buffer&&this._buffer.destroy()}get buffer(){return this._buffer.buffer}get view(){return this._view}get capacity(){return this._capacity}get size(){const t=this._headIndex,e=this._tailIndex;return t>=e?t-e:t+this._capacity-e}get isEmpty(){return this._headIndex===this._tailIndex}get isFull(){return this._tailIndex===(this._headIndex+1)%this._capacity}get headIndex(){return this._headIndex}get tailIndex(){return this._tailIndex}get firstIndex(){return this._firstIndex}get usedMemory(){return this._buffer?.usedMemory??0}reset(){this._headIndex=0,this._tailIndex=0,this._firstIndex=null}startUpdateCycle(){this._captureFirstIndex=!0}beginUpdate(){s.assert(!this._updating,"already updating"),this._updating=!0,this._prevHeadIndex=this._headIndex}endUpdate(){s.assert(this._updating,"not updating"),this.size<e.ReallocShrinkTreshold*this.capacity&&this._shrink(),this._resized?(this._buffer.transferAll(),this._resized=!1):this._transferRange(this._prevHeadIndex,this._headIndex),this._updating=!1}allocateHead(){s.assert(this._updating,"not updating"),this.isFull&&this._grow();const t=this.headIndex;return this._captureFirstIndex&&(this._firstIndex=t,this._captureFirstIndex=!1),this._incrementHead(),s.assert(this._headIndex!==this._tailIndex,"invalid pointers"),t}freeTail(){s.assert(this._updating,"not updating"),s.assert(this.size>0,"invalid size");const t=this._tailIndex===this._firstIndex;this._incrementTail(),t&&(this._firstIndex=this._tailIndex)}_grow(){const t=Math.max(d,Math.floor(this._capacity*e.ReallocGrowthFactor));this._resize(t)}_shrink(){const t=Math.max(d,Math.floor(this._capacity*e.ReallocShrinkFactor));this._resize(t)}_resize(t){if(s.assert(this._updating,"not updating"),t===this._capacity)return;const e=new a(this._rctx,this._elementSize,t);if(this._buffer){this._firstIndex&&(this._firstIndex=(this._firstIndex+this._capacity-this._tailIndex)%this._capacity);const t=this.size,i=this._compactInstances(e);s.assert(i===t,"invalid compaction"),this._buffer.destroy(),this._tailIndex=0,this._headIndex=i,this._prevHeadIndex=0}this._resized=!0,this._capacity=t,this._buffer=e,this._view=new n(this._instanceBufferLayout.createView(this._buffer.array))}_compactInstances(t){const e=this._headIndex,i=this._tailIndex;return i<e?(this._buffer.copyRange(i,e,t),e-i):i>e?(this._buffer.copyRange(i,this._capacity,t),e>0&&this._buffer.copyRange(0,e,t,this._capacity-i),e+(this._capacity-i)):0}_incrementHead(t=1){this._headIndex=(this._headIndex+t)%this._capacity}_incrementTail(t=1){this._tailIndex=(this._tailIndex+t)%this._capacity}_transferRange(t,e){t<e?this._buffer.transferRange(t,e):t>e&&(e>0&&this._buffer.transferRange(0,e),this._buffer.transferRange(t,this._capacity))}}const d=64;t.RenderInstanceData=h,t.RenderInstanceDataView=n,t.initialCapacity=d,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
