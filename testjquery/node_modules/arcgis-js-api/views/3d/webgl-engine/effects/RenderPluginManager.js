/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/PooledArray","../../../../core/promiseUtils","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/has","../../../../core/accessorSupport/decorators/subclass","../core/shaderLibrary/ShaderOutput","../lib/basicInterfaces","../lib/depthRange","../lib/Material","../lib/RenderSlot"],(function(e,r,t,n,s,o,i,u,d,a,l,c,h,p,g){"use strict";function _(e){return"prepareTechnique"in e}function x(e){return"prepareTechniques"in e}e.RenderPluginManager=class extends t{constructor(e){super({}),this._context=e,this._renderPlugins=new n,this._slots=new Array;for(let r=0;r<g.RenderSlot.MAX_SLOTS;++r)this._slots[r]=[]}normalizeCtorArgs(){return{}}add(e,r){const t=()=>{if(r?.aborted)throw e.uninitializeRenderContext(),s.createAbortError();this._renderPlugins.push(e),e.produces.forEach(((r,t)=>{this._slots[t].push(e)})),this._context.requestRender(),this.notifyChange("updating")},n=e.initializeRenderContext(this._context,r);if(s.isPromiseLike(n))return n.then(t);t()}remove(e){if(null!=this._renderPlugins.removeUnordered(e)){for(let r=0;r<this._slots.length;++r)this._slots[r]=this._slots[r].filter((r=>r!==e));e.uninitializeRenderContext(),this._context.requestRender(),this.notifyChange("updating")}}prepareRender(){this._renderPlugins.forAll((e=>{e.prepareRender&&e.prepareRender(this._context.renderContext)}))}updateAnimation(e){let r=!1;return this._renderPlugins.forAll((t=>{t.updateAnimation&&(r=t.updateAnimation(e)||r)})),r}renderFeatureChanged(){this._renderPlugins.forAll((e=>{e.renderFeatureChanged&&e.renderFeatureChanged()}))}prepare(e){this._context.renderContext.bindParameters.slot=e,this._slots[e].forEach((r=>{const t=r.produces.get(e);t&&t(l.ShaderOutput.Color)&&(_(r)&&r.prepareTechnique(this._context.renderContext),x(r)&&r.prepareTechniques(this._context.renderContext))}))}_getRenderables(e){this._context.renderContext.bindParameters.slot=e;const r=new Map;return this._slots[e].forEach((t=>{const n=t.produces.get(e);if(n&&n(l.ShaderOutput.Color)&&(!t.isDecoration||this._context.renderContext.bindParameters.decorations!==c.Decorations.OFF))if(_(t)){const e=t.prepareTechnique(this._context.renderContext);null!=e&&r.set(t,e)}else if(x(t)){const e=t.prepareTechniques(this._context.renderContext);null!=e&&r.set(t,e)}else r.set(t,null)})),r}render(e,r=null,t=null){return this._getRenderables(e).forEach(((e,n)=>t=n.renderNode(this._context.renderContext,e,r,t))),t}renderComposition(e,r){const t=this._getRenderables(e);let n=null;return t.forEach(((e,t)=>{const s=t.renderNode(this._context.renderContext,e,r,null);n?.release(),n=s,r.composite=n})),n}queryDepthRange(e){const r=new h.DepthRange;return this._renderPlugins.forAll((t=>{const n=t.queryDepthRange?.(e);h.union(r,n)})),r}get updating(){return this._renderPlugins.some((e=>e.running))}produces(e,r=l.ShaderOutput.Color){return this._slots[e].some((t=>{const n=t.produces.get(e);return!!n&&n(r)}))}consumes(e){return this._renderPlugins.some((r=>r.consumes().required.includes(e)))}get hasDecorations(){return this._renderPlugins.some((e=>e.isDecoration))}get renderOccludedFlags(){return this._renderPlugins.reduce(((e,r)=>e|r.renderOccludedFlags),p.RenderOccludedFlag.None)}get usedMemory(){return this._renderPlugins.reduce(((e,r)=>e+(r.usedMemory??0)),0)}},r.__decorate([o.property({readOnly:!0})],e.RenderPluginManager.prototype,"updating",null),e.RenderPluginManager=r.__decorate([a.subclass("esri.views.3d.webgl-engine.lib.RenderPluginManager")],e.RenderPluginManager),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
