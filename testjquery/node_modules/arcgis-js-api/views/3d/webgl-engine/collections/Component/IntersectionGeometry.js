/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/support/aaBoundingBox","../../../../../geometry/support/FloatArray","../../../../../geometry/support/Indices","./ComponentIntersectionData","../../lib/Attribute","../../lib/ComponentUtils","../../materials/internal/MaterialUtil"],(function(t,n,e,s,i,o,r,c,a){"use strict";class p{constructor(t,n){this._components=n,this._indices=t.indices?i.compactIndices(t.indices):i.getContinuousIndexArray(t.positions.length/3),this._positions=t.positions,this._componentIntersectionData=new Array(n.count)}destroy(){this._positions=null,this._indices=null,this._componentIntersectionData.length=0,this._perComponentAabbs=null}getComponentAabb(t,n){this._perComponentAabbs||(this._perComponentAabbs=this._computePerComponentAabbs());for(let e=0;e<6;e++)n[e]=this._perComponentAabbs[6*t+e];return n}getComponentPositions(t,n){n.indices=this._indices,n.data=this._positions,n.stride=3,n.startIndex=this._components.offsets[t],n.endIndex=this._components.offsets[t+1]}intersect(n,e,s,i,p,l,u){const _=new r.Vertices(this._positions,3),b=this._indices,d=this._components.offsets,f=a.computeInvDir(n,e,m),A=n[2],I=e[2];this._components.visibility.forEachComponent((r=>{if(!c.getVisibility(this._components.pickability,r))return!0;const m=this.getComponentAabb(r,h);if(null!=l){const t=l[r];null!=p?p.componentOffset=t:(n[2]=A-t,e[2]=I-t)}if(null!=p&&p.applyToAabb(m),!a.intersectAabbInvDir(m,n,f,s))return!0;const g=d[r]/3,C=d[r+1]/3,y=(n,e,s)=>u(r,n,t.transformMat3(e,e,i),s);return null==p&&C-g>o.componentMinimalSizeForIntersectionData?(null==this._componentIntersectionData[r]&&(this._componentIntersectionData[r]=new o.ComponentIntersectionData(this._indices,g,C,_)),this._componentIntersectionData[r].intersectRay({r0:n,r1:e},y)):a.intersectTriangles(n,e,g,C,b,_,void 0,p,y),!0}))}_computePerComponentAabbs(){const t=this._components.count,n=s.newFloatArray(6*t),e=this._indices,i=this._positions,o=this._components.offsets;let r=0;for(let s=0;s<t;s++){const t=o[s],c=o[s+1];let a=1/0,p=1/0,m=1/0,h=-1/0,l=-1/0,u=-1/0;for(let n=t;n<c;n++){const t=3*e[n],s=i[t],o=i[t+1],r=i[t+2];a=Math.min(a,s),p=Math.min(p,o),m=Math.min(m,r),h=Math.max(h,s),l=Math.max(l,o),u=Math.max(u,r)}n[r++]=a,n[r++]=p,n[r++]=m,n[r++]=h,n[r++]=l,n[r++]=u}return n}get positions(){return this._positions}get indices(){return this._indices}}const m=n.create(),h=e.create();return p}));
