/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../../../chunks/tslib.es6","../../../../../../core/maybe","../../../../../../chunks/mat3","../../../../../../chunks/mat3f32","../../../../../../chunks/mat3f64","../../../../../../chunks/vec3","../../../../../../chunks/vec3f64","../../../../../../chunks/vec4","../../../../../../chunks/vec4f64","../../../../layers/support/symbolColorUtils","../../../../terrain/OverlayContent","./ComponentTechnique","./ComponentTechniqueConfiguration","./shader/ComponentData.glsl","./shader/VertexDiscardByOpacity.glsl","../../../core/material/MaterialBase","../../../core/renderPasses/AllRenderPasses","../../../core/shaderLibrary/ShaderOutput","../../../core/shaderLibrary/attributes/NormalAttribute.glsl","../../../core/shaderLibrary/shading/Normals.glsl","../../../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl","../../../core/shaderLibrary/util/AlphaCutoff","../../../core/shaderLibrary/util/EllipsoidMode","../../../core/util/TwoVectorPosition","../../../lib/basicInterfaces","../../../lib/TransparencyPassType","../../../materials/pbrUtils"],(function(e,t,r,a,o,s,n,i,l,u,d,p,c,h,m,y,M,g,T,x,v,C,b,P,_,S,f,O){"use strict";class w extends M.MaterialBase{constructor(e,t){super(),this.toMapSpace=t,this.baseColor=u.fromValues(1,1,1,1),this.usePBR=!1,this.hasParametersFromSource=!1,this.mrrFactors=i.fromArray(O.defaultAdvancedMRRFactors),this.emissiveFactor=i.fromValues(0,0,0),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null,this.objectOpacity=1,this.commonMaterialParameters=new N,this.componentParameters=new q,this.textureAlphaCutoff=b.defaultMaskAlphaCutoff,this.alphaDiscardMode=S.AlphaDiscardMode.Opaque,this.isIntegratedMesh=!1,this.polygonOffsetEnabled=!1,this.ellipsoidMode=P.EllipsoidMode.Earth,this.hasOccludees=!1,this._techniqueConfiguration=new h.ComponentTechniqueConfiguration;const r=new _.TwoVectorPosition(e.position),n=o.clone(e.rotationScale);a.invert(n,n),this.transformNormalGlobalFromModel=s.clone(a.transpose(n,n)),this.transformWorldFromModelTL=r.low,this.transformWorldFromModelTH=r.high,this.transformWorldFromModelRS=e.rotationScale}dispose(){this._technique=r.releaseMaybe(this._technique),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null}get texture(){return null!=this.baseColorTexture?this.baseColorTexture.glTexture:null}get textureMetallicRoughness(){return null!=this.metallicRoughnessTexture?this.metallicRoughnessTexture.glTexture:null}get textureEmissive(){return null!=this.emissionTexture?this.emissionTexture.glTexture:null}get textureOcclusion(){return null!=this.occlusionTexture?this.occlusionTexture.glTexture:null}get textureNormal(){return null!=this.normalTexture?this.normalTexture.glTexture:null}prepareTechnique(e,t,r,a){const o=this._techniqueConfiguration;o.hasVertexColors=a.colors,o.hasNormals=a.normals,o.textureCoordinateType=a.textureCoordinates,o.hasMetallicRoughnessTexture=null!=this.metallicRoughnessTexture,o.hasEmissionTexture=null!=this.emissionTexture,o.hasOcclusionTexture=null!=this.occlusionTexture,o.hasNormalTexture=null!=this.normalTexture,o.transparencyPassType=t.identifier===g.RenderPassIdentifier.Material&&null!=r.transparencyPassType?r.transparencyPassType:f.TransparencyPassType.NONE,o.multipassEnabled=t.identifier===g.RenderPassIdentifier.Material&&r.multipassEnabled,o.cullAboveGround=t.identifier===g.RenderPassIdentifier.Material&&r.multipassTerrain.cullAboveGround,o.ellipsoidMode=this.ellipsoidMode,o.componentData=this.componentParameters.type,o.cullFace=this.commonMaterialParameters.cullFace,o.doubleSidedMode=this.commonMaterialParameters.doubleSided?v.NormalsDoubleSidedMode.View:v.NormalsDoubleSidedMode.None,o.hasColorTexture=null!=this.baseColorTexture;const s=this._computeWhichMaterialPass();if(o.blendingEnabled=s===D.Transparent||s===D.OpaqueAndTransparent,o.alphaDiscardMode=this.alphaDiscardMode,o.integratedMeshMode=this.isIntegratedMesh?B(r)?k(r)?h.IntegratedMeshMode.ColorOverlayWithWater:h.IntegratedMeshMode.ColorOverlay:h.IntegratedMeshMode.NoOverlay:h.IntegratedMeshMode.None,o.hasPolygonOffset=this.polygonOffsetEnabled,o.pbrMode=o.integratedMeshMode===h.IntegratedMeshMode.ColorOverlayWithWater?C.PBRMode.WaterOnIntegratedMesh:this.usePBR?this.hasParametersFromSource?C.PBRMode.Schematic:C.PBRMode.Normal:C.PBRMode.Disabled,o.normalType=o.integratedMeshMode===h.IntegratedMeshMode.None?o.hasNormals?x.NormalType.Compressed:x.NormalType.ScreenDerivative:x.NormalType.Ground,o.hasSlicePlane=null!=r.slicePlane&&this.commonMaterialParameters.hasSlicePlane,t.identifier===g.RenderPassIdentifier.ShadowMap)o.output=T.ShaderOutput.Shadow,o.vertexDiscardMode=y.VertexDiscardMode.None;else if(t.identifier===g.RenderPassIdentifier.Highlight)o.output=T.ShaderOutput.Highlight,o.vertexDiscardMode=y.VertexDiscardMode.None;else{switch(s===D.OpaqueAndTransparent?o.vertexDiscardMode=t.transparent?y.VertexDiscardMode.Opaque:y.VertexDiscardMode.Transparent:o.vertexDiscardMode=y.VertexDiscardMode.None,o.output=t.output,o.receiveAmbientOcclusion=!1,o.receiveShadows=!1,t.output){case T.ShaderOutput.Color:o.receiveAmbientOcclusion=null!=r.ssao,o.hasOccludees=r.hasOccludees,o.receiveShadows=r.shadowMap.ready,o.hasScreenSpaceReflections=null!=r.ssr.lastFrameColor,o.hasCloudsReflections=null!=r.cloudsFade.data;break;case T.ShaderOutput.Alpha:o.hasOccludees=r.hasOccludees;break;case T.ShaderOutput.ObjectAndLayerIdColor:o.objectAndLayerIdColor=!0}o.snowCover=this.hasSnowCover(r)}return this._technique=e.releaseAndAcquire(c.ComponentTechnique,o,this._technique),this._setClean(),this._technique}hasSnowCover(e){return null!=e.weather&&e.weatherVisible&&"snowy"===e.weather.type&&"enabled"===e.weather.snowCover}submit(t,r,a){if(0===this.objectOpacity)return;const o=a.renderable.geometry,s=a.components,n=a.renderable.meta.cameraDepthSquared,i=s.geometryRanges,l=s.highlightRanges,u=s.defaultShadowMapRanges;switch(this._computeWhichMaterialPass()){case D.Opaque:t.materialOpaque.submitDraw(this,o,i,n);break;case D.Transparent:t.materialTransparent.submitDraw(this,o,i,n);break;case D.OpaqueAndTransparent:t.materialOpaque.submitDraw(this,o,i,n),t.materialTransparent.submitDraw(this,o,i,n);break;case D.IntegratedMesh:t.materialIntegratedMesh.submitDraw(this,o,i,n),I(r)&&t.highlightIntegratedMesh.submitDraw(this,o,i,n)}const d=this.componentParameters.castShadows!==e.ComponentParameterSummary.None;d&&t.shadowMap.submitDraw(this,o,i,n),null!=l&&(t.highlight.submitDraw(this,o,l,n),d&&t.highlightShadowMap.submitDraw(this,o,l,n)),d&&null!=u&&t.defaultShadowMap.submitDraw(this,o,u,n)}_computeWhichMaterialPass(){return this.isIntegratedMesh?D.IntegratedMesh:this.objectOpacity<1?D.Transparent:this.componentParameters.opaqueOverride===e.ComponentParameterSummary.All?D.Opaque:this.baseColor[3]<1||this.alphaDiscardMode===S.AlphaDiscardMode.Blend||this.alphaDiscardMode===S.AlphaDiscardMode.MaskBlend?D.Transparent:this.componentParameters.transparent===e.ComponentParameterSummary.None?D.Opaque:this.componentParameters.transparent===e.ComponentParameterSummary.All?D.Transparent:D.OpaqueAndTransparent}}var D,A;t.__decorate([M.parameter({vectorOps:l.vec4})],w.prototype,"baseColor",void 0),t.__decorate([M.parameter()],w.prototype,"usePBR",void 0),t.__decorate([M.parameter()],w.prototype,"hasParametersFromSource",void 0),t.__decorate([M.parameter({vectorOps:n.vec3})],w.prototype,"mrrFactors",void 0),t.__decorate([M.parameter({vectorOps:n.vec3})],w.prototype,"emissiveFactor",void 0),t.__decorate([M.parameter({dispose:!0})],w.prototype,"baseColorTexture",void 0),t.__decorate([M.parameter({dispose:!0})],w.prototype,"metallicRoughnessTexture",void 0),t.__decorate([M.parameter({dispose:!0})],w.prototype,"emissionTexture",void 0),t.__decorate([M.parameter({dispose:!0})],w.prototype,"occlusionTexture",void 0),t.__decorate([M.parameter({dispose:!0})],w.prototype,"normalTexture",void 0),t.__decorate([M.parameter()],w.prototype,"objectOpacity",void 0),t.__decorate([M.parameterBlock()],w.prototype,"commonMaterialParameters",void 0),t.__decorate([M.parameterBlock()],w.prototype,"componentParameters",void 0),t.__decorate([M.parameter()],w.prototype,"textureAlphaCutoff",void 0),t.__decorate([M.parameter()],w.prototype,"alphaDiscardMode",void 0),t.__decorate([M.parameter()],w.prototype,"isIntegratedMesh",void 0),t.__decorate([M.parameter()],w.prototype,"polygonOffsetEnabled",void 0),t.__decorate([M.parameter()],w.prototype,"ellipsoidMode",void 0),t.__decorate([M.parameter()],w.prototype,"hasOccludees",void 0),function(e){e[e.Opaque=0]="Opaque",e[e.Transparent=1]="Transparent",e[e.OpaqueAndTransparent=2]="OpaqueAndTransparent",e[e.IntegratedMesh=3]="IntegratedMesh"}(D||(D={}));class N extends M.MaterialParameterBlock{constructor(){super(...arguments),this.doubleSided=!1,this.cullFace=S.CullFaceOptions.Back,this.hasSlicePlane=!0}}t.__decorate([M.parameter()],N.prototype,"doubleSided",void 0),t.__decorate([M.parameter()],N.prototype,"cullFace",void 0),t.__decorate([M.parameter()],N.prototype,"hasSlicePlane",void 0);class q extends M.MaterialParameterBlock{constructor(){super(...arguments),this.externalColor=u.fromValues(1,1,1,1),this.externalColorMixMode=d.ColorMixModeEnum.Multiply,this.castShadows=e.ComponentParameterSummary.All}get transparent(){return this.externalColor[3]<1?e.ComponentParameterSummary.All:e.ComponentParameterSummary.None}get opaqueOverride(){return this.externalColorMixMode===d.ColorMixModeEnum.Replace&&1===this.externalColor[3]?e.ComponentParameterSummary.All:e.ComponentParameterSummary.None}get visible(){return this.externalColor[3]>0?e.ComponentParameterSummary.All:e.ComponentParameterSummary.None}get type(){return m.ComponentDataType.Uniform}}t.__decorate([M.parameter({vectorOps:l.vec4})],q.prototype,"externalColor",void 0),t.__decorate([M.parameter()],q.prototype,"externalColorMixMode",void 0),t.__decorate([M.parameter()],q.prototype,"castShadows",void 0),e.ComponentParameterSummary=void 0,(A=e.ComponentParameterSummary||(e.ComponentParameterSummary={}))[A.All=0]="All",A[A.Some=1]="Some",A[A.None=2]="None";class R extends M.MaterialParameterBlock{constructor(){super(...arguments),this.texture=null,this.transparent=e.ComponentParameterSummary.None,this.opaqueOverride=e.ComponentParameterSummary.None,this.castShadows=e.ComponentParameterSummary.None}get type(){return m.ComponentDataType.Varying}}function I(e){return null!=e.overlay?.getTexture(p.OverlayContent.Highlight)}function k(e){return null!=e.overlay?.getTexture(p.OverlayContent.WaterNormal)}function B(e){return null!=e.overlay?.getTexture(p.OverlayContent.ColorNoRasterImage)}t.__decorate([M.parameter()],R.prototype,"texture",void 0),t.__decorate([M.parameter()],R.prototype,"transparent",void 0),t.__decorate([M.parameter()],R.prototype,"opaqueOverride",void 0),t.__decorate([M.parameter()],R.prototype,"castShadows",void 0),e.CommonMaterialParameters=N,e.ComponentMaterial=w,e.ComponentParametersUniform=q,e.ComponentParametersVarying=R,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
