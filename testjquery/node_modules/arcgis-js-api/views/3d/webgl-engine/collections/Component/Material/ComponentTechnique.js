/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["require","exports","../../../../../ViewingMode","./ComponentTechniqueConfiguration","../../../../../../chunks/ComponentShader.glsl","../../../core/shaderLibrary/ShaderOutput","../../../core/shaderTechnique/ReloadableShaderModule","../../../core/shaderTechnique/ShaderTechnique","../../../lib/basicInterfaces","../../../lib/OrderIndependentTransparency","../../../lib/Program","../../../lib/StencilUtils","../../../lib/TransparencyPassType","../../../lib/VertexAttribute","../../../../../webgl/renderState"],(function(e,t,r,i,n,a,s,l,o,u,c,d,h,p,b){"use strict";class g extends l.ShaderTechnique{initializeConfiguration(e,t){t.spherical=e.viewingMode===r.ViewingMode.Global,t.doublePrecisionRequiresObfuscation=e.rctx.driverTest.doublePrecisionRequiresObfuscation.result}initializeProgram(e){return new c.Program(e.rctx,g.shader.get().build(this.configuration),O)}_setPipelineState(e){const t=this.configuration,r=t.integratedMeshMode!==i.IntegratedMeshMode.None,n=e===h.TransparencyPassType.NONE,s=e===h.TransparencyPassType.FrontFace;return b.makePipelineState({blending:t.output!==a.ShaderOutput.Color&&t.output!==a.ShaderOutput.Alpha||!t.blendingEnabled?null:n?u.blendingDefault:u.oitBlending(e),culling:b.cullingParams(t.cullFace),depthTest:{func:u.oitDepthTest(e)},depthWrite:n||s?b.defaultDepthWriteParams:null,colorWrite:b.defaultColorWriteParams,stencilWrite:r||t.hasOccludees?d.stencilWriteMaskOn:null,stencilTest:r?d.replaceBitWhenDepthTestPasses(o.StencilBits.IntegratedMeshMaskExcluded):t.hasOccludees?d.stencilBaseAllZerosParams:null,polygonOffset:n||s?t.hasPolygonOffset?{factor:2,units:2}:null:u.OITPolygonOffset})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}g.shader=new s.ReloadableShaderModule(n.ComponentShader,(()=>new Promise(((t,r)=>e(["./shader/ComponentShader.glsl"],t,r)))));const O=new Map([[p.VertexAttribute.POSITION,0],[p.VertexAttribute.NORMAL,1],[p.VertexAttribute.NORMALCOMPRESSED,1],[p.VertexAttribute.COLOR,2],[p.VertexAttribute.UV0,3],[p.VertexAttribute.UVREGION,4],[p.VertexAttribute.COMPONENTINDEX,5]]);t.ComponentTechnique=g,t.attributeLocations=O,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
