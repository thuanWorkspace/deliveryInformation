/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../ForwardLinearDepth.glsl","../ShaderOutput","../Slice.glsl","../Transform.glsl","../attributes/NormalAttribute.glsl","../attributes/ObjectAndLayerIdColor.glsl","../attributes/TextureCoordinateAttribute.glsl","../attributes/VertexNormal.glsl","../output/OutputDepth.glsl","../output/OutputHighlight.glsl","../shading/VisualVariables.glsl","../util/AlphaDiscard.glsl","../util/View.glsl","../../shaderModules/interfaces","../../shaderModules/Texture2DPassUniform","../../../lib/basicInterfaces"],(function(e,r,t,o,a,l,i,s,d,u,n,c,p,g,v,m,h){"use strict";function x(e,x){const{vertex:O,fragment:f}=e,T=x.hasColorTexture&&x.alphaDiscardMode!==h.AlphaDiscardMode.Opaque;switch(x.output){case t.ShaderOutput.Depth:case t.ShaderOutput.Shadow:case t.ShaderOutput.ShadowHighlight:case t.ShaderOutput.ShadowExcludeHighlight:case t.ShaderOutput.ObjectAndLayerIdColor:g.addProjViewLocalOrigin(O,x),e.include(a.Transform,x),e.include(s.TextureCoordinateAttribute,x),e.include(c.VisualVariables,x),e.include(u.OutputDepth,x),e.include(o.SliceDraw,x),e.include(i.ObjectAndLayerIdColor,x),r.addNearFar(e),e.varyings.add("depth","float"),T&&f.uniforms.add(new m.Texture2DPassUniform("tex",(e=>e.texture))),O.code.add(v.glsl`void main(void) {
vpos = getVertexInLocalOriginSpace();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);
forwardTextureCoordinates();
forwardObjectAndLayerIdColor();
}`),e.include(p.DiscardOrAdjustAlphaPass,x),f.code.add(v.glsl`
          void main(void) {
            discardBySlice(vpos);
            ${T?v.glsl`
                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v.glsl`colorUV`:v.glsl`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}
            ${x.output===t.ShaderOutput.ObjectAndLayerIdColor?v.glsl`outputObjectAndLayerIdColor();`:v.glsl`outputDepth(depth);`}
          }
        `);break;case t.ShaderOutput.Normal:{g.addProjViewLocalOrigin(O,x),e.include(a.Transform,x),e.include(l.NormalAttribute,x),e.include(d.VertexNormal,x),e.include(s.TextureCoordinateAttribute,x),e.include(c.VisualVariables,x),T&&f.uniforms.add(new m.Texture2DPassUniform("tex",(e=>e.texture))),x.normalType===l.NormalType.ScreenDerivative&&e.varyings.add("vPositionView","vec3");const r=x.normalType===l.NormalType.Attribute||x.normalType===l.NormalType.Compressed;O.code.add(v.glsl`
          void main(void) {
            vpos = getVertexInLocalOriginSpace();

            ${r?v.glsl`vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:v.glsl`
                  // Get vertex position in camera space for screen-space derivative normals
                  vPositionView = (view * vec4(vpos, 1.0)).xyz;
                `}
            vpos = subtractOrigin(vpos);
            vpos = addVerticalOffset(vpos, localOrigin);
            gl_Position = transformPosition(proj, view, vpos);
            forwardTextureCoordinates();
          }
        `),e.include(o.SliceDraw,x),e.include(p.DiscardOrAdjustAlphaPass,x),f.code.add(v.glsl`
          void main() {
            discardBySlice(vpos);
            ${T?v.glsl`
                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v.glsl`colorUV`:v.glsl`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}

            ${x.normalType===l.NormalType.ScreenDerivative?v.glsl`vec3 normal = screenDerivativeNormal(vPositionView);`:v.glsl`
                  vec3 normal = normalize(vNormalWorld);
                  if (gl_FrontFacing == false){
                    normal = -normal;
                  }`}
            fragColor = vec4(0.5 + 0.5 * normal, 1.0);
          }
        `);break}case t.ShaderOutput.Highlight:g.addProjViewLocalOrigin(O,x),e.include(a.Transform,x),e.include(s.TextureCoordinateAttribute,x),e.include(c.VisualVariables,x),T&&f.uniforms.add(new m.Texture2DPassUniform("tex",(e=>e.texture))),O.code.add(v.glsl`void main(void) {
vpos = getVertexInLocalOriginSpace();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPosition(proj, view, vpos);
forwardTextureCoordinates();
}`),e.include(o.SliceDraw,x),e.include(p.DiscardOrAdjustAlphaPass,x),e.include(n.OutputHighlight,x),f.code.add(v.glsl`
          void main() {
            discardBySlice(vpos);
            ${T?v.glsl`
                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v.glsl`colorUV`:v.glsl`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}
            outputHighlight();
          }
        `)}}e.DefaultMaterialAuxiliaryPasses=x,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
