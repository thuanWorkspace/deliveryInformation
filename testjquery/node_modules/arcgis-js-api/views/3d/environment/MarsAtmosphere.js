/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../core/mathUtils","../../../core/maybe","../../../core/reactiveUtils","../../../chunks/mat4","../../../chunks/mat4f64","../../../chunks/vec2","../../../chunks/vec3","../../../chunks/vec3f64","../../../geometry/ellipsoidUtils","../../../geometry/support/FloatArray","./AtmosphereType","./atmosphereUtils","../../../chunks/SimpleAtmosphere.glsl","./SimpleAtmosphereTechnique","./SimpleAtmosphereTechniqueConfiguration","./resources/MarsAtmosphereTexture","../support/mathUtils","../support/buffer/glUtil","../support/buffer/InterleavedLayout","../webgl-engine/lib/DefaultVertexAttributeLocations","../webgl-engine/lib/glUtil3D","../webgl-engine/lib/Util","../webgl-engine/lib/VertexArrayObject","../webgl-engine/lib/VertexAttribute","../../webgl/BufferObject","../../webgl/enums","../../webgl/Texture","../../webgl/TextureDescriptor","../../webgl/Util"],(function(e,t,s,r,i,a,n,o,h,c,u,p,l,m,d,_,g,A,x,b,y,f,R,T,V,w,P,q,v){"use strict";const S=128,F=-p.innerAtmosphereDepth,C=0,M=50,U=()=>1-511/512,O=g.makePiecewiseLinearFunction([[50,.1015625],[500,.21875],[5e3,1-250/512],[5e4,.4140625]]);class D{constructor(e,t){this.view=e,this.type=u.AtmosphereType.Mars,this._passParameters=new l.SimpleAtmospherePassParameters,this._vaoCount=0,this._texV1=1;const r=h.getReferenceEllipsoid(e.spatialReference);this._planetRadius=r.radius,this._outerRimWidth=r.outerAtmosphereRimWidth,this._innerRimFactor=(this._planetRadius+F)/this._planetRadius,this._middleRimFactor=(this._planetRadius+C)/this._planetRadius,this._outerRimFactor=(this._planetRadius+this._outerRimWidth)/this._planetRadius,this._texV0=C/this._outerRimWidth,this._texVScale=this._texV1-this._texV0,this._techniqueRepository=t.techniqueRepository;const i=t.renderContext.rctx;this._cameraChangeHandle=s.watch((()=>this.view.state?.camera),(()=>t.requestRender()),s.syncAndInitial),this._vao=this._createRibbon(i),this._vaoCount=v.vertexCount(this._vao,"geometry"),this._fadeVao=y.createQuadVAO(i),this._fadeVaoCount=v.vertexCount(this._fadeVao,"geometry");const a=new q.TextureDescriptor;a.wrapMode=w.TextureWrapMode.CLAMP_TO_EDGE,a.flipped=!0,a.width=1,a.height=512,this._passParameters.texture=new P.Texture(i,a,_.marsAtmosphereTextureSimple);const n=new d.SimpleAtmosphereTechniqueConfiguration;n.geometry=d.SimpleAtmosphereGeometry.Cone,this._coneTechnique=this._techniqueRepository.acquire(m.SimpleAtmosphereTechnique,n),n.geometry=d.SimpleAtmosphereGeometry.Underground,this._undergroundTechnique=this._techniqueRepository.acquire(m.SimpleAtmosphereTechnique,n)}destroy(){this._coneTechnique.release(),this._undergroundTechnique.release(),this._cameraChangeHandle.remove(),this._passParameters.texture=t.disposeMaybe(this._passParameters.texture),this._fadeVao.dispose(),this._vao.dispose()}render(e){const t=e.bindParameters.camera;this._update(t);const s=e.rctx;this._passParameters.undergroundFadeAlpha<1&&(s.bindTechnique(this._coneTechnique,this._passParameters,e.bindParameters),s.bindVAO(this._vao),s.drawArrays(w.PrimitiveType.TRIANGLES,0,this._vaoCount)),this._passParameters.undergroundFadeAlpha>0&&(s.bindTechnique(this._undergroundTechnique,this._passParameters,e.bindParameters),s.bindVAO(this._fadeVao),s.drawArrays(w.PrimitiveType.TRIANGLE_STRIP,0,this._fadeVaoCount))}renderHaze(){}_update(t){const s=o.create(),r=this._planetRadius,i=n.length(t.eye),h=i-r;if(h<0){const e=Math.min(-h/5e3,1);this._passParameters.undergroundFadeAlpha=e}else this._passParameters.undergroundFadeAlpha=0;const c=Math.max(M,h),u=r+F;this._passParameters.innerScale=k(r+c,r,u)-1,this._passParameters.altitudeFade=p.computeInnerAltitudeFade(h),n.scale(s,t.eye,(r+M)/i),I(s,t.center,t.up,r,this._passParameters.silhouette);const l=this._computeScreenRimWidth(t,s,t.up,this._passParameters.silhouette),m=U(),d=O(h);let _=this._texV0+m*this._texVScale,g=this._texV0+l*d*this._texVScale;if(h>M){I(t.eye,t.center,t.up,r,this._passParameters.silhouette);const s=this._computeScreenRimWidth(t,t.eye,t.up,this._passParameters.silhouette),i=e.clamp((s-1.5)/(l-1.5),0,1);_=this._texV0+i*m*this._texVScale,g=this._texV0+e.lerp(this._texV1,l*d,i)*this._texVScale}a.set(this._passParameters.texV,_,g)}_createRibbon(e){const t=c.newFloatArray(3+3*S*3),s=new Uint32Array(3*S*5);t[0]=0,t[1]=0,t[2]=-1;for(let a=0;a<S;a++){const e=9*a+3;t[e]=a,t[e+1]=this._innerRimFactor,t[e+2]=-1,t[e+3]=a,t[e+4]=this._middleRimFactor,t[e+5]=0,t[e+6]=a,t[e+7]=this._outerRimFactor,t[e+8]=1;const r=3*a+1,i=a===S-1?1:r+3,n=15*a;s[n]=r,s[n+1]=r+1,s[n+2]=i+1,s[n+3]=i+1,s[n+4]=i,s[n+5]=r,s[n+6]=r+1,s[n+7]=r+2,s[n+8]=i+2,s[n+9]=i+2,s[n+10]=i+1,s[n+11]=r+1,s[n+12]=r,s[n+13]=i,s[n+14]=0}const r=E.createBuffer(s.length),i=r.position;for(let a=0;a<s.length;++a){const e=3*s[a];i.set(a,0,t[e]),i.set(a,1,t[e+1]),i.set(a,2,t[e+2])}return new R.VertexArrayObject(e,b.Default3D,{geometry:A.glLayout(E)},{geometry:V.BufferObject.createVertex(e,w.Usage.STATIC_DRAW,r.buffer)})}_computeScreenRimWidth(e,t,s,i){return n.add(W,i.center,i.v2),n.scale(j,W,this._outerRimFactor),r.lookAt(L,t,W,s),f.project(W,L,e.projectionMatrix,e.viewport,W),f.project(j,L,e.projectionMatrix,e.viewport,j),n.distance(W,j)/e.height}}function I(e,t,s,r,i){const a=n.length(e),o=r*Math.sqrt(a*a-r*r)/a,h=Math.sqrt(r*r-o*o),c=i.v1,u=i.v2;return n.scale(i.center,e,h/a),n.cross(c,e,t),n.squaredLength(c)<1&&n.cross(c,e,s),n.scale(c,c,o/n.length(c)),n.cross(u,c,e),n.scale(u,u,o/n.length(u)),o}const L=i.create(),W=o.create(),j=o.create();function k(e,t,s){return e*e/(Math.sqrt(e*e-t*t)*Math.sqrt(e*e-s*s)+t*s)}const E=x.newLayout().vec3f(T.VertexAttribute.POSITION);return D}));
