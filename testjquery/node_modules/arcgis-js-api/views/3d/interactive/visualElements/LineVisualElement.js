/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/mat4","../../../../chunks/mat4f64","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../chunks/vec4f64","./Object3DVisualElement","../../support/engineContent/line","../../webgl-engine/lib/Material","../../webgl-engine/materials/RibbonLineMaterial"],(function(e,t,r,s,i,a,o,n,l,m){"use strict";class h extends o.Object3DVisualElement{constructor(e,t){super(e),this._hasExternalMaterial=!1,this._hasExternalMaterial=null!=t,this._material=null!=t?t:new m.RibbonLineMaterial({width:1,color:a.fromValues(1,0,1,1),stippleOffColor:null,stipplePattern:null,stipplePreferContinuous:!0,isClosed:!1,falloff:0,innerColor:null,innerWidth:1,hasPolygonOffset:!1,renderOccluded:l.RenderOccludedFlag.OccludeAndTransparent,isDecoration:!!e.isDecoration,writeDepth:!0}),this.applyProperties(e)}setGeometryFromRenderSpacePoint(e,t=1e3){this.geometry=[[[e[0]-t,e[1],e[2]],[e[0]+t,e[1],e[2]]],[[e[0],e[1]-t,e[2]],[e[0],e[1]+t,e[2]]],[[e[0],e[1],e[2]-t],[e[0],e[1],e[2]+t]]]}setGeometryFromExtent(e){const t=this.view.spatialReference,r=i.create(),a=i.create(),o=100,n=[];s.set(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,a),n.push([a[0],a[1],a[2]]),s.set(r,e[2],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,a),n.push([a[0],a[1],a[2]]),s.set(r,e[2],e[3],o),this.view.renderCoordsHelper.toRenderCoords(r,t,a),n.push([a[0],a[1],a[2]]),s.set(r,e[0],e[3],o),this.view.renderCoordsHelper.toRenderCoords(r,t,a),n.push([a[0],a[1],a[2]]),s.set(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,a),n.push([a[0],a[1],a[2]]),s.set(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,a),n.push([a[0],a[1],a[2]]),this.geometry=[n]}setGeometryFromFrustum(e){const t=[];e.lines.forEach((e=>{t.push([e.origin[0],e.origin[1],e.origin[2]]),t.push([e.endpoint[0],e.endpoint[1],e.endpoint[2]])})),this.geometry=[t]}setGeometryFromBoundedPlane(e){const t=[],r=e.origin,s=e.basis1,a=e.basis2,o=.5,n=i.create(),l=i.create(),m=i.create(),h=i.create();n[0]=r[0]-s[0]*o-a[0]*o,n[1]=r[1]-s[1]*o-a[1]*o,n[2]=r[2]-s[2]*o-a[2]*o,l[0]=r[0]-s[0]*o+a[0]*o,l[1]=r[1]-s[1]*o+a[1]*o,l[2]=r[2]-s[2]*o+a[2]*o,m[0]=r[0]+s[0]*o+a[0]*o,m[1]=r[1]+s[1]*o+a[1]*o,m[2]=r[2]+s[2]*o+a[2]*o,h[0]=r[0]+s[0]*o-a[0]*o,h[1]=r[1]+s[1]*o-a[1]*o,h[2]=r[2]+s[2]*o-a[2]*o,t.push([n[0],n[1],n[2]]),t.push([l[0],l[1],l[2]]),t.push([m[0],m[1],m[2]]),t.push([h[0],h[1],h[2]]),t.push([n[0],n[1],n[2]]),this.geometry=[t]}setGeometryFromSegment(e){const r=e.endRenderSpace;this.transform=t.fromTranslation(p,r);const{points:s}=e.createRenderGeometry(r,this.view.renderCoordsHelper);this.geometry=[s]}setGeometryFromSegments(e,r=i.ZEROS){this.transform=t.fromTranslation(p,r),this.geometry=e.map((e=>e.createRenderGeometry(r,this.view.renderCoordsHelper).points))}getTransformedGeometry(){return null==this._geometry?null:this._geometry.map((e=>e.map((e=>s.transformMat4(i.create(),e,this.transform)))))}get renderOccluded(){return this._material.parameters.renderOccluded}set renderOccluded(e){this._material.setParameters({renderOccluded:e})}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get width(){return this._material.parameters.width}set width(e){this._material.setParameters({width:e})}get color(){return this._material.parameters.color}set color(e){const t=1===e[3];this._material.setParameters({color:a.clone(e),writeDepth:t})}get innerWidth(){return this._material.parameters.innerWidth}set innerWidth(e){this._material.setParameters({innerWidth:e})}get innerColor(){return this._material.parameters.innerColor}set innerColor(e){this._material.setParameters({innerColor:null!=e?a.clone(e):null})}get stipplePattern(){return this._material.parameters.stipplePattern}set stipplePattern(e){null!=this._material&&this._material.setParameters({stipplePattern:e})}get stippleOffColor(){return this._material.parameters.stippleOffColor}set stippleOffColor(e){this._material.setParameters({stippleOffColor:null!=e?a.clone(e):null})}get stipplePreferContinuous(){return this._material.parameters.stipplePreferContinuous}set stipplePreferContinuous(e){this._material.setParameters({stipplePreferContinuous:e})}get falloff(){return this._material.parameters.falloff}set falloff(e){this._material.setParameters({falloff:e})}get polygonOffset(){return this._material.parameters.hasPolygonOffset}set polygonOffset(e){this._material.setParameters({hasPolygonOffset:e})}createExternalResources(){}destroyExternalResources(){}createGeometries(e){for(const t of n.lineStripsToParameters(this.geometry)){const r=n.createGeometry(this._material,t);e.addGeometry(r)}}forEachExternalMaterial(e){this._hasExternalMaterial||e(this._material)}}const p=r.create();e.LineVisualElement=h,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
