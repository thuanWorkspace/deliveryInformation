/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../../chunks/tslib.es6","../../../../../geometry","../../../../../core/maybe","../../../../../core/memoize","../../../../../core/reactiveUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/support/UpdatingHandles","../../../../../layers/graphics/hydratedFeatures","../../../analysis/support/measurementUtils","../../SnappingVisualizer3D","../../editingTools/dragEventPipeline3D","./DirectLineMeasurement3DView","../../../support/ElevationProvider","../../../../interactive/AnalysisToolBase","../../../../interactive/coordinateHelper","../../../../interactive/dragEventPipeline","../../../../interactive/editGeometry/EditGeometry","../../../../interactive/editGeometry/EditGeometryOperations","../../../../interactive/snapping/SceneSnappingManagerPool","../../../../interactive/snapping/SnappingContext","../../../../interactive/snapping/SnappingDragPipelineStep","../../../../interactive/snapping/snappingUtils","../../../../support/screenUtils","../../../../../geometry/Point"],(function(t,e,i,n,a,r,s,o,l,p,u,c,d,h,g,y,m,v,_,P,S,w,M,D,f,b,L,E){"use strict";let V=class extends v.AnalysisToolBase{constructor(t){super(t),this._updatingHandles=new u.UpdatingHandles,this._emulatedDrag=null,this.lineState="initial",this.startPointSurfaceLocation=null,this.endPointSurfaceLocation=null,this.cursorPointSurfaceLocation=null,this.startManipulator=null,this.endManipulator=null,this.cursorManipulator=null,this._getSnappingContext=n.memoize((t=>new D.SnappingContext({elevationInfo:{mode:"absolute-height",offset:0},pointer:t,editGeometryOperations:new w.EditGeometryOperations(new S.EditGeometry("point",_.createCoordinateHelper(!0,!1,this.view.spatialReference))),visualizer:new h.SnappingVisualizer3D})))}initialize(){const{view:t,analysis:e,analysisViewData:i,visible:n}=this;this.measurementView=new y.DirectLineMeasurement3DView({toolState:this,view:t,analysis:e,analysisViewData:i,visible:n});const r=M.acquire(t);this._snappingManagerResult=r,this.addHandles(r);const{start:s,end:o,cursor:l}=this.measurementView.createManipulators(),p=(t,e,i)=>P.createManipulatorDragEventPipeline(t,((t,n,a,r)=>{const s=g.hideManipulatorWhileDragging(t),o=this._snappingManager,l=this._getSnappingContext(r),p=this._updatingHandles,{lineState:u}=this;a=a.next(s).next(P.resetProperties(this,[i,e])).next((i=>{if("cursorPoint"!==e){const i=this.analysis[e];null!=i&&(t.location=i)}return i}));const d=g.screenToMap3D(this.view),h=t=>{const n=d(t);return n||"drawing"!==this.lineState&&"initial"!==this.lineState||(this[e]=null,this[i]=null),n};let y=n.next(s).next(h);if("touch"!==r||"editing"===u){const{snappingStep:t,cancelSnapping:e}=f.createSnapDragEventPipelineStep({snappingManager:o,snappingContext:l,updatingHandles:p});a=a.next(e),y=y.next(...t)}y.next((t=>"start"!==t.action?t:null)).next((n=>{const a=c.clonePoint(n.mapEnd,new E);this[e]=a,t.location=a,this[i]=this._surfaceLocation(a,n.surfaceType)}))})),u=t=>t.events.on("grab-changed",(()=>{const t=s.grabbing||o.grabbing;this.lineState=t?"editing":"measured"}));this.addHandles([p(s,"startPoint","startPointSurfaceLocation"),p(o,"endPoint","endPointSurfaceLocation"),p(l,"cursorPoint","cursorPointSurfaceLocation"),u(s),u(o)]),this.manipulators.add(s),this.manipulators.add(o),this.manipulators.add(l),this.startManipulator=s,this.endManipulator=o,this.cursorManipulator=l,this.addHandles(a.watch((()=>this.state),(t=>{"measured"===t&&this.finishToolCreation()}),a.syncAndInitial)),b.setupSnappingToggleHandles(this)}destroy(){this._updatingHandles=i.destroyMaybe(this._updatingHandles),this.measurementView=i.destroyMaybe(this.measurementView)}get _snappingManager(){return this._snappingManagerResult.snappingManager}get state(){const{analysis:t}=this;if(null==t.startPoint&&null==t.endPoint)return"ready";const{lineState:e}=this;return this.validMeasurement&&"editing"!==e&&"drawing"!==e?"measured":"measuring"}get cursor(){return"ready"===this.state||"drawing"===this.lineState?"crosshair":null}get startPoint(){return this.analysis.startPoint}set startPoint(t){this.analysis.startPoint=t}get endPoint(){return this.analysis.endPoint}set endPoint(t){this.analysis.endPoint=t}get cursorPoint(){return this.measurementView.cursorPoint}set cursorPoint(t){this.measurementView.cursorPoint=t}get snappingOptions(){return this._snappingManager.options}get validMeasurement(){return null!=this.analysis.startPoint&&null!=this.analysis.endPoint}get updating(){return this._updatingHandles.updating||this._snappingManager.updating}onShow(){this.measurementView.show(),this._updateManipulatorAvailability()}onHide(){this.measurementView.hide()}onDeactivate(){this._emulatedDrag?.cancel(),this._emulatedDrag=null}onInputEvent(t){switch(t.type){case"immediate-click":this._handleImmediateClick(t);break;case"pointer-move":this._handlePointerMove(t)}this._updateManipulatorAvailability()}_handlePointerMove(t){if(!this.active||this.view.navigating)return;const{pointerType:e}=t;if("mouse"!==e)return;const i=L.createScreenPointFromEvent(t),{lineState:n,cursorManipulator:a,endManipulator:r}=this;let s=!1;null==this.cursorPoint&&(this._emulatedDrag?.cancel(),this._emulatedDrag=x(a,e,i),s=!0),"initial"===n&&(this._emulatedDrag?.update(i),s=!0),"drawing"===n&&(r.events.emit("drag",{action:"update",start:i,screenPoint:i}),s=!0),s&&t.stopPropagation()}_handleImmediateClick(t){if(!this.active)return;if(!d.isPrimaryPointerAction(t))return;const e=L.createScreenPointFromEvent(t),{pointerType:i}=t,{cursorManipulator:n,startManipulator:a,endManipulator:r,lineState:s}=this;let o=!1;switch(null==this.cursorPoint&&(this._emulatedDrag?.cancel(),this._emulatedDrag=x(n,i,e)),s){case"initial":if(this._emulatedDrag?.update(e),null!=this.cursorPoint){this._emulatedDrag?.end(e),this._emulatedDrag=null;const{cursorPoint:t}=this;this.startPoint=t,this.startPointSurfaceLocation=this.cursorPointSurfaceLocation,a.location=t,a.interactive=!1,r.interactive=!1,this.lineState="drawing",this._emulatedDrag=x(r,i,e),o=!0}break;case"drawing":this._emulatedDrag?.update(e),null!=this.endPoint&&(this._emulatedDrag?.end(e),this._emulatedDrag=null,a.interactive=!0,r.interactive=!0,this.lineState="measured",o=!0)}o&&t.stopPropagation()}_surfaceLocation(t,e){return e===g.SurfaceType.GROUND?"on-the-surface":(t.z??0)>=this._getElevation(t)?"above-the-surface":"below-the-surface"}_updateManipulatorAvailability(){this.startManipulator.available=null!=this.analysis.startPoint,this.endManipulator.available=null!=this.analysis.endPoint}_getElevation(t){return this.view.basemapTerrain.ready?m.getElevationAtPoint(this.view.elevationProvider,t)??0:0}get test(){return{snappingManager:this._snappingManager}}};function x(t,e,i){return t.events.emit("drag",{action:"start",pointerType:e,start:i,screenPoint:i}),{update:e=>t.events.emit("drag",{action:"update",start:e,screenPoint:e}),end:e=>t.events.emit("drag",{action:"end",start:e,screenPoint:e}),cancel:()=>t.events.emit("drag",{action:"cancel"})}}t.__decorate([r.property({readOnly:!0})],V.prototype,"state",null),t.__decorate([r.property()],V.prototype,"lineState",void 0),t.__decorate([r.property({readOnly:!0})],V.prototype,"cursor",null),t.__decorate([r.property()],V.prototype,"startPoint",null),t.__decorate([r.property()],V.prototype,"endPoint",null),t.__decorate([r.property()],V.prototype,"cursorPoint",null),t.__decorate([r.property({constructOnly:!0})],V.prototype,"analysis",void 0),t.__decorate([r.property({constructOnly:!0})],V.prototype,"analysisViewData",void 0),t.__decorate([r.property()],V.prototype,"measurementView",void 0),t.__decorate([r.property({constructOnly:!0})],V.prototype,"view",void 0),t.__decorate([r.property({readOnly:!0})],V.prototype,"validMeasurement",null),t.__decorate([r.property({value:null})],V.prototype,"startPointSurfaceLocation",void 0),t.__decorate([r.property({value:null})],V.prototype,"endPointSurfaceLocation",void 0),t.__decorate([r.property({value:null})],V.prototype,"cursorPointSurfaceLocation",void 0),t.__decorate([r.property()],V.prototype,"updating",null),V=t.__decorate([p.subclass("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DTool")],V);return V}));
