/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/tslib.es6","../../../core/Accessor","../../../core/mathUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../ViewingMode","../camera/constraintUtils","../camera/intersectionUtils","../camera/constraintUtils/ConstraintTypes","../camera/constraintUtils/InteractionType","../camera/constraintUtils/TiltMode","./NearFarHeuristic","./SurfaceCollisionConstraint"],(function(t,a,e,i,s,n,r,o,c,l,u,d,h,p,w,v,m,C){"use strict";t.ConstraintsManager=class extends e{constructor(t){super(t),this.nearFarHeuristic=m.createNearFarHeuristic(t.view.state.viewingMode,t.view.basemapTerrain,t.view.renderCoordsHelper.spatialReference)}initialize(){this.addHandles([s.watch((()=>[this.view.constraints?.clipDistance?.near,this.view.constraints?.clipDistance?.far]),(()=>this._clipDistanceNearFarChanged())),s.watch((()=>this.view.constraints?.clipDistance?.mode),(()=>this._updateNearFar())),this.view.state.events.on("before-camera-change",(t=>this._updateCameraNearFar(t))),s.watch((()=>this.view.renderDataExtent),(()=>this._updateNearFar()),s.sync),s.watch((()=>[this.view.constraints?.altitude?.min,this.view.constraints?.altitude?.max]),(()=>this._updateAltitude()),s.sync),s.watch((()=>this.view.constraints?.tilt?.max),(()=>this._updateTiltMax()),s.sync),s.watch((()=>this.view.constraints?.tilt?.mode),(()=>this._updateTilt()),s.sync),s.watch((()=>this.view.state?.camera),(()=>this._updateTiltAutoMax()),s.sync),s.watch((()=>[this.view.map?.ground?.navigationConstraint?.type,this.view.state?.constraints?.collision?.enabled]),(()=>this._updateCollision()),s.sync)]),this.view.state.isLocal&&this.addHandles(s.watch((()=>this.view.renderDataExtent),(t=>this._updateLocalSurfaceDistance(t)),s.initial)),this._updateNearFar(),this.view.state.viewingMode!==u.ViewingMode.Local&&this._updateAltitude(),this._updateTilt(),this._updateCollision(),this._set("surfaceCollisionConstraint",new C.SurfaceCollisionConstraint({view:this.view}))}destroy(){this.surfaceCollisionConstraint&&(this.surfaceCollisionConstraint.destroy(),this._set("surfaceCollisionConstraint",null))}_clipDistanceNearFarChanged(){const t=this.view.constraints?.clipDistance;t&&"auto"!==t.mode&&this.view.state.updateCamera((a=>this._updateCameraNearFarManual(a,t)))}_updateNearFar(){this.view.state.updateCamera((t=>this._updateCameraNearFar(t)))}_updateCameraNearFar(t){const a=this.view.constraints&&this.view.constraints.clipDistance;"manual"===(a?a.mode:"auto")?this._updateCameraNearFarManual(t,a):this._updateCameraNearFarAuto(t,a)}_updateCameraNearFarAuto(t,a){this.nearFarHeuristic.compute(t.eye,t.center,this.view.renderDataExtent,h.surfaceElevationBelowRenderLocation(this.view,t.eye),t),a&&a.autoUpdate(t.near,t.far)}_updateCameraNearFarManual(t,a){a&&(t.near=a.near,t.far=a.far)}_updateCollision(){const t=this.view.map?.ground?.navigationConstraint?.type,a=!t||"stay-above"===t,e=this.view.state.constraints.collision;if(a!==e.enabled){e.enabled=a,a&&this._reapplyConstraints(p.ConstraintTypes.COLLISION);const t=this.view.constraints&&this.view.constraints.tilt;t&&"auto"!==t.mode||this._updateTiltAuto()}}_updateAltitude(){const t=this.view.constraints&&this.view.constraints.altitude;t&&this.view.state.viewingMode!==u.ViewingMode.Local?this.view.state.constraints.altitude={min:t.min,max:t.max}:this.view.state.constraints.altitude=null,this._reapplyConstraints()}_updateTiltMax(){const t=this.view.constraints&&this.view.constraints.tilt;t&&"auto"!==t.mode&&(this._updateTiltManual(t),this._reapplyConstraints())}_updateTilt(){const t=this.view.constraints&&this.view.constraints.tilt;"manual"===(t?t.mode:"auto")?this._updateTiltManual(t):this._updateTiltAuto(),this._reapplyConstraints()}_updateTiltManual(t){const a=this.view.state.constraints;a.tilt=a.createConstantMaxTilt(i.deg2rad(t.max))}_updateTiltAuto(){const t=this.view.state.constraints;t.tilt=t.createDefaultTilt(),this._updateTiltAutoMax()}_updateTiltAutoMax(){const t=this.view.constraints&&this.view.constraints.tilt;if(!t||"auto"!==t.mode)return;const a=this.view.state.constraints;if(a.tilt){const e=a.tilt(this.view.state.camera.distance).max;t.autoUpdate(i.rad2deg(e))}}_updateLocalSurfaceDistance(t){if(null==t)return;let a=Math.max(t.width,t.height);if(a<=0)return;null!=t.zmax&&null!=t.zmin&&(a=Math.max(a,t.zmax-t.zmin));const e=this.view.state,i=3*a/Math.atan(e.camera.fov/2);i!==e.constraints.distance&&(e.constraints.distance=i)}_reapplyConstraints(t=p.ConstraintTypes.ALL){this.view.state.updateCamera((a=>d.applyAll(this.view,a,{selection:t,interactionType:w.InteractionType.NONE,interactionFactor:null,interactionStartCamera:null,interactionDirection:null,tiltMode:v.TiltMode.TUMBLE})))}},a.__decorate([n.property({constructOnly:!0})],t.ConstraintsManager.prototype,"view",void 0),a.__decorate([n.property({readOnly:!0})],t.ConstraintsManager.prototype,"surfaceCollisionConstraint",void 0),t.ConstraintsManager=a.__decorate([l.subclass("esri.views.3d.state.ConstraintsManager")],t.ConstraintsManager),Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
