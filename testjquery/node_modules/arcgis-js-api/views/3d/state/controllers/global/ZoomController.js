/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/Error","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec2f64","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/ellipsoidUtils","../../../../../geometry/support/axisAngle","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../camera/constraintUtils/surfaceCollision","../../../camera/constraintUtils/TiltMode","../InteractiveController","../../utils/navigationUtils","../../../support/geometryUtils/ray"],(function(t,e,i,r,a,s,n,o,c,h,l,m,p,_,d,u,C,P,y,g,v,k,R,M,f){"use strict";t.ZoomController=class extends R.InteractiveController{constructor(){super(...arguments),this._pickPoint=_.create(),this._tmpP0=m.create(),this._panAxisAngle=u.create(),this._tmpRayDir=_.create(),this._tmpRayDirPick=_.create(),this._targetOnSphere=_.create(),this._navMode=M.NavigationMode.Horizontal,this._tmpRay={origin:_.create(),direction:_.create()},this.dragBeginPoint=r.createScreenPointArray(),this._normalizedAnchorPoint=m.create(),this._constraintOptions={selection:y.ConstraintTypes.ALL_EXCEPT_COLLISION,interactionType:g.InteractionType.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:k.TiltMode.TUMBLE},this._sphere=C.create(),this._hasPickPoint=!1}get _intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;l.copy(this.dragBeginPoint,t),M.normalizeCoordinate(this.startCamera,t,this._normalizedAnchorPoint);const e=d.getReferenceEllipsoid(this.view.spatialReference),r=M.pickPointAndInitSphere(this._intersectionHelper,this.startCamera,t,e,M.SpherePickPointFallback.Ellipsoid,0===this.view.map.ground.opacity?M.contentIntersectorOptions:{});if(this._navMode=M.decideNavigationMode(this.startCamera,t,e),this._navMode===M.NavigationMode.Horizontal)this._hasPickPoint=!!r.scenePickPoint,this._pickPoint=r.scenePickPoint??this._pickPoint,this._sphere=r.sphere;else{let e;f.fromScreenAtEye(this.startCamera,t,this._tmpRay),p.normalize(this._tmpRay.direction,this._tmpRay.direction),null!=r.scenePickPoint&&(p.subtract(this._tmpRayDirPick,this.startCamera.eye,r.scenePickPoint),e=p.length(this._tmpRayDirPick));const a=Math.abs(this.view.camera.position.z);this.view.renderCoordsHelper.worldUpAtPosition(this.startCamera.eye,D);let s=i.clamp(Math.min(M.pivotDistanceModifier,1/Math.abs(p.dot(D,this._tmpRay.direction)))*a,M.distanceClampValues[0],M.distanceClampValues[1]);const n=this.view._stage.renderView.getMinimalDepthForArea(null,t[0],t[1],this.view.state.camera,M.screenPixelArea);s=null!=n?n:s,s=null!=e?Math.min(s,e):s,this._hasPickPoint=!0,p.scale(this._tmpRay.direction,this._tmpRay.direction,s),p.add(this._pickPoint,this._tmpRay.origin,this._tmpRay.direction)}this._constraintOptions.interactionStartCamera=this.startCamera}update(t){if(this.active){if(this.currentCamera.eye=this.startCamera.eye,this.currentCamera.center=this.startCamera.center,this.currentCamera.up=this.startCamera.up,this._navMode===M.NavigationMode.Horizontal){p.subtract(this._tmpRayDir,this.currentCamera.center,this.currentCamera.eye);const e=p.length(this._tmpRayDir);M.normalizeCoordinate(this.currentCamera,t,this._tmpP0);const i=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let r=e*2**i;const a=this.view.state.constraints.minimumPoiDistance;if(i<0&&r<a&&(r=a),Math.abs(e-r)<1e-6)return;if(this._hasPickPoint&&r<e){const t=1-(1-r/e)*(1-this._sphere[3]/p.length(this.currentCamera.center));this.currentCamera.center=p.scale(A,this.currentCamera.center,t)}p.scale(this._tmpRayDir,this._tmpRayDir,-r/e),this.currentCamera.eye=p.add(A,this.currentCamera.center,this._tmpRayDir),this._constraintOptions.interactionFactor=P.pixelDistanceToInteractionFactor(l.distance(this.dragBeginPoint,t)),P.applyAll(this.view,this.currentCamera,this._constraintOptions),this._hasPickPoint&&(M.sphereOrPlanePointFromScreenPoint(this._sphere,this.currentCamera,this.dragBeginPoint,this._targetOnSphere),u.fromPoints(this._pickPoint,this._targetOnSphere,this._panAxisAngle),M.applyRotation(this.currentCamera,this._sphere,this._panAxisAngle))}else{const e=p.length(this._tmpRay.direction);M.normalizeCoordinate(this.currentCamera,t,this._tmpP0);const i=12*(this._normalizedAnchorPoint[1]-this._tmpP0[1]);let r=e*2**i;const a=this.view.state.constraints.minimumPoiDistance;if(i<0&&r<a&&(r=a),Math.abs(e-r)<1e-6)return;p.scale(this._tmpRayDir,this._tmpRay.direction,1-r/e),this.currentCamera.eye=p.add(A,this.currentCamera.eye,this._tmpRayDir),this.currentCamera.center=p.add(A,this.currentCamera.center,this._tmpRayDir)}v.applySurfaceCollisionConstraint(this.view,this.currentCamera),this.commitCamera()}}end(){this.active&&this.finishController()}},t.ZoomController=e.__decorate([h.subclass("esri.views.3d.state.controllers.global.ZoomController")],t.ZoomController);const A=_.create(),D=_.create();Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
