/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/Error","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec2f64","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/support/plane","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../camera/constraintUtils/TiltMode","../../../layers/VoxelWasm","../InteractiveController","../../utils/navigationUtils"],(function(t,e,i,r,s,a,n,o,c,h,m,p,l,_,u,d,C,y,P,D,g,v){"use strict";t.ZoomController=class extends g.InteractiveController{constructor(){super(...arguments),this._tmpP=_.create(),this._tmpDir=_.create(),this._tmpN=_.create(),this._tmpP0=p.create(),this._tmpPoi=_.create(),this._tmpRayDir=_.create(),this.dragBeginPoint=r.createScreenPointArray(),this._normalizedAnchorPoint=p.create(),this._constraintOptions={selection:C.ConstraintTypes.ALL,interactionType:y.InteractionType.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:_.create(),tiltMode:P.TiltMode.TUMBLE},this._plane=u.create()}get _intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;m.copy(this.dragBeginPoint,t),v.normalizeCoordinate(this.startCamera,t,this._normalizedAnchorPoint);const e=this._intersectionHelper.intersectScreenFreePointFallback(t,this._tmpP,0===this.view.map.ground.opacity?v.contentIntersectorOptions:{});l.subtract(this._tmpDir,this._tmpP,this.startCamera.eye);const r=l.length(this._tmpDir);l.normalize(this._tmpDir,this._tmpDir);const s=Math.abs(this.view.camera.position.z);let a=i.clamp(Math.min(v.pivotDistanceModifier,1/Math.abs(l.dot(b,this._tmpDir)))*s,v.distanceClampValues[0],v.distanceClampValues[1]);const n=this.view._stage.renderView.getMinimalDepthForArea(D.getVoxelWasm(this.view),t[0],t[1],this.view.state.camera,v.screenPixelArea);a=null!=n?n:a,a=e?Math.min(a,r):a,l.scale(this._tmpDir,this._tmpDir,a),l.add(this._tmpP,this.startCamera.eye,this._tmpDir),l.subtract(this._tmpN,this.startCamera.eye,this.startCamera.center),l.normalize(this._tmpN,this._tmpN),this._tmpN[1]<0&&l.negate(this._tmpN,this._tmpN),u.fromPositionAndNormal(this._tmpP,this._tmpN,this._plane),this._constraintOptions.interactionStartCamera=this.startCamera}update(t){if(!this.active)return;v.intersectPlaneFromScreenPoint(this._plane,this.currentCamera,this.dragBeginPoint,this._tmpPoi)||l.copy(this._tmpPoi,this.currentCamera.center),v.normalizeCoordinate(this.currentCamera,t,this._tmpP0);let e=4*(this._tmpP0[1]-this._normalizedAnchorPoint[1]);m.copy(this._normalizedAnchorPoint,this._tmpP0),l.subtract(this._tmpRayDir,this._tmpPoi,this.currentCamera.eye);const i=l.length(this._tmpRayDir);let r=i*(1-e);this._constraintOptions.interactionDirection&&(l.copy(this._constraintOptions.interactionDirection,this._tmpRayDir),l.scale(this._constraintOptions.interactionDirection,this._constraintOptions.interactionDirection,Math.sign(e)/i));const s=this.view.state.constraints.minimumPoiDistance;e>=0&&r<s&&(r=s,e=-(r-i)/i),Math.abs(i-r)<1e-6||(l.scale(this._tmpRayDir,this._tmpRayDir,e),this.currentCamera.eye=l.add(M,this.currentCamera.eye,this._tmpRayDir),l.lerp(M,this.currentCamera.center,this._tmpPoi,e),this._tmpPoi[2]>this.startCamera.center[2]?M[2]=Math.max(this.startCamera.center[2],M[2]):M[2]=Math.min(this.startCamera.center[2],M[2]),this.currentCamera.center=M,this._constraintOptions.interactionFactor=d.pixelDistanceToInteractionFactor(m.distance(this.dragBeginPoint,t)),d.applyAll(this.view,this.currentCamera,this._constraintOptions),this.commitCamera())}end(){this.active&&this.finishController()}},t.ZoomController=e.__decorate([h.subclass("esri.views.3d.state.controllers.local.ZoomController")],t.ZoomController);const M=_.create(),b=_.fromValues(0,0,1);Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
