/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/tslib.es6","../../../../core/compilerUtils","../../../../core/mathUtils","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/accessorSupport/decorators/subclass","../../../../chunks/mat4","../../../../chunks/mat4f64","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../geometry/ellipsoidUtils","../../../../geometry/support/ray","../../../../chunks/sphere","../../../../geometry/support/vector","../../../../geometry/support/vectorStacks","../../camera/constraintUtils","../../camera/constraintUtils/ConstraintTypes","../../camera/constraintUtils/InteractionType","../../camera/constraintUtils/TiltMode","../Constraints","./InteractiveController","../utils/navigationUtils","../utils/viewUtils","../../support/cameraUtils","../../support/cameraUtilsInternal","../../webgl-engine/lib/Camera","../../../navigation/gamepadAndKeyboardUtils"],(function(t,e,a,i,r,n,o,s,c,l,d,p,m,h,u,v,y,_,f,C,g,T,b,w,S,O,M,x,A){"use strict";t.GamepadKeyboardController=class extends b.InteractiveController{constructor(t){super(t),this._filteredSurfaceElevation=0,this._transformation={translation:[0,0,0],heading:0,tilt:0,zoom:0},this._keysButtonState=[0,0,0,0,0,0,0,0,0,0,0,0],this._tmpCamera=new x.Camera,this._headingStart=0,this._constraintOptions={selection:f.ConstraintTypes.ALL,interactionType:C.InteractionType.NONE,interactionStartCamera:new x.Camera,interactionFactor:0,interactionDirection:null,tiltMode:g.TiltMode.LOOK_AROUND}}handleEventGamepad(t){const e=A.extractTransformation(t,this.view.navigation.gamepad,this._transformation);("end"===t.action||A.isZeroTransformation(e))&&this.finishController()}activateDirection(t){this._keysButtonState[t]=1,A.extractTransformationKeyboard(this._keysButtonState,this._transformation)}deactivateDirection(t){this._keysButtonState[t]=0;const e=A.extractTransformationKeyboard(this._keysButtonState,this._transformation);A.isZeroTransformation(e)&&this.finishController()}onControllerStart(t){this._filteredSurfaceElevation=this.view.pointsOfInterest.cameraOnSurface.location.z,this._headingStart=this.view.camera.heading,super.onControllerStart(t)}_updateFilteredSurfaceElevation(t){const e=this.view.pointsOfInterest.cameraOnSurface.location.z,a=1;this._filteredSurfaceElevation+=a*(e-this._filteredSurfaceElevation)*t}stepController(t,e){this._updateStartHeading(),this._updateFilteredSurfaceElevation(t),this.currentCamera.copyViewFrom(e),this._updateCameraCenter(),this._constraintOptions.interactionStartCamera?.copyFrom(this.currentCamera),this._calculateControlTransformation(t,this.currentCamera,U),this._applyDisabledMovementTypes(U),this._applyPan(U.pan),this._applyRotate(U.rotate),this._applyZoom(U.zoom),this._applyAscend(U.ascend),this._constraintOptions.interactionType=C.InteractionType.NONE,this._constraintOptions.selection=f.ConstraintTypes.COLLISION,_.applyAll(this.view,this.currentCamera,this._constraintOptions),super.stepController(t,e)}_updateStartHeading(){0!==this._transformation.heading&&(this._headingStart=this.view.camera.heading)}_applyRotate(t){if(!t.enabled)return;const e=this.currentCamera;d.subtract(k,e.center,e.eye),d.transformMat4(k,k,t.matrix),e.center=d.add(k,k,e.eye),e.up=d.transformMat4(k,e.up,t.matrix),this._constraintOptions.interactionType=C.InteractionType.LOOK_AROUND,this._constraintOptions.selection=f.ConstraintTypes.ALL_EXCEPT_COLLISION,_.applyAll(this.view,e,this._constraintOptions)}_applyPan(t,e=this.currentCamera){if(!t.enabled)return;e.eye=d.transformMat4(k,e.eye,t.matrix),e.center=d.transformMat4(k,e.center,t.matrix);this.view.state.isGlobal&&(e.up=d.transformMat4(k,e.up,t.matrix)),this._constraintOptions.interactionType=C.InteractionType.PAN,this._constraintOptions.selection=f.ConstraintTypes.ALL,_.applyAll(this.view,e,this._constraintOptions)}_applyZoom(t){if(!t)return;const e=this.currentCamera.viewForward;this.currentCamera.eye=d.add(k,this.currentCamera.eye,d.scale(y.sv3d.get(),e,t)),d.copy(P,e),d.negate(P,P),this._constraintOptions.interactionDirection=P,this._constraintOptions.interactionType=C.InteractionType.ZOOM,this._constraintOptions.selection=f.ConstraintTypes.ALL_EXCEPT_COLLISION,_.applyAll(this.view,this.currentCamera,this._constraintOptions),this._constraintOptions.interactionDirection=null}_applyAscend(t){if(!t)return;const e=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,y.sv3d.get());this._constraintOptions.interactionDirection=d.copy(P,e);if(this.view.state.isGlobal){const e=d.length(this.currentCamera.eye),a=(e+t)/e;this.currentCamera.eye=d.scale(k,this.currentCamera.eye,a),this.currentCamera.center=d.scale(k,this.currentCamera.center,a)}else{const a=d.scale(y.sv3d.get(),e,t);this.currentCamera.eye=d.add(k,this.currentCamera.eye,a),this.currentCamera.center=d.add(k,this.currentCamera.center,a)}this._updateCameraCenter(),this._constraintOptions.interactionType=C.InteractionType.ASCEND,this._constraintOptions.selection=f.ConstraintTypes.COLLISION,_.applyAll(this.view,this.currentCamera,this._constraintOptions)&&this._updateCameraCenter(),this._constraintOptions.selection=f.ConstraintTypes.ALL_EXCEPT_COLLISION,_.applyAll(this.view,this.currentCamera,this._constraintOptions),this._constraintOptions.interactionDirection=null}_calculateControlTransformation(t,e,a){N(a);const i=this._computeVelocities(t);this.view.state.isLocal?this._calculateControlTransformationLocal(i,e,a):this._calculateControlTransformationGlobal(i,e,a)}_updateCameraCenter(){const t=this.view.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude,e=this.view.renderCoordsHelper,a=this.currentCamera.ray;this.currentCamera.center=e.intersectManifoldClosestSilhouette(a,t,k)}_calculateControlTransformationLocal(t,e,r){const{viewRight:n,viewForward:o}=e,s=this._transformation,l=this.view.navigation.gamepad,p=d.set(y.sv3d.get(),o[0],o[1],0);d.normalize(p,p);const m=s.translation[0]*t.pan;if(0!==m){const t=d.scale(y.sv3d.get(),n,m);c.translate(r.pan.matrix,r.pan.matrix,t),r.pan.enabled=!0}switch(l.mode){case"pan":{const e=-s.translation[1]*t.pan;if(0!==e){const t=d.scale(y.sv3d.get(),p,e);c.translate(r.pan.matrix,r.pan.matrix,t),r.pan.enabled=!0}r.zoom=s.zoom*t.zoom;break}case"zoom":r.zoom=(-s.translation[1]+s.zoom)*t.zoom;break;default:a.neverReached(l.mode)}const h=s.translation[2]*t.ascend;r.ascend=h;const u=-s.heading*t.rotate;0!==u&&(c.rotate(r.rotate.matrix,r.rotate.matrix,u,this.view.renderCoordsHelper.worldUpAtPosition(e.eye,y.sv3d.get())),r.rotate.enabled=!0);const v=s.tilt*t.rotate,_=S.viewAngle(this.view.renderCoordsHelper,e.center,e.eye),f=i.clamp(_+v,T.TiltDefault.min,T.TiltDefault.max)-_;f&&(c.rotate(r.rotate.matrix,r.rotate.matrix,f,n),r.rotate.enabled=!0)}_calculateControlTransformationGlobal(t,e,a){const{eye:i,viewRight:r}=e,n=this._transformation,o=this.view.navigation.gamepad,s=d.cross(y.sv3d.get(),r,i);d.normalize(s,s),d.negate(s,s),w.panMotionToRotationMatrix(this.startCamera,e,n,t,this.view.camera.heading,this._headingStart,this.view.camera.tilt,a,o),this._tmpCamera.copyFrom(this.currentCamera),this._applyPan(U.pan,this._tmpCamera);const l=this.view.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude,p=n.translation[2]*t.ascend;a.ascend=p;const m=-n.heading*t.rotate;0!==m&&(c.rotate(a.rotate.matrix,a.rotate.matrix,m,this._tmpCamera.eye),a.rotate.enabled=!0);const h=n.tilt*t.rotate,u=this._clampTiltDeltaGlobalToValidRange(h,e.ray,l);0!==u&&(c.rotate(a.rotate.matrix,a.rotate.matrix,u,this._tmpCamera.viewRight),a.rotate.enabled=!0),a.zoom+=n.zoom*t.zoom}_clampTiltDeltaGlobalToValidRange(t,e,a){const r=m.getReferenceEllipsoid(this.view.spatialReference),n=w.onSurfaceTiltToEyeTiltGlobal(T.TiltDefault.min,e.origin,a,r);let o=0,s=0;const c=y.sv3d.get();if(this.view.renderCoordsHelper.intersectManifold(e,a,c)){const t=S.viewAngle(this.view.renderCoordsHelper,c,e.origin);o=w.onSurfaceTiltToEyeTiltGlobal(t,e.origin,a,r),s=w.onSurfaceTiltToEyeTiltGlobal(T.TiltDefault.max,e.origin,a,r)}else{u.closestPointOnSilhouette(u.fromRadius(u.tmpSphere,a+r.radius),e,c);const t=Math.PI+v.angle(e.direction,c);o=w.offSurfaceTiltToEyeTiltGlobal(t,e.origin,a,r),s=w.offSurfaceTiltToEyeTiltGlobal(T.TiltDefault.max,e.origin,a,r)}return i.clamp(o+t,n,s)-o}_getPointAbsoluteSurfaceElevation(t,e,a){const{renderCoordsHelper:i}=this.view,r=i.getAltitude(t),n=e+Math.abs(r-e);return i.setAltitude(a,n,t),n}_clampedDistanceToSurface(t,e){const{renderCoordsHelper:a}=this.view,{camera:i}=this.view.state,{direction:r}=O.headingTiltToDirectionUp(this.view,e,0,I,H),n=a.intersectManifoldClosestSilhouette(h.wrap(e,r),t,y.sv3d.get()),o=d.distance(e,n),s=a.intersectManifoldClosestSilhouette(h.wrap(e,d.direction(y.sv3d.get(),e,i.center)),t,y.sv3d.get()),c=d.distance(e,s);return Math.min(o,c)}_computeHeadingRotateRadius(t){const{renderCoordsHelper:e,state:a}=this.view,{camera:r,isGlobal:n}=a,o=e.intersectManifoldClosestSilhouette(r.ray,this._filteredSurfaceElevation,y.sv3d.get());if(n){const e=d.subtract(y.sv3d.get(),t,o),a=d.length(e);d.scale(e,e,1/a);const r=d.normalize(y.sv3d.get(),t),n=i.acosClamped(d.dot(r,e));return a*Math.sin(Math.min(L,n))}{const a=d.copy(y.sv3d.get(),t);return e.setAltitude(a,this._filteredSurfaceElevation),d.distance(o,a)}}_minimumAscendVelocity(){return this.view.state.constraints.collision.enabled?0:D}_computeVelocities(t){const e=this._filteredSurfaceElevation,a=e+m.getReferenceEllipsoid(this.view.spatialReference).radius,{camera:r,isGlobal:n}=this.view.state,o=y.sv3d.get(),s=this._getPointAbsoluteSurfaceElevation(r.eye,e,o),c=this._clampedDistanceToSurface(e,o),l=r.width/2,d=z*r.width,p=z*r.width,h=c*Math.tan(.5*r.fovX)/l,u=h/a,v=h/this._computeHeadingRotateRadius(o),_=s-e;return{pan:(n?u:h)*d*t,ascend:Math.max(this._minimumAscendVelocity()*t,2**(d*t/l)*_-_),zoom:2**(d*t/l)*c-c,rotate:i.clamp(v*p,G,R)*t}}_applyDisabledMovementTypes(t){null==this.disableMovements||void 0!==this.disableMovements.mode&&this.view.state.viewingMode!==this.disableMovements.mode||(t.zoom=this.disableMovements.zoom?0:t.zoom,t.ascend=this.disableMovements.ascend?0:t.ascend,t.pan.enabled=!this.disableMovements.pan,this.disableMovements.pan&&c.identity(t.pan.matrix),t.rotate.enabled=!this.disableMovements.rotate,this.disableMovements.rotate&&c.identity(t.rotate.matrix))}static activatesFor(t,e){const a=A.extractTransformation(e,t.navigation.gamepad,E);return!("end"===e.action||A.isZeroTransformation(a))}},e.__decorate([r.property({constructOnly:!0})],t.GamepadKeyboardController.prototype,"gamepadDevice",void 0),e.__decorate([r.property({constructOnly:!0})],t.GamepadKeyboardController.prototype,"disableMovements",void 0),t.GamepadKeyboardController=e.__decorate([s.subclass("esri.views.3d.state.controllers.GamepadKeyboardController")],t.GamepadKeyboardController);const E={translation:[0,0,0],heading:0,tilt:0,zoom:0},I=80,L=i.deg2rad(I),z=.75,D=5,G=i.deg2rad(30),R=i.deg2rad(80),U={zoom:0,ascend:0,pan:{enabled:!1,matrix:l.create()},rotate:{enabled:!1,matrix:l.create()}},k=p.create(),P=p.create(),H=M.createDirectionUp();function N(t){t.zoom=0,t.ascend=0,t.pan.enabled=!1,c.identity(t.pan.matrix),t.rotate.enabled=!1,c.identity(t.rotate.matrix)}Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
