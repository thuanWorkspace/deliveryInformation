/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../core/Error","../../../../core/maybe","../../../../core/MemCache","../../../../core/promiseUtils","../../../../core/uuid","../../../../chunks/mat3","../../../../chunks/mat3f64","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../geometry/projection/projectBoundingSphere","../../../../chunks/sphere","./I3SClientMaterialUtil"],(function(e,t,o,r,n,s,a,i,l,d,u,c,m){"use strict";class h{constructor(e,t,o,r){this._uid=e,this._worker=r,this._id2Meta=new Map,this._oid2Meta=new Map,this._indexSR=t.indexSR,this._vertexSR=t.vertexSR,this._renderSR=t.renderSR,this._localMode=t.localMode,this._memCache=o.newCache(`sl-client-mesh-data-${this._uid}`)}get uid(){return this._uid}get worker(){return this._worker}get indexSR(){return this._indexSR}get renderSR(){return this._renderSR}createMeshNodeInfo(e,t){const o=`mesh${t}`,r=e.extent,n=r.spatialReference,s=this._indexSR,a=f(r,e.origin);u.projectBoundingSphere(a,n,a,s);return{type:"mesh",id:o,version:M(e),oid:t,mbs:a,componentNodeIds:[],unloadedMesh:e,nodeIndex:null,loadMeshPromise:null}}addMeshNode(e,o){if(null!=this.getMeshNodeIndex(o.oid))throw new t(`I3SClientNodeLoader: client side mesh for feature oid=${o.oid} already exists`);o.nodeIndex=e,this._id2Meta.set(o.id,o),this._oid2Meta.set(o.oid,o)}getMeshNodeIndex(e){const t=this._oid2Meta.get(e);return null==t||"mesh"!==t.type?null:t.nodeIndex}removeNode(e){const t=this._id2Meta.get(e);null!=t&&(this._id2Meta.delete(e),"mesh"===t.type&&this._oid2Meta.delete(t.oid))}async loadNodeJSON(e){const o=this._id2Meta.get(e);if(null==o)throw new t(`I3SClientNodeLoader::loadNodeJSON unable to find node ${e}`);switch(o.type){case"mesh":return this._loadMeshNodeJSON(o);case"mesh-component":return this._loadMeshComponentNodeJSON(o);default:throw new t(`I3SClientNodeLoader::loadNodeJSON unable to handle node ${e}`)}}async _loadMeshNodeJSON(e){const t=e.id,o=(await this._getMeshData(e)).loadedMesh;if(null==o.components||0===o.components.length)return{id:t,version:null,mbs:e.mbs,obb:null,sharedResource:null,geometryData:null,attributeData:null,featureData:null,children:null};const r=[],n=o.components;for(let s=0;s<n.length;++s){const o=`${t}-component${s}`,n={type:"mesh-component",id:o,mbs:e.mbs,componentIndex:s,meshNodeInfo:e,textureData:new Map};this._id2Meta.set(n.id,n),e.componentNodeIds.push(o),r.push({id:n.id,href:null,mbs:n.mbs,obb:null})}return{id:t,version:null,mbs:e.mbs,obb:null,sharedResource:null,geometryData:null,attributeData:null,featureData:null,children:r}}updateNodeIndex(e,t,o){const r=this._id2Meta.get(e);r&&"mesh"===r.type&&(r.nodeIndex=o)}async _loadMeshComponentNodeJSON(e){return{id:e.id,version:e.meshNodeInfo.version,mbs:e.mbs,obb:null,sharedResource:null,geometryData:null,attributeData:null,featureData:null,children:null,isEmpty:!1}}async loadNodeData(e,r){const s=this._id2Meta.get(e);if(null==s||"mesh-component"!==s.type)throw new t(`Failed to load client node data for node ${e} (unexpected node info)`);const a=s.meshNodeInfo,i=await this._getMeshData(a),l=i.loadedMesh,d=a.oid;if(null==l.components)throw new t(`Failed to load client node data for node ${e} (unexpected null reference)`);const u=l.components[s.componentIndex],{material:c,requiredTextures:h,textureData:f}=await m.convertMeshMaterialToPBRMaterial(u.material);if(null!=f)for(const t of f)null!=t&&s.textureData.set(t.id,t);const x={params:{material:c},type:"ArrayBufferView"},{vertexSpace:M,origin:g,transform:S}=l,_=[g.x,g.y,g.z??0],w={featureDataPosition:_,featureIds:[],geometries:[x]},N={attributeData:{},loadedAttributes:[]};i.projectionPromise||(o.assertIsSome(this._worker,"SceneLayerWorker is needed to project mesh"),i.projectionPromise=this._worker.project({positions:l.vertexAttributes.position,localMatrix:S?.localMatrix,vertexSpace:M.toJSON(),origin:_,inSpatialReference:l.spatialReference.toJSON(),outSpatialReference:this._vertexSR.toJSON(),localMode:this._localMode},r));const{projected:b,original:I}=await i.projectionPromise;l.vertexAttributes.position=I;const{transformed:v,original:D}=await p(u,i,this._worker,r);l.vertexAttributes.normal=D,n.throwIfAborted(r);const{geometryBuffer:R,geometryDescriptor:A}=y(b,u.faces,v,l.vertexAttributes.uv,l.vertexAttributes.color,d);return{geometryData:w,attributeDataInfo:N,geometryBuffer:R,geometryDescriptor:A,requiredTextures:h,textureData:f,normalReferenceFrame:this._vertexSR.isGeographic?"east-north-up":"vertex-reference-frame"}}async loadAttributes(e,t,o){const r=e.numFeatures,n={};for(const{field:{name:s}}of t)n[s]=new Array(r);return n}async loadTextures(e,t,o){const r=e.id,n=this._id2Meta.get(r);if(null==n||"mesh-component"!==n.type)throw new Error(`Failed to load textures for node ${e.id} (unexpected node info)`);const s=[];for(const a of t)s.push(n.textureData.get(a.id)||null);return s}async _getMeshData(e){const t=e.version,o=this._memCache.get(t);if(null==o){if(null!=e.loadMeshPromise)return e.loadMeshPromise;const o=async(o,n)=>{const s=e.unloadedMesh.clone();try{await s.load()}catch(l){n(l)}const a=s.memoryUsage,i={loadedMesh:s,projectionPromise:null,normalsTransformPromise:null,usedMemoryInBytes:a};this._memCache.put(t,i,a,r.minPriority),e.loadMeshPromise=null,o(i)};return e.loadMeshPromise=new Promise(((e,t)=>o(e,t))),e.loadMeshPromise}return o}}function f(e,t){const{spatialReference:o}=e,r=[1,-1],n=[.5*e.width,.5*e.height,e.hasZ?.5*(e.zmax-e.zmin):0],s=o.isGeographic?o.metersPerUnit:1,a=e.center;let i=0;if(e.hasZ)for(let l=0;l<2;++l)for(let e=0;e<2;++e)for(let o=0;o<2;++o){const d=(a.x+r[l]*n[0]-t.x)*s,u=(a.y+r[e]*n[1]-t.y)*s,c=a.z+r[o]*n[2]-t.z;i=Math.max(d*d+u*u+c*c,i)}else for(let l=0;l<2;++l)for(let e=0;e<2;++e){const o=(a.x+r[l]*n[0]-t.x)*s,d=(a.y+r[e]*n[1]-t.y)*s;i=Math.max(o*o+d*d,i)}return c.fromCenterAndRadius([t.x,t.y,t.z],Math.sqrt(i))}async function p(e,t,r,n){const{transform:s,vertexAttributes:u}=t.loadedMesh,c="source"===e.shading?u.normal:null;if(!(null!=c&&null!=s&&(0!==s.rotationAngle||!l.exactEquals(s.scale,d.ONES))))return{transformed:c,original:u.normal};if(!t.normalsTransformPromise){o.assertIsSome(r,"SceneLayerWorker is needed to transform mesh normals");const e=i.create();a.normalFromMat4(e,s.localMatrix),t.normalsTransformPromise=r.transformNormals({normalMatrix:e,normals:c},n)}return t.normalsTransformPromise}function y(e,t,o,r,n,s){const a=1,i=t.length/3,l=3*i;let d=0,u=0,c=!1,m=0,h=!1,f=0,p=!1,y=0,M=0,N=0;d+=g,d+=g,u=d,d+=3*l*S,null!=o&&(c=!0,m=d,d+=3*l*S),null!=r&&(h=!0,f=d,d+=2*l*S),null!=n&&(p=!0,y=d,d+=4*l*_),M=d,d+=a*w,N=d,d+=2*a*g;const b=new ArrayBuffer(d),I=new Uint8Array(b);x(I,0,l),x(I,g,a);const v=new Float32Array(b,u),D=null!=o?new Float32Array(b,m):null,R=null!=r?new Float32Array(b,f):null,A=null!=n?new Uint8Array(b,y):null;for(let x=0;x<i;++x){const s=3*x;for(let a=0;a<3;++a){const i=t[s+a],l=3*i,d=9*x+3*a;if(v[d]=e[l],v[d+1]=e[l+1],v[d+2]=e[l+2],null!=D&&(D[d]=o[l],D[d+1]=o[l+1],D[d+2]=o[l+2]),null!=R){const e=2*i,t=6*x+2*a;R[t]=r[e],R[t+1]=r[e+1]}if(null!=A){const e=4*i,t=12*x+4*a;A[t]=n[e],A[t+1]=n[e+1],A[t+2]=n[e+2],A[t+3]=n[e+3]}}}x(I,M,s),x(I,M+g,s/2**32),x(I,N,0),x(I,N+g,i-1);return{geometryBuffer:b,geometryDescriptor:{isDraco:!1,isLegacy:!0,color:p,normal:c,uv0:h,uvRegion:!1,featureIndex:!0}}}function x(e,t,o){e[t]=255&o,e[t+1]=255&o>>8,e[t+2]=255&o>>16,e[t+3]=255&o>>24}function M(e){const t=e.metadata.displaySource?.source;if(null==t||!Array.isArray(t)||!t.length||t[0]instanceof File)return s.generateUUID();const o=t;let r="";for(const n of o)r+=n.makeHash();return r+JSON.stringify(null!=e.transform?e.transform.toJSON():"")+(e.vertexSpace.isRelative?JSON.stringify(e.vertexSpace.origin):"")}const g=4,S=4,_=1,w=8;e.I3SClientNodeLoader=h,e.createSphereFromExtent=f,e.sizeOfFloat32=S,e.sizeOfInt32=g,e.sizeOfUInt64=w,e.sizeOfUInt8=_,e.transformNormals=p,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
