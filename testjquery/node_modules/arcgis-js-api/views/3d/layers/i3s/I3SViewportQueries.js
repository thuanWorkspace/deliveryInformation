/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../chunks/vec4","../../../../geometry/ellipsoidUtils","../../../../geometry/spatialReferenceEllipsoidUtils","../../../../geometry/projection/projectBoundingSphere","../../../../geometry/support/frustum","../../../../geometry/support/spatialReferenceUtils","../../../../chunks/sphere","../../../../layers/graphics/dehydratedPoint","../graphics/elevationAlignmentUtils","../graphics/ElevationContext","../graphics/featureExpressionInfoUtils","./ElevationRange","./I3SNode","./I3SUtil","../../support/orientedBoundingBox"],(function(e,t,i,s,n,r,a,o,c,h,l,u,d,_,p,m,g){"use strict";const b=1e5;class v{constructor(e,i,n,r,c,l,u,d,_={}){this._indexSR=e,this._renderCoordsHelper=i,this._clippingArea=c,this._elevationProvider=l,this._viewingMode=u,this._options=_,this._frustum=a.create(),this._useFrustumCulling=!1,this._poi=t.create(),this._elevationContext=null,this.minDistance=1/0,this.maxDistance=0,this.maxLodLevel=2,this._tmpObb=g.create(),this._tmp1=t.create(),this._tmp2=t.create(),this._tmp3=t.create(),this._tmp0=t.create(),this._screenspaceErrorBias=_.screenspaceErrorBias||1,this._progressiveLoadFactor=_.progressiveLoadFactor||1,this.updateCamera(n,r),this.engineSR=this._renderCoordsHelper.spatialReference,this.updateElevationInfo(d),this._tmpPoint=h.makeDehydratedPoint(0,0,0,e),this._isECEFOBBInLocalMode=this._indexSR.isWGS84&&(this.engineSR.isWebMercator||o.isPlateCarree(this.engineSR)),this._indexSREllipsoidRadius=s.getReferenceEllipsoid(this._indexSR).radius}updateElevationInfo(e){null!=e?(this._elevationContext=u.ElevationContext.fromElevationInfo(e),this._elevationContext.updateFeatureExpressionInfoContext(d.createContextWithoutExpressionSupport(d.extractExpressionInfo(e,!1)))):this._elevationContext=null}updateCamera(e,t){this._useFrustumCulling=t,t&&a.fromMatrix(e.viewMatrix,e.projectionMatrix,this._frustum),this._screenSizeFactor=1/(e.perScreenPixelRatio/2),this._camPos=e.eye,this.minDistance=1/0,this.maxDistance=0}setPointOfInterest(e){this._poi=e}updateScreenSpaceErrorBias(e){const t=this._screenspaceErrorBias;return this._screenspaceErrorBias=e,t}updateClippingArea(e){this._clippingArea=e}expandElevationRange(e,t,i){if(null==this._elevationContext)return;const s=e.mbs;if(!s)return;if(this._elevationProvider.getSphereElevationBounds){const e=this._elevationProvider.getSphereElevationBounds(s,this._indexSR);return void(e&&_.expandElevationRange(i,e.min,e.max))}const n=s[0],r=s[1],a=s[2],o="relative-to-scene"===this._elevationContext.mode?"scene":"ground",c=this._elevationProvider.getElevation(n,r,a,this._indexSR,o);c&&_.expandElevationRange(i,c,c);const h=t?null:this._elevationProvider.getRootElevationBounds?.();h&&_.expandElevationRange(i,h.min,h.max)}getRenderMbs(e){const t=e.renderMbs;if(m.isValidMbs(t))return t;e.mbs&&i.copy(t,e.mbs);const s=e.elevationRangeMin;if(this._elevationContext&&Number.isFinite(s)){let i=0,n=0;const r=e.elevationRangeMax;switch(this._elevationContext.mode){case"relative-to-ground":i=this._elevationContext.geometryZWithOffset(t[2],this._renderCoordsHelper)+s-t[2],n=r-s;break;case"on-the-ground":i=s-t[2],n=r-s}t[2]+=i+.5*n,t[3]+=.5*n}else this._elevationContext&&t[3]<b&&(this._tmpPoint.x=t[0],this._tmpPoint.y=t[1],this._tmpPoint.z=t[2],t[2]=l.evaluateElevationAlignmentAtPoint(this._tmpPoint,this._elevationProvider,this._elevationContext,this._renderCoordsHelper));return r.projectBoundingSphere(t,this._indexSR,t,this.engineSR),t}_getVisibilityObb(e){if(null!=e.visibilityObb)return e.visibilityObb;const t=e.serviceObb,i=.01*this._indexSREllipsoidRadius;return null==t||!e.mbs||!m.isValidObb(t)||this._isECEFOBBInLocalMode&&t.halfSize.some((e=>e>i))?null:(e.serviceObbInRenderSR=this._computeRenderObb(t,e.serviceObbInRenderSR,e.mbs[3],e.elevationRangeMin,e.elevationRangeMax),e.serviceObbInRenderSR)}_computeRenderObb(e,t,i,s,n){if(null==t)t=g.create();else if(m.isValidObb(t))return t;let r=0,a=0;if(this._elevationContext&&!Number.isNaN(s)&&Number.isFinite(s))switch(this._elevationContext.mode){case"relative-to-ground":r=this._elevationContext.geometryZWithOffset(e.center[2],this._renderCoordsHelper)+s-e.center[2],a=n-s;break;case"on-the-ground":r=s-e.center[2],a=n-s}else this._elevationContext&&i<b&&(this._tmpPoint.x=e.center[0],this._tmpPoint.y=e.center[1],this._tmpPoint.z=e.center[2],r=l.evaluateElevationAlignmentAtPoint(this._tmpPoint,this._elevationProvider,this._elevationContext,this._renderCoordsHelper)-e.center[2]);return a>0?(m.transformObb(e,this._indexSR,this._tmpObb,this.engineSR,r),g.computeOffsetObb(this._tmpObb,0,a,this._viewingMode,t)):m.transformObb(e,this._indexSR,t,this.engineSR,r),t}isNodeVisible(e){const t=this.getRenderMbs(e);if(!this._isMBSinClippingArea(t))return!1;if(!this._useFrustumCulling)return!0;const i=this._getVisibilityObb(e);return i?g.isVisible(i,this._frustum):a.intersectsSphere(this._frustum,c.wrap(t))}isGeometryVisible(e){if(!this._useFrustumCulling)return!0;const t=e.geometryObb;return null!=t?g.isVisible(t,this._frustum):this.isNodeVisible(e)}_isMBSinClippingArea(e){return null==this._clippingArea||m.intersectBoundingRectWithMbs(this._clippingArea,e)!==m.MbsIntersectResult.OUTSIDE}_screenSpaceDiameterMbs(t,i){const s=this.getRenderMbs(t),n=Math.sqrt(e.squaredDistance(s,this._camPos)),r=n-s[3];return this._updateMinMaxDistance(n),r<0?.5*Number.MAX_VALUE:i/r*this._screenSizeFactor}calcCameraDistance(e){return this.calcCameraDistanceToCenter(e)-this.getRenderMbs(e)[3]}calcCameraDistanceToCenter(t){const i=this.getRenderMbs(t),s=e.distance(i,this._camPos);return this._updateMinMaxDistance(s),s}calcAngleDependentLoD(t){const i=this.getRenderMbs(t),s=i[3],n=(Math.abs(i[0]*(i[0]-this._camPos[0])+i[1]*(i[1]-this._camPos[1])+i[2]*(i[2]-this._camPos[2]))/e.length(i)+s)/e.distance(i,this._camPos);return Math.min(1,n)}hasLOD(e){return e.lodMetric!==p.LodMetric.None}_getDistancePlanarMode(e,t){const i=e[0]-t[0],s=e[1]-t[1],n=e[2]-t[2],r=i*i+s*s,a=t[3];if(r<=a*a)return Math.abs(n);const o=Math.sqrt(r)-a;return Math.sqrt(n*n+o*o)}_getDistanceGlobeMode(t,i){const s=e.length(i),n=e.length(t)-s;e.scale(this._tmp0,t,e.dot(t,i)/e.squaredLength(t));const r=e.squaredDistance(i,this._tmp0),a=i[3];if(r<=a*a)return Math.abs(n);{const r=e.scale(this._tmp0,i,1/s),o=s,c=a*a/2/o,h=e.scale(this._tmp1,r,o-c),l=t,u=e.subtract(this._tmp2,l,h),d=e.subtract(this._tmp2,u,e.scale(this._tmp3,r,e.dot(r,u))),_=e.add(this._tmp2,h,e.scale(this._tmp2,d,a/e.length(d)));let p=e.distance(l,_);if(n>=2e5){const t=e.subtract(this._tmp1,l,_);let i=e.dot(t,r)/e.length(t);i<.08&&(i=1e-4),p/=i}return p}}_getDistance(e,t){return this.engineSR===n.getSphericalPCPF(this.engineSR)?this._getDistanceGlobeMode(e,t):this._getDistancePlanarMode(e,t)}_updateMinMaxDistance(e){e>0?(this.minDistance=Math.min(this.minDistance,e),this.maxDistance=Math.max(this.maxDistance,e)):(this.minDistance=0,this.maxDistance=Math.max(this.maxDistance,-e))}getLodLevel(e){if(e.lodMetric===p.LodMetric.None)return 0;if(0===e.childCount)return this.maxLodLevel;if(this._useFrustumCulling&&this._progressiveLoadFactor<1){const t=this._progressiveLoadFactor*this._screenspaceErrorBias,i=this._screenspaceErrorBias;return this.evaluateLODmetric(e,t)?this.evaluateLODmetric(e,i)?2:1:0}return this.evaluateLODmetric(e,this._screenspaceErrorBias)?this.maxLodLevel:0}evaluateLODmetric(e,t){switch(e.lodMetric){case p.LodMetric.ScreenSpaceRelative:{const i=this.getRenderMbs(e),s=this._getDistance(this._camPos,i),n=2*s/this._screenSizeFactor,r=s+i[3];return this._updateMinMaxDistance(r),e.maxError*t<=n}case p.LodMetric.MaxScreenThreshold:{let i=this._screenSpaceDiameterMbs(e,e.mbs[3]*t);return this._options.angleDependentLoD&&(i*=this.calcAngleDependentLoD(e)),i<e.maxError}case p.LodMetric.RemovedFeatureDiameter:return this._screenSpaceDiameterMbs(e,e.maxError)*t<10;case p.LodMetric.DistanceRangeFromDefaultCamera:return this.calcCameraDistance(e)>e.maxError*t}return!1}distToPOI(t){const i=this.getRenderMbs(t);return e.distance(i,this._poi)-i[3]}distCameraToPOI(){return e.distance(this._camPos,this._poi)}}return v}));
