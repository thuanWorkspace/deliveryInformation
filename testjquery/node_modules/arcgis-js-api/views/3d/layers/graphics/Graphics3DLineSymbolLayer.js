/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../geometry","../../../../core/Error","../../../../core/screenUtils","../../../../chunks/vec4f64","../../../../geometry/support/aaBoundingBox","../../../../renderers/support/renderingInfoUtils","./ElevationAligners","./elevationAlignmentUtils","./Graphics3DDrapedGraphicLayer","./Graphics3DObject3DGraphicLayer","./Graphics3DSymbolLayer","./interfaces","./lineUtils","../support/FastSymbolUpdates","../../support/debugFlags","../../support/engineContent/line","../../support/renderInfoUtils/line","../../webgl-engine/lib/Object3D","../../webgl-engine/lib/RenderGeometry","../../webgl-engine/materials/LineMarkerMaterial","../../webgl-engine/materials/lineStippleUtils","../../webgl-engine/materials/RibbonLineMaterial","../../../../geometry/Extent","../../../../geometry/Polygon"],(function(e,t,r,i,a,n,s,l,o,p,h,c,y,d,m,u,g,_,f,b,M,L,P,E,C){"use strict";const v=["polyline","polygon","extent"],R=new m.ConvertOptions({size:!0,color:!0,rotation:!1,opacity:!0});class D extends c.Graphics3DSymbolLayer{constructor(e,t,r,i){super(e,t,r,i)}async doLoad(){if(this._fastUpdates=m.initFastSymbolUpdatesState(this._context.renderer,R),!this._drivenProperties.size){if((null!=this.symbolLayer.size?this.symbolLayer.size:i.px2pt(1))<0)throw new r("graphics3dlinesymbollayer:invalid-size","Symbol sizes may not be negative values")}}_getMaterialParameters(e,t=!1){const r=this._getCombinedOpacityAndColor(t&&this._markerColor||this._materialColor);this._patternHidesLine&&!t&&(r[3]=0);const i={width:this._computeMaterialWidth(this.symbolLayer?.size),color:r,hasPolygonOffset:!0,join:this.symbolLayer.join||"miter",cap:d.parseCapType(this.symbolLayer.cap||"butt"),hasSlicePlane:this._context.slicePlaneEnabled,isClosed:e,stipplePattern:L.getStipplePatternForLinePattern(this.symbolLayer.pattern)};return this._fastUpdates?.visualVariables?{...i,...this._fastUpdates.materialParameters}:i}get _materialColor(){return this.symbolLayer.material?.color}get _markerColor(){return this.symbolLayer.marker?.color}get _lineMaterial(){return null==this._materials[S.Line]&&(this._materials[S.Line]=new P.RibbonLineMaterial(this._getMaterialParameters(!1)),this._context.stage.add(this._materials[S.Line])),this._materials[S.Line]}get _ringMaterial(){return null==this._materials[S.Ring]&&(this._materials[S.Ring]=new P.RibbonLineMaterial(this._getMaterialParameters(!0)),this._context.stage.add(this._materials[S.Ring])),this._materials[S.Ring]}get _wireframeLineMaterial(){return null==this._materials[S.LineWireframe]&&(this._materials[S.LineWireframe]=new P.RibbonLineMaterial({...this._getMaterialParameters(!1),wireframe:!0}),this._context.stage.add(this._materials[S.LineWireframe])),this._materials[S.LineWireframe]}get _wireframeRingMaterial(){return null==this._materials[S.RingWireframe]&&(this._materials[S.RingWireframe]=new P.RibbonLineMaterial({...this._getMaterialParameters(!0),wireframe:!0}),this._context.stage.add(this._materials[S.RingWireframe])),this._materials[S.RingWireframe]}get _markerMaterial(){return null==this._materials[S.Marker]&&null!=this.symbolLayer.marker&&(this._materials[S.Marker]=new M.LineMarkerMaterial({...this._getMaterialParameters(!1,!0),placement:this.symbolLayer.marker.placement,markerPrimitive:d.parseLineMarkerStyle(this.symbolLayer.marker.style)}),this._context.stage.add(this._materials[S.Marker])),this._materials[S.Marker]}destroy(){super.destroy(),this._forEachMaterial((e=>this._context.stage.remove(e))),this._materials.length=0}_getDrivenSize(e){return this._drivenProperties.size&&e.size?i.pt2px(s.getDriverAxisSizeValueAny(e.size)):1}_getDrivenColor(e){const t=a.fromValues(1,1,1,1);return this._drivenProperties.color&&e.color&&(t[0]=e.color[0],t[1]=e.color[1],t[2]=e.color[2],e.color.length>0&&(t[3]=e.color[3])),this._drivenProperties.opacity&&e.opacity&&(t[3]=e.opacity),t}createGraphics3DGraphic(e){const t=e.graphic;if(!this._validateGeometry(t.geometry,v,this.symbolLayer.type))return null;const r=this.setGraphicElevationContext(t);return this.ensureDrapedStatus("on-the-ground"===r.mode),this.draped?this._createAsOverlay(e,this._context.layer.uid):this._createAs3DShape(e,r,t.uid)}applyRendererDiff(e,t){for(const r in e.diff){if("visualVariables"!==r)return y.ApplyRendererDiffResult.RecreateSymbol;{const e=this._fastUpdates;if(!m.updateFastSymbolUpdatesState(e,t,R))return y.ApplyRendererDiffResult.RecreateSymbol;this._forEachMaterial((t=>t?.setParameters(e.materialParameters)))}}return y.ApplyRendererDiffResult.FastUpdate}prepareSymbolLayerPatch(e){if("partial"!==e.diff.type)return;const t=e.diff.diff,r={};"complete"===t.size?.type&&(r.width=this._computeMaterialWidth(t.size.newValue),delete t.size),"complete"===t.cap?.type&&(r.cap=d.parseCapType(t.cap.newValue??"butt"),delete t.cap);const i=this._prepareMarkerPatch(e,t);this._prepareMaterialPatch(e,t,i),e.symbolLayerStatePatches.push((()=>this._forEachMaterial((e=>e?.setParameters(r)))))}layerOpacityChanged(){this._forEachMaterial(((e,t)=>this._updateMaterialLayerOpacity(e,t===S.Marker)))}_forEachMaterial(e){this._materials.forEach(e)}_updateMaterialLayerOpacity(e,t=!1){if(null==e)return;const r=e.parameters.color,i=this.symbolLayer?.material?.color,n=this._patternHidesLine&&!t?0:this._getCombinedOpacity(i),s=a.fromValues(r[0],r[1],r[2],n);e.setParameters({color:s})}layerElevationInfoChanged(e,t,r){const i=this._elevationContext.mode,a=o.elevationModeChangeUpdateType(D.elevationModeChangeTypes,r,i);if(a!==o.SymbolUpdateType.UPDATE)return a;const n=o.needsElevationUpdates2D(i);return this.updateGraphics3DGraphicElevationInfo(e,t,(()=>n))}slicePlaneEnabledChanged(){const e={hasSlicePlane:this._context.slicePlaneEnabled};return this._forEachMaterial((t=>t?.setParameters(e))),!0}physicalBasedRenderingChanged(){return!0}_getGeometryAsPolygonOrPolyline(e){switch(e.type){case"extent":if(e instanceof E)return C.fromExtent(e);break;case"polygon":case"polyline":return e}return null}_createAs3DShape(e,t,r){const i=e.graphic,a=this._getGeometryAsPolygonOrPolyline(i.geometry),s="polygon"===a.type?a.rings:a.paths,p=new Array,c=n.create(),y=_.geometryToRenderInfo(a,this._context.elevationProvider,this._context.renderCoordsHelper,t),d="polygon"===a.type?"rings":"paths";this._logGeometryCreationWarnings(y,s,d,"LineSymbol3DLayer");for(let l=0;l<y.lines.length;l++){const t=y.lines[l],i=t.position,s=t.mapPositions;if(null!=this._context.clippingExtent&&(n.empty(c),n.expandWithBuffer(c,s),!n.intersectsClippingArea(c,this._context.clippingExtent)))continue;const o=this._createGeometry("polygon"===a.type?this._ringMaterial:this._lineMaterial,e,i,s,a.type,x.ELEVATED,r);p.push(o),u.debugFlags.LINE_WIREFRAMES&&p.push(o.instantiate({material:"polygon"===a.type?this._wireframeRingMaterial:this._wireframeLineMaterial})),null!=this._markerMaterial&&p.push(o.instantiate({material:this._markerMaterial}))}if(0===p.length)return null;const m=new f.Object3D({geometries:p,castShadow:!1,layerUid:this._context.layer.uid,graphicUid:r}),g=new h.Graphics3DObject3DGraphicLayer(this,m,p,null,null,l.sharedGeometryElevationAligner,t);return g.alignedSampledElevation=y.sampledElevation,g.needsElevationUpdates=o.needsElevationUpdates2D(t.mode),g}_createGeometry(e,t,r,i,a,n,s){const l=n===x.DRAPED?{spatialReference:this._context.overlaySR,renderCoordsHelper:this._context.renderCoordsHelper}:null,o="polygon"===a,p=this._fastUpdates?.visualVariables.color,h=this._fastUpdates?.visualVariables.size,c=this._fastUpdates?.visualVariables.opacity,y=this._context.stage.renderView.getObjectAndLayerIdColor({graphicUid:s,layerUid:this._context.layer.uid}),d={position:r,size:h?null:this._getDrivenSize(t.renderingInfo),color:p?null:this._getDrivenColor(t.renderingInfo),sizeFeature:h?m.getAttributeValue(h.field,t.graphic):null,colorFeature:p?m.getAttributeValue(p.field,t.graphic):null,opacityFeature:c?m.getAttributeValue(c.field,t.graphic):null};return g.createGeometry(e,{overlayInfo:l,removeDuplicateStartEnd:o,mapPositions:i,attributeData:d},y)}_createAsOverlay(e,t){const r=e.graphic,i=this._getGeometryAsPolygonOrPolyline(r.geometry),a="polygon"===i.type?i.rings:i.paths,s="polygon"===i.type?this._ringMaterial:this._lineMaterial;s.renderPriority=this._renderPriority;const l=u.debugFlags.LINE_WIREFRAMES?"polygon"===i.type?this._wireframeRingMaterial:this._wireframeLineMaterial:null,o=this._markerMaterial;null!=l&&(l.renderPriority=this._renderPriority-.001),null!=o&&(o.renderPriority=this._renderPriority-.002);const h=new Array,c=n.create(),y=n.empty(),d=_.geometryToRenderInfoDraped(i,this._context.overlaySR),m="polygon"===i.type?"rings":"paths";this._logGeometryCreationWarnings(d,a,m,"LineSymbol3DLayer");for(const p of d.lines){if(n.empty(c),n.expandWithBuffer(c,p.position),!n.intersectsClippingArea(c,this._context.clippingExtent))continue;n.expandWithAABB(y,c);const a=a=>{const n=this._createGeometry(a,e,p.position,void 0,i.type,x.DRAPED,r.uid),s=new b.RenderGeometry(n,{layerUid:t,graphicUid:r.uid});h.push(s)};if(null!=o){a(o);const e=this.symbolLayer.marker.placement;"begin"!==e&&"begin-end"!==e||n.expandWithBuffer(c,p.position,0,1),"end"!==e&&"begin-end"!==e||n.expandWithBuffer(c,p.position,p.position.length-3,1)}a(s),u.debugFlags.LINE_WIREFRAMES&&a(l)}return new p.Graphics3DDrapedGraphicLayer(this,h,y,this._context.drapeSourceRenderer)}get _patternHidesLine(){const e=this.symbolLayer.pattern;return null!=e&&"style"===e.type&&"none"===e.style}_computeMaterialWidth(e){return e=e??i.px2pt(1),this._drivenProperties.size?this._fastUpdates?.visualVariables.size?i.pt2px(1):1:i.pt2px(e)}_prepareMaterialPatch(e,t,r){const i=t.material;if(null==i)return void(r.changed&&r.useMaterialColor&&this._patchMaterialColor(this._getCombinedOpacityAndColor(this._materialColor),this._materials[S.Marker],e));if("collection"===i.type)return;const n="complete"===i.type?i.newValue?.color:"complete"===i.diff.color?.type?i.diff.color.newValue:null,s=this._getCombinedOpacityAndColor(n);r.useMaterialColor&&this._patchMaterialColor(a.clone(s),this._materials[S.Marker],e),this._patternHidesLine&&(s[3]=0),this._patchMaterialColor(s,this._materials[S.Line],e),delete t.material}_prepareMarkerPatch(e,t){const r=t.marker,i=this._markerMaterial;if(null==r||"partial"!==r.type||null==r.diff||null!=r.diff.placement||null!=r.diff.style&&"complete"!==r.diff.style.type||null!=r.diff.color&&"complete"!==r.diff.color.type||null==i)return{changed:!1,useMaterialColor:null==this._markerColor};const a=r.diff.color,n=null!=a,s=n?a.newValue:null,l=null==s&&null==this._markerColor;s&&this._patchMaterialColor(this._getCombinedOpacityAndColor(s),i,e);const o=r.diff.style?.newValue;return o&&e.symbolLayerStatePatches.push((()=>i.setParameters({markerPrimitive:d.parseLineMarkerStyle(o)}))),delete t.marker,{changed:n,useMaterialColor:l}}_patchMaterialColor(e,t,r){null!=t&&r.symbolLayerStatePatches.push((()=>t.setParameters({color:e})))}}var x,S;D.elevationModeChangeTypes={definedChanged:o.SymbolUpdateType.RECREATE,staysOnTheGround:o.SymbolUpdateType.NONE,onTheGroundChanged:o.SymbolUpdateType.RECREATE},function(e){e[e.DRAPED=0]="DRAPED",e[e.ELEVATED=1]="ELEVATED"}(x||(x={})),function(e){e[e.Line=0]="Line",e[e.Ring=1]="Ring",e[e.LineWireframe=2]="LineWireframe",e[e.RingWireframe=3]="RingWireframe",e[e.Marker=4]="Marker"}(S||(S={})),e.Graphics3DLineSymbolLayer=D,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
