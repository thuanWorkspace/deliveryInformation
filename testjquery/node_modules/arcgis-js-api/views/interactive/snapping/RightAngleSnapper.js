/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/vec2","../../../chunks/vec2f64","../../../chunks/vec3","../../../chunks/vec3f64","../../../support/elevationInfoUtils","../sketch/constraints","../sketch/normalizedPoint","./SnappingAlgorithm","./snappingUtils","./candidates/RightAngleSnappingCandidate","../support/viewUtils"],(function(e,t,n,i,r,o,s,a,c,h,d,p){"use strict";class g extends c.SnappingAlgorithm{snapNewVertex(e,t){const n=t.editGeometryOperations.data.components[0],i=n.vertices.length,r=[];if(i<2)return r;const{view:s}=this,c=p.vectorToScreenPoint(e,t.spatialReference,o.absoluteHeightElevationInfo,s),h=n.vertices[i-1];if(this.edgeExceedsShortLineThreshold(h.leftEdge,t)){const n=a.fromAnyMapPoint(h.pos,s,t),i=a.fromAnyMapPoint(h.leftEdge.leftVertex.pos,s,t);this._checkForSnappingCandidate(r,i,n,e,c,t)}const d=n.vertices[0];if(this.edgeExceedsShortLineThreshold(d.rightEdge,t)){const n=a.fromAnyMapPoint(d.pos,s,t),i=a.fromAnyMapPoint(d.rightEdge.rightVertex.pos,s,t);this._checkForSnappingCandidate(r,i,n,e,c,t)}return r}snapExistingVertex(e,t){const n=[],i=t.vertexHandle;if(i.component.vertices.length<3)return n;const{view:r}=this,s=p.vectorToScreenPoint(e,t.spatialReference,o.absoluteHeightElevationInfo,r),c=i.leftEdge,h=i.rightEdge;if(c?.leftVertex.leftEdge){const i=c.leftVertex.leftEdge;if(this.edgeExceedsShortLineThreshold(i,t)){const o=a.fromAnyMapPoint(i.rightVertex.pos,r,t),c=a.fromAnyMapPoint(i.leftVertex.pos,r,t);this._checkForSnappingCandidate(n,c,o,e,s,t)}}if(h?.rightVertex.rightEdge){const i=h.rightVertex.rightEdge;if(this.edgeExceedsShortLineThreshold(i,t)){const o=a.fromAnyMapPoint(i.leftVertex.pos,r,t),c=a.fromAnyMapPoint(i.rightVertex.pos,r,t);this._checkForSnappingCandidate(n,c,o,e,s,t)}}return n}_checkForSnappingCandidate(e,n,c,g,u,x){const{spatialReference:v,pointer:V}=x;t.subtract(l,c,n);const E=i.set(f,l[1],-l[0],0),S=t.dot(E,t.subtract(l,g,c))/t.squaredLength(E),m=a.fromVec3(t.scaleAndAdd(r.clone(g),c,E,S));if(h.squaredScreenDistance(u,p.vectorToScreenPoint(m,v,o.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(V)){if(this.isVertical(m,c)||this.isVertical(c,n))return;const t=i.scaleAndAdd(r.create(),c,E,Math.sign(S));e.push(new d.RightAngleSnappingCandidate({targetPoint:m,constraint:new s.VerticalHalfPlaneConstraint(c,a.fromVec3(t)),previousVertex:n,otherVertex:c,otherVertexType:d.OtherVertexType.CENTER,isDraped:"on-the-ground"===x.elevationInfo?.mode}))}}}const l=n.create(),f=r.create();e.RightAngleSnapper=g,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
