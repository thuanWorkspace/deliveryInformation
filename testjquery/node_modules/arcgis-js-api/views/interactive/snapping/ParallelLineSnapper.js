/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/vec2","../../../chunks/vec2f64","../../../support/elevationInfoUtils","../sketch/normalizedPoint","./Settings","./SnappingAlgorithm","./snappingUtils","./candidates/ParallelLineSnappingCandidate","../support/viewUtils","../../support/geometry2dUtils"],(function(e,t,n,i,r,o,s,a,l,c,d){"use strict";class h extends s.SnappingAlgorithm{snapNewVertex(e,t){const n=t.editGeometryOperations.data.components[0],o=n.edges.length,s=n.vertices.length,l=[];if(o<2)return l;const{view:d}=this,h=c.vectorToScreenPoint(e,t.spatialReference,i.absoluteHeightElevationInfo,d),p=r.fromAnyMapPoint(n.vertices[s-1].pos,d,t),g=r.fromAnyMapPoint(n.vertices[0].pos,d,t),f=n.edges[o-1];let u=f;do{if(this.edgeExceedsShortLineThreshold(u,t)){const n=a.editEdgeToSnappingEdge(u,d,t);this._checkEdgeForParallelLines(n,p,e,h,t,l),this._checkEdgeForParallelLines(n,g,e,h,t,l)}u=u.leftVertex.leftEdge}while(u&&u!==f);return l}snapExistingVertex(e,t){const n=[],o=t.vertexHandle,s=o.component;if(s.edges.length<3)return n;const{view:l}=this,d=c.vectorToScreenPoint(e,t.spatialReference,i.absoluteHeightElevationInfo,l),h=o.leftEdge,p=o.rightEdge,g=s.vertices[0],f=r.fromAnyMapPoint(g.pos,l,t),u=s.vertices.length,P=s.vertices[u-1],v=r.fromAnyMapPoint(P.pos,l,t),E=s.edges[0];let L=E;do{if(L!==h&&L!==p&&this.edgeExceedsShortLineThreshold(L,t)){const i=a.editEdgeToSnappingEdge(L,l,t);h&&this._checkEdgeForParallelLines(i,r.fromAnyMapPoint(h.leftVertex.pos,l,t),e,d,t,n),p&&this._checkEdgeForParallelLines(i,r.fromAnyMapPoint(p.rightVertex.pos,l,t),e,d,t,n),o===g?this._checkEdgeForParallelLines(i,v,e,d,t,n):o===P&&this._checkEdgeForParallelLines(i,f,e,d,t,n)}L=L.rightVertex.rightEdge}while(L&&L!==E);return n}_checkEdgeForParallelLines(e,n,s,h,g,f){const u=e.left,P=e.right;if(d.projectPointToLine(p,n,u,P),t.squaredDistance(p,n)<o.defaults.parallelLineThreshold)return;d.projectPointToLine(p,s,u,P,n);const{spatialReference:v,pointer:E}=g,L=r.fromValues(p[0],p[1],s[2]);if(a.squaredScreenDistance(h,c.vectorToScreenPoint(L,v,i.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(E)){if(this.isVertical(L,n)||this.isVertical(u,P))return;if(this._parallelToPreviousCandidate(e,f))return;f.push(new l.ParallelLineSnappingCandidate({referenceLine:e,lineStart:n,targetPoint:L,isDraped:"on-the-ground"===g.elevationInfo?.mode}))}}_parallelToPreviousCandidate(e,n){const i=e.left,r=e.right;for(const s of n)if(d.projectPointToLine(p,r,s.constraint.start,s.constraint.end,i),t.squaredDistance(p,r)<o.defaults.parallelLineThreshold)return s.addReferenceLine(e),!0;return!1}}const p=n.create();e.ParallelLineSnapper=h,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
