/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../core/mathUtils","../../chunks/vec2","../../chunks/vec2f64","../../chunks/vec3","../../chunks/vec3f64","../../geometry/support/plane","../3d/support/mathUtils","./geometry2dUtils"],(function(e,t,n,r,s,c,i,a,o){"use strict";function u({start:t,end:s,type:c},i,a){const o=[],u=n.subtract(F,s,t),d=n.subtract(H,t,i),l=n.squaredLength(u),p=2*n.dot(u,d),L=p*p-4*l*(n.squaredLength(d)-a*a);if(0===L){const s=-p/(2*l);(c===e.VerticalPlaneType.PLANE||s>=0)&&o.push(n.scaleAndAdd(r.create(),t,u,s))}else if(L>0){const s=Math.sqrt(L),i=(-p+s)/(2*l);(c===e.VerticalPlaneType.PLANE||i>=0)&&o.push(n.scaleAndAdd(r.create(),t,u,i));const a=(-p-s)/(2*l);(c===e.VerticalPlaneType.PLANE||a>=0)&&o.push(n.scaleAndAdd(r.create(),t,u,a))}return o}function d(t,r){const i=t.start,a=t.end,u=n.subtract(F,a,i),d=s.set(H,-u[1],u[0],0),l=r.start,p=r.end,L=s.sub(D,p,l),f=s.dot(L,d),A=s.set(_,i[0],i[1],0),y=s.sub(O,A,l),P=s.dot(y,d);if(Math.abs(f)<R)return Math.abs(P),[];const b=P/f,T=s.scaleAndAdd(S,l,L,b);if(r.type===o.LineType.RAY){const e=s.sub(U,T,l);if(s.dot(e,L)<-R)return[]}if(t.type===e.VerticalPlaneType.HALF_PLANE){const e=n.sub(U,T,i);if(n.dot(e,u)<-R)return[]}return[c.clone(T)]}function l(e,t){return E(m(Z,t[2],e),t)}function p(e,t){const n=0,s=V(m(Z,n,e),m(w,n,t)),c=[];for(const i of s)c.push(r.clone(i));return c}function L(e,t){return P(e,m(Z,e[2],t))}function f(e,t){return b(m(Z,e[2],t),e)}function A(e,t,r){const s=n.subtract(F,e,t),i=r/n.length(s),a=n.scaleAndAdd(c.create(),t,s,i);return a[2]=e[2],a}function y(e,t,r){return n.distance(e,t)-r}function P(e,{start:t,end:n,type:r}){const i=s.sub(F,e,t),a=s.sub(H,n,t),u=s.dot(i,a)/s.dot(a,a);return s.scaleAndAdd(c.create(),t,a,r===o.LineType.RAY?Math.max(u,0):u)}function b({start:e,end:t,type:n},r){const c=s.sub(F,r,e),i=s.sub(H,t,e);if(n===o.LineType.RAY&&s.dot(i,c)<-R)return s.distance(e,r);const a=s.cross(D,i,c);return s.len(a)/s.len(i)}const T=(()=>{const e=c.create(),t=c.create(),u=c.create();return({start:d,end:l},{center:p,radius:L,normal:f,slicePlane:A})=>{const y=c.create(),P=i.fromPositionAndNormal(p,f,x);if(k(i.distance(P,d),0)&&k(i.distance(P,l),0)){a.tangentFrame(f,e,t);const i=(r,c)=>(s.subtract(u,c,p),n.set(r,s.dot(u,e),s.dot(u,t)),r),y=o.intersectLineLikeAndCircle({start:i(Y,d),end:i(j,l),type:o.LineType.LINE},r.ZEROS,L),P=[];for(const[n,r]of y){const i=s.copy(c.create(),p);s.scaleAndAdd(i,i,e,n),s.scaleAndAdd(i,i,t,r),A&&!C(A,i)||P.push(i)}return P}return i.intersectLine(P,d,l,y)?!k(s.distance(y,p),L)||A&&!C(A,y)?[]:[y]:[]}})();function h({start:e,end:t,type:r},i,a){const u=[],d=s.subtract(F,t,e),l=n.subtract(H,e,i),p=n.squaredLength(d),L=2*n.dot(d,l),f=L*L-4*p*(n.squaredLength(l)-a*a);if(0===f){const t=-L/(2*p);(r===o.LineType.LINE||t>=0)&&u.push(s.scaleAndAdd(c.create(),e,d,t))}else if(f>0){const t=Math.sqrt(f),n=(-L+t)/(2*p);(r===o.LineType.LINE||n>=0)&&u.push(s.scaleAndAdd(c.create(),e,d,n));const i=(-L-t)/(2*p);(r===o.LineType.LINE||i>=0)&&u.push(s.scaleAndAdd(c.create(),e,d,i))}return u}function V(e,n){const r=e.start,i=e.end,a=n.start,u=n.end,d=s.sub(F,i,r),l=s.sub(H,u,a),p=s.sub(D,a,r),L=s.cross(_,d,l),f=s.dot(p,L);if(!t.floatEqualAbsolute(f,0,R))return[];const A=s.sqrLen(L);if(t.floatEqualAbsolute(A,0,R))return[];const y=s.cross(O,p,l),P=s.dot(y,L)/A,b=s.scaleAndAdd(S,r,d,P);if(e.type===o.LineType.RAY){const e=s.sub(U,b,r);if(s.dot(d,e)<-R)return[]}if(n.type===o.LineType.RAY){const e=s.sub(U,b,a);if(s.dot(l,e)<-R)return[]}return[c.clone(b)]}function E({start:e,end:t,type:n},r){const i=s.sub(F,r,e),a=s.sub(H,t,e),u=s.cross(D,a,i);if(s.sqrLen(u)/s.sqrLen(a)<R)switch(n){case o.LineType.LINE:return[c.clone(r)];case o.LineType.RAY:return s.dot(a,i)<-R?[]:[c.clone(r)]}return[]}function N(e,r,s){return t.floatEqualAbsolute(n.squaredDistance(s,e),r*r,R)?[c.clone(s)]:[]}function q(e,t,s,c){const[i,a]=e,[o,u]=s,d=o-i,l=u-a,p=d*d+l*l,L=Math.sqrt(p);if(L>t+c)return[];if(L<Math.abs(t-c))return[];if(k(L,0)&&k(t,c))return[];const f=(t*t-c*c+p)/(2*L),A=Math.sqrt(t*t-f*f),y=A*l/L,P=A*d/L,[b,T]=n.lerp(Y,e,s,f/L);return k(y,P)?[r.fromValues(b,T)]:[r.fromValues(b+y,T-P),r.fromValues(b-y,T+P)]}function m(e,t,{start:n,end:r,type:c}){return s.set(e.start,n[0],n[1],t),s.set(e.end,r[0],r[1],t),e.type=v[c],e}function g(e,t){return k(e[2],t[2])}function k(e,t){return Math.abs(e-t)<R}function I(e,t){return t.filter((t=>C(e,t)))}function C(e,t){return i.isPointInside(e,t)}var M;e.VerticalPlaneType=void 0,(M=e.VerticalPlaneType||(e.VerticalPlaneType={}))[M.PLANE=0]="PLANE",M[M.HALF_PLANE=1]="HALF_PLANE";const v={[e.VerticalPlaneType.PLANE]:o.LineType.LINE,[e.VerticalPlaneType.HALF_PLANE]:o.LineType.RAY},R=1e-6,Y=r.create(),j=r.create(),F=c.create(),H=c.create(),D=c.create(),_=c.create(),O=c.create(),S=c.create(),U=c.create(),x=i.create(),Z={start:c.create(),end:c.create(),type:o.LineType.LINE},w={start:c.create(),end:c.create(),type:o.LineType.LINE};Object.defineProperty(e,"LineType",{enumerable:!0,get:()=>o.LineType}),e.epsilon=R,e.intersectLineAndPoint=E,e.intersectLineLikeAndCircle=T,e.intersectLineLikeAndVerticalCylinder=h,e.intersectLineLikes=V,e.intersectVerticalCylinderAndPoint=N,e.intersectVerticalCylinders=q,e.intersectVerticalPlaneAndLineLike=d,e.intersectVerticalPlaneAndPoint=l,e.intersectVerticalPlaneAndVerticalCylinder=u,e.intersectVerticalPlanes=p,e.isClose=k,e.isPointInsidePlane=C,e.pointToLineLikeDistance=b,e.pointToVerticalCylinderDistance=y,e.pointToVerticalPlaneDistance=f,e.pointsInsidePlane=I,e.projectPointToLineLike=P,e.projectPointToVerticalCylinder=A,e.projectPointToVerticalPlane=L,e.vectorsHaveCloseZ=g,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
