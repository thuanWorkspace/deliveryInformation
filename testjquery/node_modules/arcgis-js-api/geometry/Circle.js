/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../chunks/tslib.es6","../core/unitUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/arrayUtils","../core/has","../core/accessorSupport/decorators/subclass","./ellipsoidUtils","./Point","./Polygon","./support/geodesicUtils","./support/webMercatorUtils","./support/WKIDUnitConversion"],(function(e,r,t,s,i,o,c,a,n,p,l,d,u){"use strict";var h;let g=h=class extends p{constructor(...e){super(...e),this.center=null,this.geodesic=!1,this.numberOfPoints=60,this.radius=1e3,this.radiusUnit="meters"}normalizeCtorArgs(e,r){let t;if(e?.center)t=e;else{if(e?.rings)return super.normalizeCtorArgs(e,r);t={center:e}}return{...super.normalizeCtorArgs(),...t,...r}}initialize(){const e=this.center,t=this.numberOfPoints;if(this.hasZ=e?.hasZ??!1,0!==this.rings.length||!e)return;const s=r.convertUnit(this.radius,this.radiusUnit,"meters"),i=e.spatialReference;let o,c="geographic";if(i.isWebMercator?c="webMercator":(null!=(i.wkid&&u[i.wkid])||(i.wkt2||i.wkt)&&r.isProjectedWKT(i.wkt2||i.wkt))&&(c="projected"),this.geodesic){let r;switch(c){case"webMercator":r=d.webMercatorToGeographic(e);break;case"projected":console.error("Creating a geodesic circle requires the center to be specified in web mercator or geographic coordinate system");break;case"geographic":r=e}o=this._createGeodesicCircle(r,s,t),"webMercator"===c&&(o=d.geographicToWebMercator(o))}else{let i;"webMercator"===c||"projected"===c?i=s/r.getMetersPerUnit(e.spatialReference):"geographic"===c&&(i=r.lengthToDegrees(s,"meters",a.getReferenceEllipsoid(e.spatialReference).radius)),o=this._createPlanarCircle(e,i,t)}this.spatialReference=o.spatialReference,this.addRing(o.rings[0])}clone(){const{center:e,numberOfPoints:r,radius:t,radiusUnit:s,geodesic:i}=this;return new h({center:e?.clone(),numberOfPoints:r,radius:t,radiusUnit:s,geodesic:i})}_createGeodesicCircle(e,r,t){let s=0;const i=[];for(;s<360;){const o=[0,0],c=[e.x,e.y];l.directGeodeticSolver(o,c,s,r),this.hasZ&&o.push(e.z),i.push(o),s+=360/t}return i.push(i[0]),new p(i)}_createPlanarCircle(e,r,t){const s=[],i=2*Math.PI/t;for(let o=0;o<t;++o){const t=i*o,c=[e.x+Math.cos(-t)*r,e.y+Math.sin(-t)*r];this.hasZ&&c.push(e.z),s.push(c)}return s.push(s[0]),new p({spatialReference:e.spatialReference,rings:[s]})}};e.__decorate([t.property({type:n})],g.prototype,"center",void 0),e.__decorate([t.property()],g.prototype,"geodesic",void 0),e.__decorate([t.property()],g.prototype,"numberOfPoints",void 0),e.__decorate([t.property()],g.prototype,"radius",void 0),e.__decorate([t.property()],g.prototype,"radiusUnit",void 0),g=h=e.__decorate([c.subclass("esri.geometry.Circle")],g);return g}));
