/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../geometry","../../core/Error","../../core/unitUtils","./geodesicConstants","./spatialReferenceUtils","../Polyline","../Polygon","../Point","../SpatialReference"],(function(e,t,n,i,s,a,o,r,c,l){"use strict";function h(e){if(!e)return null;if(a.isGeographic(e)&&e.wkid){const t=s.spheroids[e.wkid];if(t)return t}const t=e.wkt2||e.wkt;if(t){const e=u(t);if(e)return e}return null}function u(e){const t=s.wktSpheroidRegex.exec(e);if(!t||2!==t.length)return null;const n=t[1].split(",");if(!n||n.length<3)return null;const i=parseFloat(n[1]),a=parseFloat(n[2]);if(isNaN(i)||isNaN(a))return null;return{a:i,f:0===a?0:1/a}}function p(e){const t=h(e??l.WGS84);if(f(t))return t;const n=t.a*(1-t.f);return Object.assign(t,{b:n,eSq:1-(n/t.a)**2,radius:(2*t.a+n)/3,densificationRatio:1e4/((2*t.a+n)/3)})}function f(e){return null!=e&&"b"in e&&"eSq"in e&&"radius"in e}function d(e){return null!=e&&e<0?e+360:e}function g(e,t,n){const{a:i,eSq:a}=p(n),o=Math.sqrt(a),r=Math.sin(t[1]*s.toRadians),c=i*t[0]*s.toRadians;let l;if(a>0){l=i*((1-a)*(r/(1-a*(r*r))-1/(2*o)*Math.log((1-o*r)/(1+o*r))))*.5}else l=i*r;return e[0]=c,e[1]=l,e}function m(e){return null!==h(e)}function M(e,t="square-meters"){if(e.some((e=>!m(e.spatialReference))))throw new n("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const s=[];for(let n=0;n<e.length;n++){const t=e[n],i=t.spatialReference,{radius:a,densificationRatio:o}=p(i),r=a*o;s.push(R(t,r))}const a=[],o=[0,0],r=[0,0];for(let n=0;n<s.length;n++){const{rings:e,spatialReference:c}=s[n];let l=0;for(let t=0;t<e.length;t++){const n=e[t];g(o,n[0],c),g(r,n[n.length-1],c);let i=r[0]*o[1]-o[0]*r[1];for(let e=0;e<n.length-1;e++)g(o,n[e+1],c),g(r,n[e],c),i+=r[0]*o[1]-o[0]*r[1];l+=i}l=i.convertUnit(l,"square-meters",t),a.push(l/-2)}return a}function w(e,t="meters"){if(!e)throw new n("geodesic-lengths:invalid-geometries","the input geometries type is not supported");const s=e.some((e=>!m(e.spatialReference)));if(s)throw new n("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const a=[];for(let n=0;n<e.length;n++){const s=e[n],{spatialReference:o}=s,r="polyline"===s.type?s.paths:s.rings;let c=0;for(let e=0;e<r.length;e++){const t=r[e];let n=0;for(let e=1;e<t.length;e++){const i=t[e-1][0],s=t[e][0],a=t[e-1][1],r=t[e][1];if(a!==r||i!==s){const e=new y;z(e,[i,a],[s,r],o),n+=e.distance}}c+=n}c=i.convertUnit(c,"meters",t),a.push(c)}return a}function R(e,t){if("polyline"!==e.type&&"polygon"!==e.type)throw new n("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:i}=e;if(!m(i))throw new n("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const s="polyline"===e.type?e.paths:e.rings,a=[],c=[0,0],l=new y;for(const n of s){const e=[];a.push(e),e.push([n[0][0],n[0][1]]);let s,o,r=n[0][0],h=n[0][1];for(let a=0;a<n.length-1;a++){if(s=n[a+1][0],o=n[a+1][1],r===s&&h===o)continue;const u=[r,h];z(l,[r,h],[s,o],i);const{azimuth:p,distance:f}=l,d=f/t;if(d>1){for(let n=1;n<=d-1;n++){v(c,u,p,n*t,i),e.push(c.slice(0))}v(c,u,p,(f+Math.floor(d-1)*t)/2,i),e.push(c.slice(0))}v(c,u,p,f,i),e.push(c.slice(0)),r=c[0],h=c[1]}}return"polyline"===e.type?new o({paths:a,spatialReference:i}):new r({rings:a,spatialReference:i})}class y{constructor(e=0,t=void 0,n=void 0){this.distance=e,this.azimuth=t,this.reverseAzimuth=n}}function v(e,t,n,i,a){const o=t[0],r=t[1],c=o*s.toRadians,l=r*s.toRadians,h=(n??0)*s.toRadians,{a:u,b:f,f:d}=p(a),g=Math.sin(h),m=Math.cos(h),M=(1-d)*Math.tan(l),w=1/Math.sqrt(1+M*M),R=M*w,y=Math.atan2(M,m),v=w*g,z=v*v,b=1-z,S=b*(u*u-f*f)/(f*f),q=1+S/16384*(4096+S*(S*(320-175*S)-768)),x=S/1024*(256+S*(S*(74-47*S)-128));let A,N,k,G,P=i/(f*q),U=2*Math.PI;for(;Math.abs(P-U)>1e-12;)k=Math.cos(2*y+P),A=Math.sin(P),N=Math.cos(P),G=x*A*(k+x/4*(N*(2*k*k-1)-x/6*k*(4*A*A-3)*(4*k*k-3))),U=P,P=i/(f*q)+G;const D=R*A-w*N*m,F=Math.atan2(R*N+w*A*m,(1-d)*Math.sqrt(z+D*D)),j=d/16*b*(4+d*(4-3*b)),I=Math.atan2(A*g,w*N-R*A*m)-(1-j)*d*v*(P+j*A*(k+j*N*(2*k*k-1))),O=F/s.toRadians,C=(c+I)/s.toRadians;return e[0]=C,e[1]=O,e}function z(e,t,n,i){const a=t[0]*s.toRadians,o=t[1]*s.toRadians,r=n[0]*s.toRadians,c=n[1]*s.toRadians,{a:l,b:h,f:u,radius:f}=p(i),d=r-a,g=Math.atan((1-u)*Math.tan(o)),m=Math.atan((1-u)*Math.tan(c)),M=Math.sin(g),w=Math.cos(g),R=Math.sin(m),y=Math.cos(m);let v,z,b,S,q,x,A,N,k,G,P=1e3,U=d;do{if(A=Math.sin(U),N=Math.cos(U),b=Math.sqrt(y*A*(y*A)+(w*R-M*y*N)*(w*R-M*y*N)),0===b)return e.distance=0,e.azimuth=void 0,e.reverseAzimuth=void 0,e;q=M*R+w*y*N,x=Math.atan2(b,q),k=w*y*A/b,z=1-k*k,S=q-2*M*R/z,isNaN(S)&&(S=0),G=u/16*z*(4+u*(4-3*z)),v=U,U=d+(1-G)*u*k*(x+G*b*(S+G*q*(2*S*S-1)))}while(Math.abs(U-v)>1e-12&&--P>0);if(0===P){const t=f,n=Math.acos(Math.sin(o)*Math.sin(c)+Math.cos(o)*Math.cos(c)*Math.cos(r-a))*t,i=r-a,l=Math.sin(i)*Math.cos(c),h=Math.cos(o)*Math.sin(c)-Math.sin(o)*Math.cos(c)*Math.cos(i),u=Math.atan2(l,h);return e.azimuth=u/s.toRadians,e.distance=n,e.reverseAzimuth=void 0,e}const D=z*(l*l-h*h)/(h*h),F=D/1024*(256+D*(D*(74-47*D)-128)),j=h*(1+D/16384*(4096+D*(D*(320-175*D)-768)))*(x-F*b*(S+F/4*(q*(2*S*S-1)-F/6*S*(4*b*b-3)*(4*S*S-3)))),I=Math.atan2(y*Math.sin(U),w*R-M*y*Math.cos(U)),O=Math.atan2(w*Math.sin(U),w*R*Math.cos(U)-M*y);return e.azimuth=I/s.toRadians,e.distance=j,e.reverseAzimuth=O/s.toRadians,e}function b(e,t,s="meters"){if(!e||!t)throw new n("geodesic-distance:missing-parameters","one or both input parameters are missing");if(!e.spatialReference||!t.spatialReference)throw new n("geodesic-distance:invalid-parameters","one or both input points do not have a spatial reference");if(!a.equals(e.spatialReference,t.spatialReference))throw new n("geodesic-distance:invalid-parameters","spatial references of input parameters do not match");const{spatialReference:o}=e;if(!m(o))throw new n("geodesic-distance:not-supported","input geometry spatial reference is not supported");if(e.x===t.x&&e.y===t.y)return new y(0,0,0);const r=new y;return z(r,[e.x,e.y],[t.x,t.y],o),r.distance=i.convertUnit(r.distance,"meters",s),r.azimuth=d(r.azimuth),r.reverseAzimuth=d(r.reverseAzimuth),r}function S(e,t,i){if(!e||null==t||null==i)throw new n("point-from-distance:missing-parameters","one or more input parameters are missing or undefined");if(i<0||i>360)throw new n("point-from-distance:-of-bounds","azimuth is restricted to angles between, and including, 0° to 360° degrees");if(!e.spatialReference)throw new n("point-from-distance:missing-spatial-reference","the input point must have a spatial reference");const{spatialReference:s}=e;if(!m(s))throw new n("geodesic-distance:not-supported","input geometry spatial reference is not supported");const a=[0,0];return v(a,[e.x,e.y],i,t,s),new c({x:a[0],y:a[1],spatialReference:s})}e.InverseGeodeticSolverResult=y,e.directGeodeticSolver=v,e.geodesicAreas=M,e.geodesicDensify=R,e.geodesicDistance=b,e.geodesicLengths=w,e.inverseGeodeticSolver=z,e.isSupported=m,e.pointFromDistance=S,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
