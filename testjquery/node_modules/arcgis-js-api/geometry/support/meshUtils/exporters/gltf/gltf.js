/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../../../../core/Error","../../../../../core/Logger","../../../../../core/MapUtils","../../../../../core/mathUtils","../../../../../core/unitUtils","../../../../../chunks/mat4","../../../../../chunks/mat4f64","../../../../../chunks/quat","../../../../../chunks/quatf64","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../MeshGeoreferencedRelativeVertexSpace","../../../MeshGeoreferencedVertexSpace","../../../MeshMaterialMetallicRoughness","../../georeference","./buffer","./geometry","./types","./imageutils","../../../../../views/3d/glTF/internal/resourceUtils","../../../../../views/webgl/enums"],(function(e,t,s,r,a,i,n,o,l,u,c,h,f,p,d,g,m,T,x,_,M,A){"use strict";const R=s.getLogger("gltf");class E{constructor(e,t,s){this.params={},this._materialMap=new Array,this._imageMap=new Map,this._textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{options:t,binChunkBuffer:null,promises:[]}},s&&(this.params=s),this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras,s=t.options.bufferOutputType===x.BufferOutputType.GLB||t.options.imageOutputType===x.ImageOutputType.GLB;s&&(t.binChunkBuffer=new m.Buffer(this.gltf)),e.forEachScene((e=>{this._addScene(e)})),s&&t.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode((e=>{t.nodes||(t.nodes=[]),t.nodes.push(...this._addNodes(e))})),this.gltf.scenes.push(t)}_addNodes(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;c.exactEquals(s,h.ZEROS)||(t.translation=h.clone(s));const r=e.rotation;l.exactEquals(r,u.IDENTITY)||(t.rotation=u.clone(r));const a=e.scale;c.exactEquals(a,h.ONES)||(t.scale=h.clone(a));const i=this.gltf.nodes.length;if(this.gltf.nodes.push(t),e.mesh&&e.mesh.vertexAttributes.position){const s=this._createMeshes(e.mesh),r=[i];if(1===s.length)this._addMesh(t,s[0]);else for(const e of s){const t={};this._addMesh(t,e),r.push(this.gltf.nodes.length),this.gltf.nodes.push(t)}return r}return e.forEachNode((e=>{t.children||(t.children=[]),t.children.push(...this._addNodes(e))})),[i]}_addMesh(e,t){var s;(s=this.gltf).meshes??(s.meshes=[]);const r=this.gltf.meshes.length;this.gltf.meshes.push(t),e.mesh=r}_createMeshes(e){const s=this.gltf.extras,r=s.options.bufferOutputType===x.BufferOutputType.GLB;let a;a=r?s.binChunkBuffer:new m.Buffer(this.gltf),this.params.origin||(this.params.origin=T.computeOrigin(e));const{ignoreLocalTransform:l}=this.params,u=l?null:e.transform,{vertexSpace:c,spatialReference:d}=e,_=e.vertexAttributes;let M=null;if("local"===c.type){const e=i.getMetersPerCartesianUnitForSR(d);n.scale(b,u?.localMatrix??o.IDENTITY,[e,e,e]),M=g.applyTransform(_,b)}else{const e=l?c.isRelative?new f({origin:h.clone(c.origin)}):new p:c;M=g.ungeoreferenceByTransform(_,e,u,this.params.origin,{geographic:this.params.geographic,unit:"meters"})}if(null==M)throw new t("Error during gltf export.");_.position&&M.position===_.position&&(M.position=_.position.slice()),_.normal&&M.normal===_.normal&&(M.normal=_.normal.slice()),_.tangent&&M.tangent===_.tangent&&(M.tangent=_.tangent.slice()),T.smoothNormals(e,M),this._flipYZAxis(M);const R=a.addBufferView(A.DataType.FLOAT,x.AttributeType.VEC3,x.TargetBuffer.ARRAY_BUFFER);let E,O,y,B;M.normal&&(E=a.addBufferView(A.DataType.FLOAT,x.AttributeType.VEC3,x.TargetBuffer.ARRAY_BUFFER)),_.uv&&(O=a.addBufferView(A.DataType.FLOAT,x.AttributeType.VEC2,x.TargetBuffer.ARRAY_BUFFER)),M.tangent&&(y=a.addBufferView(A.DataType.FLOAT,x.AttributeType.VEC4,x.TargetBuffer.ARRAY_BUFFER)),_.color&&(B=a.addBufferView(A.DataType.UNSIGNED_BYTE,x.AttributeType.VEC4,x.TargetBuffer.ARRAY_BUFFER)),R.startAccessor("POSITION"),E&&E.startAccessor("NORMAL"),O&&O.startAccessor("TEXCOORD_0"),y&&y.startAccessor("TANGENT"),B&&B.startAccessor("COLOR_0");const w=M.position.length/3,{position:I,normal:N,tangent:C}=M,{color:S,uv:v}=_;for(let t=0;t<w;++t)R.push(I[3*t]),R.push(I[3*t+1]),R.push(I[3*t+2]),E&&null!=N&&(E.push(N[3*t]),E.push(N[3*t+1]),E.push(N[3*t+2])),O&&null!=v&&(O.push(v[2*t]),O.push(v[2*t+1])),y&&null!=C&&(y.push(C[4*t]),y.push(C[4*t+1]),y.push(C[4*t+2]),y.push(C[4*t+3])),B&&null!=S&&(B.push(S[4*t]),B.push(S[4*t+1]),B.push(S[4*t+2]),B.push(S[4*t+3]));const D=R.endAccessor(),L=this._addAccessor(R.index,D);let F,k,V,G,U;if(E){const e=E.endAccessor();F=this._addAccessor(E.index,e)}if(O){const e=O.endAccessor();k=this._addAccessor(O.index,e)}if(y){const e=y.endAccessor();V=this._addAccessor(y.index,e)}if(B){const e=B.endAccessor();G=this._addAccessor(B.index,e)}const Y=[];return e.components&&e.components.length>0&&e.components[0].faces?(U=a.addBufferView(A.DataType.UNSIGNED_INT,x.AttributeType.SCALAR,x.TargetBuffer.ELEMENT_ARRAY_BUFFER),this._addMeshVertexIndexed(U,e.components,Y,L,F,k,V,G)):this._addMeshVertexNonIndexed(e.components,Y,L,F,k,V,G),R.finalize(),E&&E.finalize(),O&&O.finalize(),y&&y.finalize(),U&&U.finalize(),B&&B.finalize(),r||a.finalize(),Y}_flipYZAxis({position:e,normal:t,tangent:s}){this._flipYZBuffer(e,3),this._flipYZBuffer(t,3),this._flipYZBuffer(s,4)}_flipYZBuffer(e,t){if(null!=e)for(let s=1,r=2;s<e.length;s+=t,r+=t){const t=e[s],a=e[r];e[s]=a,e[r]=-t}}_addMaterial(e){if(null===e)return;const t=this._materialMap.indexOf(e);if(-1!==t)return t;this.gltf.materials||(this.gltf.materials=[]);const s={};switch(e.alphaMode){case"mask":s.alphaMode=x.AlphaMode.MASK;break;case"auto":case"blend":s.alphaMode=x.AlphaMode.BLEND}.5!==e.alphaCutoff&&(s.alphaCutoff=e.alphaCutoff),e.doubleSided&&(s.doubleSided=e.doubleSided),s.pbrMetallicRoughness={};const r=e=>e**2.1,a=e=>{const t=e.toRgba();return t[0]=r(t[0]/255),t[1]=r(t[1]/255),t[2]=r(t[2]/255),t};if(null!=e.color&&(s.pbrMetallicRoughness.baseColorFactor=a(e.color)),null!=e.colorTexture&&(s.pbrMetallicRoughness.baseColorTexture=this._createTextureInfo(e.colorTexture,e.colorTextureTransform)),null!=e.normalTexture&&(s.normalTexture=this._createTextureInfo(e.normalTexture,e.normalTextureTransform)),e instanceof d){if(null!=e.emissiveTexture&&(s.emissiveTexture=this._createTextureInfo(e.emissiveTexture,e.emissiveTextureTransform)),null!=e.emissiveColor){const t=a(e.emissiveColor);s.emissiveFactor=[t[0],t[1],t[2]]}null!=e.occlusionTexture&&(s.occlusionTexture=this._createTextureInfo(e.occlusionTexture,e.occlusionTextureTransform)),null!=e.metallicRoughnessTexture&&(s.pbrMetallicRoughness.metallicRoughnessTexture=this._createTextureInfo(e.metallicRoughnessTexture,e.metallicRoughnessTextureTransform)),s.pbrMetallicRoughness.metallicFactor=e.metallic,s.pbrMetallicRoughness.roughnessFactor=e.roughness}else s.pbrMetallicRoughness.metallicFactor=1,s.pbrMetallicRoughness.roughnessFactor=1,R.warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");const i=this.gltf.materials.length;return this.gltf.materials.push(s),this._materialMap.push(e),i}_createTextureInfo(e,t){const s={index:this._addTexture(e)};return t?(s.extensions||(s.extensions={}),s.extensions.KHR_texture_transform={scale:t.scale,offset:t.offset,rotation:a.deg2rad(t.rotation)},s):s}_addTexture(e){const t=this.gltf.textures??[];return this.gltf.textures=t,r.getOrCreateMapValue(this._textureMap,e,(()=>{const s={sampler:this._addSampler(e),source:this._addImage(e)},r=t.length;return t.push(s),r}))}_addImage(e){const t=this._imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{const t=e.data;s.extras=t;for(let e=0;e<this.gltf.images.length;++e)if(t===this.gltf.images[e].extras)return e;const r=this.gltf.extras;switch(r.options.imageOutputType){case x.ImageOutputType.GLB:{const e=r.binChunkBuffer.addBufferView(A.DataType.UNSIGNED_BYTE,x.AttributeType.SCALAR);if(M.isEncodedMeshTexture(t))null!=t.data&&e.writeOutToBuffer(t.data,0);else{const r=_.imageToArrayBuffer(t).then((({data:e,type:t})=>(s.mimeType=t,e)));e.writeAsync(r).then((()=>{e.finalize()}))}s.bufferView=e.index;break}case x.ImageOutputType.DataURI:if(M.isEncodedMeshTexture(t)){R.warnOnce("Image export for basis compressed textures not available.");break}s.uri=_.imageToDataURI(t);break;default:if(M.isEncodedMeshTexture(t)){R.warnOnce("Image export for basis compressed textures not available.");break}r.promises.push(_.imageToArrayBuffer(t).then((({data:e,type:t})=>{s.uri=e,s.mimeType=t})))}}const r=this.gltf.images.length;return this.gltf.images.push(s),this._imageMap.set(e,r),r}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=A.TextureWrapMode.REPEAT,s=A.TextureWrapMode.REPEAT;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=A.TextureWrapMode.CLAMP_TO_EDGE,s=A.TextureWrapMode.CLAMP_TO_EDGE;break;case"mirror":t=A.TextureWrapMode.MIRRORED_REPEAT,s=A.TextureWrapMode.MIRRORED_REPEAT}else{switch(e.wrap.vertical){case"clamp":s=A.TextureWrapMode.CLAMP_TO_EDGE;break;case"mirror":s=A.TextureWrapMode.MIRRORED_REPEAT}switch(e.wrap.horizontal){case"clamp":t=A.TextureWrapMode.CLAMP_TO_EDGE;break;case"mirror":t=A.TextureWrapMode.MIRRORED_REPEAT}}const r={wrapS:t,wrapT:s};for(let i=0;i<this.gltf.samplers.length;++i)if(JSON.stringify(r)===JSON.stringify(this.gltf.samplers[i]))return i;const a=this.gltf.samplers.length;return this.gltf.samplers.push(r),a}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const r=this.gltf.accessors.length;return this.gltf.accessors.push(s),r}_addMeshVertexIndexed(e,t,s,r,a,i,n,o){const l=new Map;for(const u of t){e.startAccessor("INDICES");for(let s=0;s<u.faces.length;++s)e.push(u.faces[s]);const t=e.endAccessor(),c={attributes:{POSITION:r},indices:this._addAccessor(e.index,t),material:this._addMaterial(u.material)};a&&"flat"!==u.shading&&(c.attributes.NORMAL=a),i&&(c.attributes.TEXCOORD_0=i),n&&"flat"!==u.shading&&(c.attributes.TANGENT=n),o&&(c.attributes.COLOR_0=o);const h=l.get(u.name);if(h)h.primitives.push(c);else{const e={name:u.name,primitives:[c]};l.set(u.name,e),s.push(e)}}}_addMeshVertexNonIndexed(e,t,s,r,a,i,n){const o={primitives:[]};t.push(o);const l={attributes:{POSITION:s}};r&&(l.attributes.NORMAL=r),a&&(l.attributes.TEXCOORD_0=a),i&&(l.attributes.TANGENT=i),n&&(l.attributes.COLOR_0=n),e&&(l.material=this._addMaterial(e[0].material)),o.primitives.push(l)}}const b=o.create();e.GLTF=E,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
