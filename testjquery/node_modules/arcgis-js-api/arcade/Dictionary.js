/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["./ArcadeDate","./deepClone","./executionError","./ImmutableArray","../chunks/languageUtils","../geometry/Geometry"],(function(t,e,i,s,r,n){"use strict";function o(t,e,i=!1,s=!1){if(null==t)return null;if(r.isNumber(t))return r.toNumber(t);if(r.isBoolean(t))return r.toBoolean(t);if(r.isString(t))return r.toString(t);if(r.isDate(t))return r.toDate(t,e);if(r.isDateOnly(t))return t;if(r.isTime(t))return t;if(r.isArray(t)){const r=[];for(const n of t)r.push(o(n,e,i,s));return r}if(s&&r.isGeometry(t))return t;const n=new a;n.immutable=!1;for(const r of Object.keys(t)){const a=t[r];void 0!==a&&n.setField(r,o(a,e,i,s))}return n.immutable=i,n}class a{constructor(t){this.declaredClass="esri.arcade.Dictionary",this.attributes=null,this.plain=!1,this.immutable=!0,this.attributes=t instanceof a?t.attributes:t??{}}field(t){const e=t.toLowerCase(),s=this.attributes[t];if(void 0!==s)return s;for(const i in this.attributes)if(i.toLowerCase()===e)return this.attributes[i];throw new i.ArcadeExecutionError(null,i.ExecutionErrorCodes.FieldNotFound,null,{key:t})}setField(e,s){if(this.immutable)throw new i.ArcadeExecutionError(null,i.ExecutionErrorCodes.Immutable,null);if(r.isFunctionParameter(s))throw new i.ArcadeExecutionError(null,i.ExecutionErrorCodes.NoFunctionInDictionary,null);const n=e.toLowerCase();s instanceof Date&&(s=t.ArcadeDate.dateJSToArcadeDate(s));if(void 0===this.attributes[e]){for(const t in this.attributes)if(t.toLowerCase()===n)return void(this.attributes[t]=s);this.attributes[e]=s}else this.attributes[e]=s}hasField(t){const e=t.toLowerCase();if(void 0!==this.attributes[t])return!0;for(const i in this.attributes)if(i.toLowerCase()===e)return!0;return!1}keys(){let t=[];for(const e in this.attributes)t.push(e);return t=t.sort(),t}castToText(e=!1){let i="";for(const o in this.attributes){""!==i&&(i+=",");const a=this.attributes[o];null==a?i+=JSON.stringify(o)+":null":r.isBoolean(a)||r.isNumber(a)||r.isString(a)?i+=JSON.stringify(o)+":"+JSON.stringify(a):a instanceof n?i+=JSON.stringify(o)+":"+r.toStringExplicit(a):a instanceof s||a instanceof Array?i+=JSON.stringify(o)+":"+r.toStringExplicit(a,null,e):a instanceof t.ArcadeDate?i+=e?JSON.stringify(o)+":"+JSON.stringify(a.getTime()):JSON.stringify(o)+":"+a.stringify():null!==a&&"object"==typeof a&&void 0!==a.castToText&&(i+=JSON.stringify(o)+":"+a.castToText(e))}return"{"+i+"}"}static convertObjectToArcadeDictionary(t,e,i=!0,s=!1){const r=new a;r.immutable=!1;for(const n in t){const a=t[n];void 0!==a&&r.setField(n.toString(),o(a,e,i,s))}return r.immutable=i,r}static convertJsonToArcade(t,e,i=!1){return o(t,e,i)}castAsJson(t=null){const e={};for(let i in this.attributes){const s=this.attributes[i];void 0!==s&&(t?.keyTranslate&&(i=t.keyTranslate(i)),e[i]=r.castAsJson(s,t))}return e}async castDictionaryValueAsJsonAsync(t,e,i,s=null,n){const o=await r.castAsJsonAsync(i,s,n);return t[e]=o,o}async castAsJsonAsync(e=null,i=null){const s={},o=[];for(let a in this.attributes){const u=this.attributes[a];i?.keyTranslate&&(a=i.keyTranslate(a)),void 0!==u&&(r.isSimpleType(u)||u instanceof n||u instanceof t.ArcadeDate?s[a]=r.castAsJson(u,i):o.push(this.castDictionaryValueAsJsonAsync(s,a,u,e,i)))}return o.length>0&&await Promise.all(o),s}deepClone(){const t=new a;t.immutable=!1;for(const i of this.keys())t.setField(i,e.deepClone(this.field(i)));return t}}return a}));
