/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","./ObservableBase","./PropertyOrigin","./tracking","./tracking/Flags"],(function(t,s,e,i,a){"use strict";class l extends s.ObservableBase{constructor(t,s){super(),this.propertyName=t,this.metadata=s,this._accessed=null,this._handles=null,this.flags=0,this.flags=a.Flags.Dirty|(s.nonNullable?a.Flags.NonNullable:0)|(s.hasOwnProperty("value")?a.Flags.HasDefaultValue:0)|(void 0===s.get?a.Flags.DepTrackingInitialized:0)|(void 0===s.dependsOn?a.Flags.AutoTracked:0)}destroy(){this.flags&a.Flags.Dirty&&this.onCommitted(),super.destroy(),this._accessed=null,this._clearObservationHandles()}getComputed(t){i.trackAccess(this);const s=t.store,l=this.propertyName,n=this.flags,r=s.get(l);if(n&a.Flags.Computing)return r;if(~n&a.Flags.Dirty&&s.has(l))return r;this.flags|=a.Flags.Computing;const o=t.host;let h;n&a.Flags.AutoTracked?h=i.runTracked(this,this.metadata.get,o):(i.trackExplicitDependencies(o,this),h=this.metadata.get.call(o)),s.set(l,h,e.OriginId.COMPUTED);const g=s.get(l);return g===r?this.flags&=~a.Flags.Dirty:i.runUntracked(this.commit,this),this.flags&=~a.Flags.Computing,g}onObservableAccessed(t){if(t===this)return;let s=this._accessed;if(null==s)s=[],this._accessed=s;else if(s.includes(t))return;s.push(t)}onTrackingEnd(){this._clearObservationHandles(),this.flags|=a.Flags.DepTrackingInitialized;const t=this._accessed;if(null==t||0===t.length)return;let s=this._handles;null==s&&(s=[],this._handles=s);for(let e=0;e<t.length;++e)s.push(t[e].observe(this));t.length=0}notifyChange(){this.onInvalidated(),this.onCommitted()}invalidate(){this.onInvalidated()}commit(){this.flags&=~a.Flags.Dirty,this.onCommitted()}_clearObservationHandles(){const t=this._handles;if(null!==t){for(let s=0;s<t.length;++s)t[s].remove();t.length=0}}onInvalidated(){~this.flags&a.Flags.Overriden&&(this.flags|=a.Flags.Dirty);const t=this._observers;if(t&&t.length>0)for(const s of t)s.onInvalidated()}onCommitted(){const t=this._observers;if(t&&t.length>0){const s=t.slice();for(const t of s)t.onCommitted()}}}t.Property=l,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
