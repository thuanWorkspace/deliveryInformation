/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../Error","../Logger","../maybe","../promiseUtils","./staticWorkerMessages","./utils","./workerFactory"],(function(e,t,o,s,r,n,a){"use strict";const{ABORT:i,INVOKE:c,OPEN:b,OPENED:d,RESPONSE:l}=n.MessageType;class h{static async create(e){const t=await a.createWorker();return new h(t,e)}constructor(e,o){this._outJobs=new Map,this._inJobs=new Map,this.worker=e,this.id=o,e.addEventListener("message",this._onMessage.bind(this)),e.addEventListener("error",(e=>{e.preventDefault(),t.getLogger("esri.core.workers.WorkerOwner").error(e)}))}terminate(){this.worker.terminate()}async open(e,t={}){const{signal:o}=t,r=n.newJobId();return new Promise(((t,n)=>{const a={resolve:t,reject:n,abortHandle:s.onAbortOrThrow(o,(()=>{this._outJobs.delete(r),this._post({type:i,jobId:r})}))};this._outJobs.set(r,a),this._post({type:b,jobId:r,modulePath:e})}))}_onMessage(e){const t=n.receiveMessage(e);if(t)switch(t.type){case d:this._onOpenedMessage(t);break;case l:this._onResponseMessage(t);break;case i:this._onAbortMessage(t);break;case c:this._onInvokeMessage(t)}}_onAbortMessage(e){const t=this._inJobs,o=e.jobId,s=t.get(o);s&&(s.controller&&s.controller.abort(),t.delete(o))}_onInvokeMessage(e){const{methodName:t,jobId:o,data:a,abortable:i}=e,c=i?new AbortController:null,b=this._inJobs,d=r.staticWorkerMessages[t];let h;try{if("function"!=typeof d)throw new TypeError(`${t} is not a function`);h=d.call(null,a,{signal:c?c.signal:null})}catch(g){return void this._post({type:l,jobId:o,error:n.toInvokeError(g)})}s.isPromiseLike(h)?(b.set(o,{controller:c,promise:h}),h.then((e=>{b.has(o)&&(b.delete(o),this._post({type:l,jobId:o},e))}),(e=>{b.has(o)&&(b.delete(o),e||(e={message:"Error encountered at method"+t}),s.isAbortError(e)||this._post({type:l,jobId:o,error:n.toInvokeError(e||{message:`Error encountered at method ${t}`})}))}))):this._post({type:l,jobId:o},h)}_onOpenedMessage(e){const{jobId:t,data:s}=e,r=this._outJobs.get(t);r&&(this._outJobs.delete(t),o.removeMaybe(r.abortHandle),r.resolve(s))}_onResponseMessage(t){const{jobId:s,error:r,data:n}=t,a=this._outJobs.get(s);a&&(this._outJobs.delete(s),o.removeMaybe(a.abortHandle),r?a.reject(e.fromJSON(JSON.parse(r))):a.resolve(n))}_post(e,t,o){return n.postMessage(this.worker,e,t,o)}}return h}));
