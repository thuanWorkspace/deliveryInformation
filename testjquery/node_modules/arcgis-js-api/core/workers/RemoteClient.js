/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../kernel","../Error","../events","../handleUtils","../maybe","../promiseUtils","./registry","./utils","../../support/revision"],(function(e,s,t,o,n,r,i,a,l){"use strict";const{CLOSE:c,ABORT:h,INVOKE:_,RESPONSE:p,OPEN_PORT:u,ON:d}=a.MessageType,b=2;class g{constructor(e){this._timer=null,this._cancelledJobIds=new Set,this._invokeMessages=[],this._invoke=e,this._timer=null,this._process=this._process.bind(this)}push(e){e.type===a.MessageType.ABORT?this._cancelledJobIds.add(e.jobId):(this._invokeMessages.push(e),null===this._timer&&(this._timer=setTimeout(this._process,0)))}clear(){this._invokeMessages.length=0,this._cancelledJobIds.clear(),this._timer=null}_process(){this._timer=null;for(const e of this._invokeMessages)this._cancelledJobIds.has(e.jobId)||this._invoke(e);this._cancelledJobIds.clear(),this._invokeMessages.length=0}}class v{static connect(e){const s=new MessageChannel;let t;t="function"==typeof e?new e:"default"in e&&"function"==typeof e.default?new e.default:e;const o=new v(s.port1,{channel:s,client:t});return"object"==typeof t&&"remoteClient"in t&&(t.remoteClient=o),v.clients.set(o,t),s.port2}static loadWorker(e){const s=i.registry[e];return s?s():Promise.resolve(null)}constructor(e,s,t){this._port=e,this._jobQueue=t,this._outJobs=new Map,this._inJobs=new Map,this._invokeQueue=new g((e=>this._onInvokeMessage(e))),this._client=s.client,this._onMessage=this._onMessage.bind(this),this._channel=s.channel,this._schedule=s.schedule,this._port.addEventListener("message",this._onMessage),this._port.start()}close(){this._post({type:c}),this._close()}isBusy(){return this._outJobs.size>0}invoke(e,t,o){const i=o?.signal,l=o?.transferList;if(!this._port)return Promise.reject(new s("worker:port-closed",`Cannot call invoke('${e}'), port is closed`,{methodName:e,data:t}));const c=a.newJobId();return new Promise(((s,o)=>{if(r.isAborted(i))return this._processWork(),void o(r.createAbortError());const a=r.onAbort(i,(()=>{const e=this._outJobs.get(c);e&&(this._outJobs.delete(c),this._processWork(),n.removeMaybe(e.abortHandle),this._post({type:h,jobId:c}),o(r.createAbortError()))})),p={resolve:s,reject:o,abortHandle:a,debugInfo:e};this._outJobs.set(c,p),this._post({type:_,jobId:c,methodName:e,abortable:null!=i},t,l)}))}on(e,s){const t=new MessageChannel;function n(e){s(e.data)}return this._port.postMessage({type:a.MessageType.ON,eventType:e,port:t.port2},[t.port2]),t.port1.addEventListener("message",n),t.port1.start(),o.makeHandle((()=>{t.port1.postMessage({type:a.MessageType.CLOSE}),t.port1.close(),t.port1.removeEventListener("message",n)}))}jobAdded(){this._processWork()}openPort(){const e=new MessageChannel;return this._post({type:u,port:e.port2}),e.port1}_processWork(){if(this._outJobs.size>=b)return;const e=this._jobQueue?.pop();if(!e)return;const{methodName:s,data:t,invokeOptions:o,resolver:n}=e;this.invoke(s,t,o).then((e=>n.resolve(e))).catch((e=>n.reject(e)))}_close(){this._channel&&(this._channel=void 0),this._port.removeEventListener("message",this._onMessage),this._port.close(),this._outJobs.forEach((e=>{n.removeMaybe(e.abortHandle),e.reject(r.createAbortError(`Worker closing, aborting job calling '${e.debugInfo}'`))})),this._inJobs.clear(),this._outJobs.clear(),this._invokeQueue.clear(),this._port=null,this._client=null,this._schedule=null}_onMessage(e){null!=this._schedule?this._schedule((()=>this._processMessage(e))):this._processMessage(e)}_processMessage(e){const s=a.receiveMessage(e);if(s)switch(s.type){case p:this._onResponseMessage(s);break;case _:this._invokeQueue.push(s);break;case h:this._onAbortMessage(s);break;case c:this._onCloseMessage();break;case u:this._onOpenPortMessage(s);break;case d:this._onOnMessage(s)}}_onAbortMessage(e){const s=this._inJobs,t=e.jobId,o=s.get(t);this._invokeQueue.push(e),o&&(o.controller&&o.controller.abort(),s.delete(t))}_onCloseMessage(){const e=this._client;this._close(),e&&"destroy"in e&&v.clients.get(this)===e&&e.destroy(),v.clients.delete(this),e?.remoteClient&&(e.remoteClient=null)}_onInvokeMessage(e){const{methodName:s,jobId:t,data:o,abortable:n}=e,i=n?new AbortController:null,l=this._inJobs;let c,h=this._client,_=h[s];try{if(!_&&s&&s.includes(".")){const e=s.split(".");for(let s=0;s<e.length-1;s++)h=h[e[s]],_=h[e[s+1]]}if("function"!=typeof _)throw new TypeError(`${s} is not a function`);c=_.call(h,o,{client:this,signal:i?i.signal:null})}catch(u){return void this._post({type:p,jobId:t,error:a.toInvokeError(u)})}r.isPromiseLike(c)?(l.set(t,{controller:i,promise:c}),c.then((e=>{l.has(t)&&(l.delete(t),this._post({type:p,jobId:t},e))}),(e=>{l.has(t)&&(l.delete(t),r.isAbortError(e)||this._post({type:p,jobId:t,error:a.toInvokeError(e||{message:`Error encountered at method ${s}`})}))}))):this._post({type:p,jobId:t},c)}_onOpenPortMessage(e){new v(e.port,{client:this._client})}_onOnMessage(e){const{port:s}=e,o=this._client.on(e.eventType,(e=>{s.postMessage(e)})),n=t.on(e.port,"message",(e=>{const t=a.receiveMessage(e);t?.type===a.MessageType.CLOSE&&(n.remove(),o.remove(),s.close())}))}_onResponseMessage(e){const{jobId:t,error:o,data:r}=e,i=this._outJobs;if(!i.has(t))return;const a=i.get(t);i.delete(t),this._processWork(),n.removeMaybe(a.abortHandle),o?a.reject(s.fromJSON(JSON.parse(o))):a.resolve(r)}_post(e,s,t){return a.postMessage(this._port,e,s,t)}}return v.kernelInfo={buildDate:l.buildDate,fullVersion:e.fullVersion,revision:l.commitHash},v.clients=new Map,v}));
