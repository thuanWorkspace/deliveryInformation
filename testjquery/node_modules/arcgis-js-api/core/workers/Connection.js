/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../handleUtils","../Logger","../promiseUtils","../Queue","./connectionRegistry","./RemoteClient"],(function(e,t,s,n,i,o){"use strict";class r{constructor(){this._inUseClients=new Array,this._clients=new Array,this._clientPromises=new Array,this._ongoingJobsQueue=new n}destroy(){this.close()}get closed(){return!this._clients?.length}open(e,t){return new Promise(((n,i)=>{let r=!0;const l=e=>{s.throwIfAborted(t.signal),r&&(r=!1,e())};this._clients.length=e.length,this._clientPromises.length=e.length,this._inUseClients.length=e.length;for(let h=0;h<e.length;++h){const r=e[h];s.isPromiseLike(r)?this._clientPromises[h]=r.then((e=>(this._clients[h]=new o(e,t,this._ongoingJobsQueue),l(n),this._clients[h])),(()=>(l(i),null))):(this._clients[h]=new o(r,t,this._ongoingJobsQueue),this._clientPromises[h]=Promise.resolve(this._clients[h]),l(n))}}))}broadcast(e,t,s){const n=new Array(this._clientPromises.length);for(let i=0;i<this._clientPromises.length;++i){const o=this._clientPromises[i];n[i]=o.then((n=>n?.invoke(e,t,s)))}return n}close(){let e;for(;e=this._ongoingJobsQueue.pop();)e.resolver.reject(s.createAbortError(`Worker closing, aborting job calling '${e.methodName}'`));for(const t of this._clientPromises)t.then((e=>e?.close()));this._clients.length=0,this._clientPromises.length=0,this._inUseClients.length=0,i.unregister(this)}invoke(e,n,i){let o;Array.isArray(i)?(t.getLogger("esri.core.workers.Connection").warn("invoke()","The transferList parameter is deprecated, use the options object instead"),o={transferList:i}):o=i;const r=s.createResolver();this._ongoingJobsQueue.push({methodName:e,data:n,invokeOptions:o,resolver:r});for(let t=0;t<this._clientPromises.length;t++){const e=this._clients[t];e?e.jobAdded():this._clientPromises[t].then((e=>e?.jobAdded()))}return r.promise}on(t,s){return Promise.all(this._clientPromises).then((()=>e.handlesGroup(this._clients.map((e=>e.on(t,s))))))}openPorts(){return new Promise((e=>{const t=new Array(this._clientPromises.length);let s=t.length;for(let n=0;n<this._clientPromises.length;++n){this._clientPromises[n].then((i=>{i&&(t[n]=i.openPort()),0==--s&&e(t)}))}}))}get test(){return{numClients:this._clients.length}}}return r}));
