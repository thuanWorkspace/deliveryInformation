/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../request","../core/Error","../core/Logger","../core/object","../core/urlUtils","./utils","./support/NetworkServiceDescription"],(function(e,t,r,o,s,a,n,i){"use strict";const l=o.getLogger("esri.rest.networkService");function u(e,t,r,o){o[r]=[t.length,t.length+e.length],e.forEach((e=>{t.push(e.geometry)}))}function c(e,t){for(let r=0;r<t.length;r++){const o=e[t[r]];if(o&&o.length)for(const e of o)e.z=void 0}l.warnOnce("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function d(e,t){for(let r=0;r<t.length;r++){const o=e[t[r]];if(o&&o.length)for(const e of o)if(null!=e&&e.hasZ)return!0}return!1}async function f(e,o,s){if(!e)throw new r("network-service:missing-url","Url to Network service is missing");const a={f:"json",token:o},l=n.asValidOptions(a,s),{data:u}=await t(e,l),c=u.currentVersion>=10.4?p(e,o,s):v(e,s),{defaultTravelMode:d,supportedTravelModes:f}=await c;return u.defaultTravelMode=d,u.supportedTravelModes=f,i.fromJSON(u)}async function v(e,r){const o={f:"json"},i=n.asValidOptions(o,r),{data:l}=await t(e.replace(/\/rest\/.*$/i,"/info"),i);if(!l?.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};const{owningSystemUrl:u}=l,c=a.removeTrailingSlash(u)+"/sharing/rest/portals/self",{data:d}=await t(c,i),f=s.getDeepValue("helperServices.routingUtilities.url",d);if(!f)return{supportedTravelModes:[],defaultTravelMode:null};const v=n.parseUrl(u),p={f:"json",serviceName:/\/solve$/i.test(v.path)?"Route":/\/solveclosestfacility$/i.test(v.path)?"ClosestFacility":"ServiceAreas"},g=n.asValidOptions(p,r),h=a.removeTrailingSlash(f)+"/GetTravelModes/execute",T=await t(h,g),w=[];let M=null;if(T?.data?.results?.length){const e=T.data.results;for(const t of e)if("supportedTravelModes"===t.paramName){if(t.value?.features)for(const{attributes:e}of t.value.features)if(e){const t=JSON.parse(e.TravelMode);w.push(t)}}else"defaultTravelMode"===t.paramName&&(M=t.value)}return{supportedTravelModes:w,defaultTravelMode:M}}async function p(e,o,s){try{const r={f:"json",token:o},i=n.asValidOptions(r,s),l=a.removeTrailingSlash(e)+"/retrieveTravelModes",{data:{supportedTravelModes:u,defaultTravelMode:c}}=await t(l,i);return{supportedTravelModes:u,defaultTravelMode:c}}catch(i){throw new r("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:i})}}e.collectGeometries=u,e.dropZValuesOffInputGeometry=c,e.fetchServiceDescription=f,e.isInputGeometryZAware=d,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
