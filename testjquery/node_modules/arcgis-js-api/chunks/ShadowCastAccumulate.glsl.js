/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","./mat4","./mat4f64","../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl","../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl","../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl","../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl","../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl","../views/3d/webgl-engine/core/shaderModules/Float2PassUniform","../views/3d/webgl-engine/core/shaderModules/interfaces","../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform","../views/3d/webgl-engine/core/shaderModules/ShaderBuilder","../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform"],(function(e,a,r,i,s,o,t,d,n,l,c,p,h){"use strict";const u=255,w=1/u;function g(e){const r=new p.ShaderBuilder,u=r.fragment;return u.include(d.RgbaFloatEncoding),u.include(s.ReadLinearDepth),r.include(t.CameraSpace),r.include(i.ScreenSpacePass),r.include(o.ReadShadowMapPass,e),u.uniforms.add(new h.Texture2DPassUniform("depthMap",((e,a)=>a.linearDepth?.colorTexture)),new c.Matrix4PassUniform("inverseViewMatrix",((e,r)=>a.invert(v,a.translate(v,r.camera.viewMatrix,r.camera.center)))),new n.Float2PassUniform("nearFar",((e,a)=>a.camera.nearFar))),u.constants.add("sampleValue","float",w),r.outputs.add("sampleCount","float"),u.code.add(l.glsl`void main(void) {
float depth = rgba2float(texture(depthMap, uv));
if (depth == 0.0) {
discard;
}
float currentPixelDepth = linearDepthFromFloat(depth, nearFar);
if (-currentPixelDepth > nearFar.y || -currentPixelDepth < nearFar.x) {
discard;
}
vec4 currentPixelPos = vec4(reconstructPosition(gl_FragCoord.xy, currentPixelDepth), 1.0);
vec4 worldSpacePos = inverseViewMatrix * currentPixelPos;
mat4 shadowMatrix;
float linearDepth = -currentPixelDepth;
int i = chooseCascade(linearDepth, shadowMatrix);
if (i >= numCascades) {
discard;
}
vec3 lvpos = lightSpacePosition(worldSpacePos.xyz, shadowMatrix);
if (lvpos.z >= 1.0 || lvpos.x < 0.0 || lvpos.x > 1.0 || lvpos.y < 0.0 || lvpos.y > 1.0) {
discard;
}
ivec2 texSize = textureSize(shadowMapTex, 0);
ivec2 uvShadow = ivec2(cascadeCoordinates(i, texSize, lvpos) * vec2(texSize));
float depthShadow = readShadowMapDepth(uvShadow, shadowMapTex);
bool shadow = depthShadow < lvpos.z;
if (!shadow) {
discard;
}
sampleCount = sampleValue;
}`),r}const v=r.create(),x=Object.freeze(Object.defineProperty({__proto__:null,ShadowCastMaxSamples:u,build:g},Symbol.toStringTag,{value:"Module"}));e.ShadowCastAccumulate=x,e.ShadowCastMaxSamples=u,e.build=g}));
