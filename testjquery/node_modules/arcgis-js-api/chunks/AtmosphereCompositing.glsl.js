/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl","../views/3d/webgl-engine/core/shaderModules/interfaces","../views/3d/webgl-engine/core/shaderModules/ShaderBuilder","../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform"],(function(e,r,s,o,t){"use strict";class l extends s.NoParameters{}function n(e){const l=new o.ShaderBuilder;l.include(r.ScreenSpacePass),l.fragment.uniforms.add(new t.Texture2DPassUniform("colorTexture",(e=>e.color)),new t.Texture2DPassUniform("depthTexture",(e=>e.depth)));const n=e.haze;return l.fragment.code.add(s.glsl`
    void main() {
      ${n?s.glsl`vec4`:s.glsl`float`} depthSample = texture(depthTexture, uv) ${n?"":s.glsl`.r`};
      if (depthSample ${n?s.glsl`== vec4(0)`:s.glsl`!= 1.0`} ) {
          fragColor = vec4(0);
          return;
      }
      fragColor = texture(colorTexture, uv);
    }
    `),l}const a=Object.freeze(Object.defineProperty({__proto__:null,AtmosphereCompositingPassParameters:l,build:n},Symbol.toStringTag,{value:"Module"}));e.AtmosphereCompositing=a,e.AtmosphereCompositingPassParameters=l,e.build=n}));
