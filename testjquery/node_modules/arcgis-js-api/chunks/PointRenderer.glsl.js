/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../core/mathUtils","./mat4","./mat4f64","./vec2","./vec2f64","./vec3","./vec3f64","../geometry/support/aaBoundingBox","../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl","../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput","../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl","../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl","../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl","../views/3d/webgl-engine/core/shaderModules/Float2DrawUniform","../views/3d/webgl-engine/core/shaderModules/Float2PassUniform","../views/3d/webgl-engine/core/shaderModules/Float3DrawUniform","../views/3d/webgl-engine/core/shaderModules/interfaces","../views/3d/webgl-engine/core/shaderModules/Matrix4DrawUniform","../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform","../views/3d/webgl-engine/core/shaderModules/ShaderBuilder","../views/3d/webgl-engine/lib/VertexAttribute"],(function(e,i,t,a,r,o,n,s,l,c,d,p,u,g,m,f,S,h,x,w,v,z){"use strict";class b extends h.NoParameters{constructor(){super(...arguments),this.clipBox=l.create(l.positiveInfinity),this.useFixedSizes=!1,this.useRealWorldSymbolSizes=!1,this.scaleFactor=1,this.minSizePx=0,this.size=0,this.sizePx=0}get fixedSize(){return this.drawScreenSpace?this.sizePx:this.size}get screenMinSize(){return this.useFixedSizes?0:this.minSizePx}get drawScreenSpace(){return this.useFixedSizes&&!this.useRealWorldSymbolSizes}}class M extends p.SlicePlaneParameters{constructor(e,i,t){super(e),this.origin=e,this.isLeaf=i,this.splatSize=t}}function P(e){const a=new v.ShaderBuilder,o=e.output===d.ShaderOutput.Color,s=e.output===d.ShaderOutput.Depth,l=e.output===d.ShaderOutput.Highlight,{vertex:b,fragment:M}=a;return a.include(p.SliceDraw,e),a.attributes.add(z.VertexAttribute.POSITION,"vec3"),a.attributes.add(z.VertexAttribute.COLOR,"vec3"),b.uniforms.add(new x.Matrix4DrawUniform("modelView",((e,i)=>t.multiply(y,i.camera.viewMatrix,t.fromTranslation(y,e.origin)))),new w.Matrix4PassUniform("proj",((e,i)=>i.camera.projectionMatrix)),new m.Float2DrawUniform("screenMinMaxSize",((e,i,t)=>r.set(R,t.useFixedSizes?0:t.minSizePx*i.camera.pixelRatio,F(e.isLeaf)*i.camera.pixelRatio))),e.useFixedSizes?new f.Float2PassUniform("pointScale",((e,i)=>r.set(R,e.fixedSize*i.camera.pixelRatio,i.camera.fullHeight))):new m.Float2DrawUniform("pointScale",((e,i,t)=>r.set(R,e.splatSize*t.scaleFactor*i.camera.pixelRatio,i.camera.fullHeight/i.camera.pixelRatio)))),e.clippingEnabled?b.uniforms.add(new S.Float3DrawUniform("clipMin",((e,i,t)=>n.set(O,t.clipBox[0]-e.origin[0],t.clipBox[1]-e.origin[1],t.clipBox[2]-e.origin[2]))),new S.Float3DrawUniform("clipMax",((e,i,t)=>n.set(O,t.clipBox[3]-e.origin[0],t.clipBox[4]-e.origin[1],t.clipBox[5]-e.origin[2])))):(b.constants.add("clipMin","vec3",[-i.numberMaxFloat32,-i.numberMaxFloat32,-i.numberMaxFloat32]),b.constants.add("clipMax","vec3",[i.numberMaxFloat32,i.numberMaxFloat32,i.numberMaxFloat32])),s?(c.addNearFar(a),c.addCalculateLinearDepth(a),a.varyings.add("depth","float")):e.output!==d.ShaderOutput.Highlight&&a.varyings.add("vColor","vec3"),b.code.add(h.glsl`
    void main(void) {
      // Move clipped points outside of clipspace
      if (position.x < clipMin.x || position.y < clipMin.y || position.z < clipMin.z ||
        position.x > clipMax.x || position.y > clipMax.y || position.z > clipMax.z) {
        gl_Position = vec4(0.0,0.0,0.0,2.0);
        gl_PointSize = 0.0;
        return;
      }

      if (rejectBySlice(position)) {
        gl_Position = vec4(0.0,0.0,0.0,2.0);
        gl_PointSize = 0.0;
        return;
      }

      // Position in camera space
      vec4 camera = modelView * vec4(position, 1.0);

      float pointSize = pointScale.x;
      vec4 position = proj * camera;
     ${e.drawScreenSize?h.glsl`
      float clampedScreenSize = pointSize;`:h.glsl`
      float pointRadius = 0.5 * pointSize;
      vec4 cameraOffset = camera + vec4(0.0, pointRadius, 0.0, 0.0);
      vec4 positionOffset = proj * cameraOffset;
      float radius = abs(positionOffset.y - position.y);
      float viewHeight = pointScale.y;
      // screen diameter = (2 * r / w) * (h / 2)
      float screenPointSize = (radius / position.w) * viewHeight;
      float clampedScreenSize = clamp(screenPointSize, screenMinMaxSize.x, screenMinMaxSize.y);
      // Shift towards camera, to move rendered point out of terrain i.e. to
      // the camera-facing end of the virtual point when considering it as a
      // 3D sphere.
      camera.xyz -= normalize(camera.xyz) * pointRadius * clampedScreenSize / screenPointSize;
      position = proj * camera;`}

     gl_PointSize = clampedScreenSize;
     gl_Position = position;

     ${s?h.glsl`depth = calculateLinearDepth(nearFar, camera.z);`:""}
     ${o?h.glsl`vColor = color;`:""}
    }
  `),M.include(g.RgbaFloatEncoding,e),l&&a.include(u.OutputHighlight,e),M.code.add(h.glsl`
    void main(void) {
      vec2 vOffset = gl_PointCoord - vec2(0.5, 0.5);
      float r2 = dot(vOffset, vOffset);

      if (r2 > 0.25) {
        discard;
      }
      ${s?h.glsl`fragColor = float2rgba(depth);`:""}
      ${l?h.glsl`outputHighlight();`:""}
      ${o?h.glsl`fragColor = vec4(vColor, 1.0);`:""}
    }
  `),a}function F(e){return e?256:64}const y=a.create(),O=s.create(),R=o.create(),D=Object.freeze(Object.defineProperty({__proto__:null,PointRendererDrawParameters:M,PointRendererPassParameters:b,build:P,getMaxPointSizeScreenspace:F},Symbol.toStringTag,{value:"Module"}));e.PointRendererDrawParameters=M,e.PointRendererPassParameters=b,e.PointRendererShader=D,e.build=P,e.getMaxPointSizeScreenspace=F}));
