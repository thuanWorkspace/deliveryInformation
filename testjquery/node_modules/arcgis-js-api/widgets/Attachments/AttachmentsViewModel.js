/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../chunks/tslib.es6","../../Graphic","../../core/Accessor","../../core/Collection","../../core/Error","../../core/reactiveUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/decorators/cast","../../core/arrayUtils","../../core/has","../../core/accessorSupport/decorators/subclass","../../rest/query/support/AttachmentInfo","../../rest/support/AttachmentQuery","../Feature/support/featureUtils"],(function(t,e,a,i,n,r,s,c,o,h,d,l,p,m){"use strict";const u={editing:!1,operations:{add:!0,update:!0,delete:!0}},f=i.ofType(l);let y=class extends a{constructor(t){super(t),this._getAttachmentsPromise=null,this._attachmentLayer=null,this.capabilities={...u},this.activeAttachmentInfo=null,this.activeFileInfo=null,this.attachmentInfos=new f,this.fileInfos=new i,this.graphic=null,this.mode="view",this.filesEnabled=!1,this.addHandles(r.watch((()=>this.graphic),(()=>this._graphicChanged()),r.initial))}destroy(){this._attachmentLayer=null,this.graphic=null}castCapabilities(t){return{...u,...t}}get state(){return this._getAttachmentsPromise?"loading":this.graphic?"ready":"disabled"}get supportsResizeAttachments(){const{graphic:t}=this;if(!t)return!1;const e=t.layer||t.sourceLayer;return e?.loaded&&"capabilities"in e&&e.capabilities&&"operations"in e.capabilities&&"supportsResizeAttachments"in e.capabilities.operations&&e.capabilities.operations.supportsResizeAttachments||!1}async getAttachments(){const{_attachmentLayer:t,attachmentInfos:e}=this;if(!t||"function"!=typeof t.queryAttachments)throw new n("invalid-layer","getAttachments(): A valid layer is required.");const a=this._getObjectId(),i=new p({objectIds:[a],returnMetadata:!0}),r=[],s=t.queryAttachments(i).then((t=>t[a]||r)).catch((()=>r));this._getAttachmentsPromise=s,this.notifyChange("state");const c=await s;return e.removeAll(),c.length&&e.addMany(c),this._getAttachmentsPromise=null,this.notifyChange("state"),c}async addAttachment(t,e=this.graphic){const{_attachmentLayer:a,attachmentInfos:i,capabilities:r}=this;if(!e)throw new n("invalid-graphic","addAttachment(): A valid graphic is required.",{graphic:e});if(!t)throw new n("invalid-attachment","addAttachment(): An attachment is required.",{attachment:t});if(!r.operations?.add)throw new n("invalid-capabilities","addAttachment(): add capabilities are required.");if(!a||"function"!=typeof a.addAttachment)throw new n("invalid-layer","addAttachment(): A valid layer is required.");const s=a.addAttachment(e,t).then((t=>this._queryAttachment(t.objectId,e))),c=await s;return i.add(c),c}async deleteAttachment(t){const{_attachmentLayer:e,attachmentInfos:a,graphic:i,capabilities:r}=this;if(!t)throw new n("invalid-attachment-info","deleteAttachment(): An attachmentInfo is required.",{attachmentInfo:t});if(!r.operations?.delete)throw new n("invalid-capabilities","deleteAttachment(): delete capabilities are required.");if(!e||"function"!=typeof e.deleteAttachments)throw new n("invalid-layer","deleteAttachment(): A valid layer is required.");if(!i)throw new n("invalid-graphic","deleteAttachment(): A graphic is required.");const s=e.deleteAttachments(i,[t.id]).then((()=>t)),c=await s;return a.remove(c),c}async updateAttachment(t,e=this.activeAttachmentInfo){const{_attachmentLayer:a,attachmentInfos:i,graphic:r,capabilities:s}=this;if(!t)throw new n("invalid-attachment","updateAttachment(): An attachment is required.",{attachment:t});if(!e)throw new n("invalid-attachment-info","updateAttachment(): An attachmentInfo is required.",{attachmentInfo:e});if(!s.operations?.update)throw new n("invalid-capabilities","updateAttachment(): Update capabilities are required.");const c=i.indexOf(e);if(!a||"function"!=typeof a.updateAttachment)throw new n("invalid-layer","updateAttachment(): A valid layer is required.");if(!r)throw new n("invalid-graphic","updateAttachment(): A graphic is required.");const o=a.updateAttachment(r,e.id,t).then((t=>this._queryAttachment(t.objectId))),h=await o;return i.splice(c,1,h),h}async commitFiles(){return await Promise.all(this.fileInfos.items.map((t=>this.addAttachment(t.form)))),this.fileInfos.removeAll(),this.getAttachments()}addFile(t,e){if(!t||!e)return null;const a={file:t,form:e};return this.fileInfos.add(a),a}updateFile(t,e,a=this.activeFileInfo){if(!t||!e||!a)return null;const i=this.fileInfos.indexOf(a);return i>-1&&this.fileInfos.splice(i,1,{file:t,form:e}),this.fileInfos.items[i]}deleteFile(t){const e=this.fileInfos.find((e=>e.file===t));return e?(this.fileInfos.remove(e),e):null}async _queryAttachment(t,e){const{_attachmentLayer:a}=this;if(!t||!a?.queryAttachments)throw new n("invalid-attachment-id","Could not query attachment.");const i=this._getObjectId(e),r=new p({objectIds:[i],attachmentsWhere:`AttachmentId=${t}`,returnMetadata:!0});return a.queryAttachments(r).then((t=>t[i][0]))}_getObjectId(t=this.graphic){return t?.getObjectId()??null}_graphicChanged(){this.graphic&&(this._setAttachmentLayer(),this.getAttachments().catch((()=>{})))}_setAttachmentLayer(){const{graphic:t}=this,e=m.getSourceLayer(t);this._attachmentLayer=e?"scene"===e.type&&null!=e.associatedLayer?e.associatedLayer:e:null}};t.__decorate([s.property()],y.prototype,"capabilities",void 0),t.__decorate([c.cast("capabilities")],y.prototype,"castCapabilities",null),t.__decorate([s.property()],y.prototype,"activeAttachmentInfo",void 0),t.__decorate([s.property()],y.prototype,"activeFileInfo",void 0),t.__decorate([s.property({readOnly:!0,type:f})],y.prototype,"attachmentInfos",void 0),t.__decorate([s.property()],y.prototype,"fileInfos",void 0),t.__decorate([s.property({type:e})],y.prototype,"graphic",void 0),t.__decorate([s.property()],y.prototype,"mode",void 0),t.__decorate([s.property({readOnly:!0})],y.prototype,"state",null),t.__decorate([s.property()],y.prototype,"filesEnabled",void 0),t.__decorate([s.property({readOnly:!0})],y.prototype,"supportsResizeAttachments",null),y=t.__decorate([d.subclass("esri.widgets.Attachments.AttachmentsViewModel")],y);return y}));
