/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../core/Accessor","../../../core/Error","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../views/interactive/snapping/FeatureSnappingLayerSource","../../../views/interactive/snapping/SnappingOptions","../../LayerList/support/layerListUtils","./SnappingLayerListViewModel"],(function(e,r,t,a,i,n,s,o,p,l,c,d,y){"use strict";const u="esri.widgets.support.SnappingControls.SnappingControlsViewModel";let g=class extends r{constructor(e){super(e),this.layerListViewModel=new y.SnappingLayerListViewModel,this.snappingOptions=new c,this.view=null}initialize(){this.addHandles([a.watch((()=>({viewModel:this.layerListViewModel,view:this.view})),(({viewModel:e,view:r})=>{e.view=r}),a.initial),a.watch((()=>({viewModel:this.layerListViewModel,sources:this.snappingOptions?.featureSources})),(({viewModel:e,sources:r})=>{e.featureSnappingSources=r}),a.initial)])}get allLayersEnabled(){return(this.layerListViewModel?.selectableItems??[]).every((e=>e.enabled))}get allLayersDisabled(){return(this.layerListViewModel?.selectableItems??[]).every((e=>!e.enabled))}get layersEnabledCount(){return this.layerListViewModel?.selectableItems?.filter((e=>e.enabled)).length??0}get state(){return this.snappingOptions?"ready":"disabled"}toggleSnappingForLayers(e,r){e?.forEach((e=>r?this.enableSnappingForLayer(e):this.disableSnappingForLayer(e)))}toggleSnappingForAllLayers(e){this.layerListViewModel.selectableItems.forEach((({layer:{id:r}})=>{e?this.enableSnappingForLayer(r):this.disableSnappingForLayer(r)}))}enableSnappingForLayer(e){(this._findSnappingSourceForLayer(e)??this._makeSnappingSourceForLayer(e)).enabled=!0}disableSnappingForLayer(e){const r=this._findSnappingSourceForLayer(e);r&&(r.enabled=!1)}updateEnabledFeatureSources(e){for(const r of this.snappingOptions.featureSources)d.canDisplayLayer(r.layer)&&(r.enabled=e.includes(r.layer.id))}_findSnappingSourceForLayer(e){return this.snappingOptions.featureSources.find((r=>r.layer.id===e))}_makeSnappingSourceForLayer(e){const r=this.layerListViewModel.operationalItemsFlat.find((r=>r.layer.id===e))?.layer;if(!r)throw new t("snapping-controls:layer-not-found",`cannot enable snapping for layer with id ${e} because no such layer was found in the view`);const a=new l({layer:r});return this.snappingOptions.featureSources.add(a),a}};e.__decorate([i.property()],g.prototype,"allLayersEnabled",null),e.__decorate([i.property()],g.prototype,"allLayersDisabled",null),e.__decorate([i.property({constructOnly:!0})],g.prototype,"layerListViewModel",void 0),e.__decorate([i.property()],g.prototype,"layersEnabledCount",null),e.__decorate([i.property({type:c,nonNullable:!0})],g.prototype,"snappingOptions",void 0),e.__decorate([i.property()],g.prototype,"state",null),e.__decorate([i.property()],g.prototype,"view",void 0),g=e.__decorate([p.subclass(u)],g);return g}));
