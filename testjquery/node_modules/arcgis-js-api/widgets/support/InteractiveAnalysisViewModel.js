/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../chunks/tslib.es6","../../core/asyncUtils","../../core/maybe","../../core/promiseUtils","../../core/reactiveUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/arrayUtils","../../core/has","../../core/accessorSupport/decorators/subclass","./InteractiveToolViewModel"],(function(e,s,t,i,n,a,r,o,l,c,h,y){"use strict";var w;function _(e){return null!=e&&e.state>=w.RUNNING?(e.abort(),null):e}!function(e){e[e.PENDING=0]="PENDING",e[e.WAIT_FOR_VIEW_READY=1]="WAIT_FOR_VIEW_READY",e[e.RUNNING=2]="RUNNING"}(w||(w={})),e.InteractiveAnalysisViewModel=class extends y.InteractiveToolViewModel{constructor(e={}){super(e),this.analysisView=null,this._reconnectViewTask=null,this._parentChangeFromReconnect=!1,this._startUserOperation=null;const s=e?.analysis;null!=s?this.analysis=s:(this._set("analysis",this.constructAnalysis()),this._set("isAnalysisOwner",!0))}normalizeCtorArgs(e){const{analysis:s,...t}=e;return t}initialize(){this.addHandles([a.watch((()=>this.analysis?.parent),(e=>{this._parentChangeFromReconnect||e===this.view||this._set("isAnalysisOwner",!1);const s=!this._parentChangeFromReconnect;this._parentChangeFromReconnect=!1,s&&this._scheduleViewReconnect()}),a.sync),a.watch((()=>({view:this.view,ready:null!=this.view&&this.view.ready,supported:this.supported})),(({view:e},s)=>{const t=s?.view;e!==t&&(this._startUserOperation=i.abortMaybe(this._startUserOperation),this._disconnectFromView(t)),this._scheduleViewReconnect()}),a.syncAndInitial),a.watch((()=>this.analysis.isEditable),((e,s)=>{null!=this.analysisView&&(e&&!s&&null==this.tool?this.createTool():e||!s||null==this.tool||this.tool.active||this.removeTool())}))])}destroy(){this._reconnectViewTask=i.abortMaybe(this._reconnectViewTask),this._startUserOperation=i.abortMaybe(this._startUserOperation),null!=this.analysisView&&(this.analysisView.visible=void 0),this._disconnectFromView(this.view),null!=this.analysis&&this.isAnalysisOwner&&(this.analysis.destroy(),this._set("analysis",null))}set analysis(e){e!==this._get("analysis")&&(this._startUserOperation=i.abortMaybe(this._startUserOperation),this._disconnectFromView(this.view),this._setExternalAnalysis(e),this._scheduleViewReconnect())}get ready(){return null!=this.analysisView&&!this.connectingToView}get connectingToView(){return null!=this._reconnectViewTask}get isAnalysisOwner(){return this._get("isAnalysisOwner")}set visible(e){this._set("visible",e),null!=this.analysisView&&(this.analysisView.visible=e)}async start(){this.clear();const e={task:null,abort:null,state:w.PENDING},s=t.createTask((async s=>{e.state=w.WAIT_FOR_VIEW_READY,await a.whenOnce((()=>this.ready),s),e.state=w.RUNNING,this.createTool({interactive:!0})}));return e.task=s,e.abort=()=>s.abort(),this._startUserOperation=e,s.promise}clear(){this._startUserOperation=i.abortMaybe(this._startUserOperation),this.removeTool(),this.analysis.clear()}onConnectToAnalysisView(e){}onDisconnectFromAnalysisView(){}_scheduleViewReconnect(){this._reconnectViewTask=i.abortMaybe(this._reconnectViewTask);const e=t.createTask((async s=>{try{await this._reconnectView(s)}catch(t){if(n.throwIfAborted(s),!n.isAbortError(t))return void this.logger.warn("Failed to use analysis in view model",t);throw t}finally{e===this._reconnectViewTask&&(this._reconnectViewTask=null)}}));this._reconnectViewTask=e}async _reconnectView(e){const{view:s}=this,t=null!=s&&s.ready&&this.supported,i=this.analysis;if(this._startUserOperation=_(this._startUserOperation),this._disconnectFromView(s),t&&null!=s&&null!=i){if(this.isAnalysisOwner){if(null!=i.parent)return void this.logError("expected owned analysis to have null parent when connecting to view");this._parentChangeFromReconnect=!0,s.analyses.add(i)}this.analysisView=await s.whenAnalysisView(i),n.isAborted(e)?this._startUserOperation=_(this._startUserOperation):(this.analysisView.visible=this.visible,this.onConnectToAnalysisView(this.analysisView),this.createTool())}}_disconnectFromView(e){this.removeTool(),null!=e&&this.isAnalysisOwner&&(this._parentChangeFromReconnect=!0,e.analyses.remove(this.analysis),this.analysis.clear()),this.analysisView=null,this.onDisconnectFromAnalysisView()}_setExternalAnalysis(e){null==this.analysisView||this.isAnalysisOwner||(this.analysisView.visible=!0),this.analysisView=null,this._set("isAnalysisOwner",!1),this._set("analysis",e),this._parentChangeFromReconnect=!1}get testInfo(){return{analysisView:this.analysisView}}},s.__decorate([r.property({nonNullable:!0})],e.InteractiveAnalysisViewModel.prototype,"analysis",null),s.__decorate([r.property()],e.InteractiveAnalysisViewModel.prototype,"analysisView",void 0),s.__decorate([r.property()],e.InteractiveAnalysisViewModel.prototype,"ready",null),s.__decorate([r.property()],e.InteractiveAnalysisViewModel.prototype,"connectingToView",null),s.__decorate([r.property({readOnly:!0})],e.InteractiveAnalysisViewModel.prototype,"isAnalysisOwner",null),s.__decorate([r.property({type:Boolean,value:!0})],e.InteractiveAnalysisViewModel.prototype,"visible",null),s.__decorate([r.property()],e.InteractiveAnalysisViewModel.prototype,"_reconnectViewTask",void 0),e.InteractiveAnalysisViewModel=s.__decorate([h.subclass("esri.widgets.support.InteractiveAnalysisViewModel")],e.InteractiveAnalysisViewModel),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
