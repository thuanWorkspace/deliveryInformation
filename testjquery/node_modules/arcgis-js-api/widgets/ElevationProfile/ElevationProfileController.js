/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["exports","../../chunks/tslib.es6","../../core/Accessor","../../core/asyncUtils","../../core/handleUtils","../../core/maybe","../../core/memoize","../../core/promiseUtils","../../core/reactiveUtils","../../core/throttle","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/arrayUtils","../../core/has","../../core/accessorSupport/decorators/subclass","../../support/elevationInfoUtils","./support/constants","./support/geometryUtils","./support/profileUtils"],(function(e,t,o,r,i,s,l,a,n,p,d,c,h,u,f,_,m,P,v){"use strict";const g="line-change";e.ElevationProfileController=class extends o{constructor(e){super(e),this._updateTask=null,this._paramsPerProfile=new Map,this._getUpdateParametersMemoized=l.memoize(((e,t,o)=>({stationary:e,visibleProfiles:t,generationParameters:o}))),this._getGenerationParametersMemoized=l.memoize(((e,t,o,r,i,s,l)=>P.isPolyline(t)&&P.isValidInputPath(t)&&null!=r?{view:e,geometry:t,elevationInfo:o,options:s,queue:r,cache:i,slicePlane:l}:null)),this._getElevationInfoMemoized=l.memoize(((e,t)=>({mode:e,offset:t}))),this._getOptionsMemoized=l.memoize(((e,t,o)=>{const{densificationMaxSamples:r,maxTotalSamples:i}=m.getConfig();return{geodesicDistanceThreshold:e,samplingDistance:t,densificationMaxSamples:Math.round(r/o),maxTotalSamples:i}})),this._updateThrottled=p.throttle((e=>a.ignoreAbortErrors(this._update(e))),m.getConfig().updateThrottleMillis)}initialize(){const e=this.viewModel;this.addHandles([n.watch((()=>e.profiles.toArray()),(e=>{this._abortUpdate(),this._paramsPerProfile.clear(),this.removeHandles(g),this.addHandles(e.map((e=>i.handlesGroup([e.attach(this.viewModel),e.on("change",(()=>{this._invalidateProfile(e)}))]))),g)}),n.syncAndInitial),this._updateThrottled,n.watch((()=>this._updateParameters),this._updateThrottled,n.syncAndInitial)])}destroy(){this._paramsPerProfile.clear()}get _updateParameters(){const{viewModel:e}=this,t=e.view;return this._getUpdateParametersMemoized(null==t||t.stationary,this.viewModel.visibleProfiles,this._generationParameters)}get _generationParameters(){const{view:e,input:t,queue:o,tileCache:r}=this.viewModel;return null!=e&&e.ready?this._getGenerationParametersMemoized(e,t?.geometry,this._elevationInfo,o,r,this._options,"3d"===e.type?e.slicePlane:null):null}get _elevationInfo(){const e=this.viewModel.input,t=e?_.hasGraphicFeatureExpressionInfo(e)?null:_.getGraphicEffectiveElevationInfo(e):null;return null!=t?this._getElevationInfoMemoized(t.mode,t.offset):null}get _options(){const e=this.viewModel,t=e.visibleProfiles.length;let o=e.minDemResolution??m.getConfig().defaultDemResolution;return o=parseFloat(o.toFixed(2)),this._getOptionsMemoized(e.geodesicDistanceThreshold,o,t)}async _update({stationary:e,visibleProfiles:t,generationParameters:o}){this._abortUpdate(),e&&(null!=o?this._updateTask=r.createTask((async e=>{this.viewModel.error=null;const r=t.filter((e=>!this._isProfileValid(e,o))),i=v.generateProfiles({...o,providers:r},{signal:e});try{for await(const t of i){a.throwIfAborted(e),this._clearInvalidResults(o);for(let e=0;e<r.length;e++)r[e].result=t[e]}for(const e of r)this._paramsPerProfile.set(e,o)}catch(s){a.throwIfAbortError(s),this._abortUpdate(),this.viewModel.error=s,r.forEach((e=>{e.result=null}))}})):this._clearResults())}_abortUpdate(){this._updateTask=s.abortMaybe(this._updateTask)}_isProfileValid(e,t){return this._paramsPerProfile.has(e)&&this._paramsPerProfile.get(e)===t}_invalidateProfile(e){this._paramsPerProfile.delete(e),this._updateThrottled(this._updateParameters)}_clearInvalidResults(e){for(const t of this.viewModel.profiles.items)this._isProfileValid(t,e)||(t.result=null,this._paramsPerProfile.delete(t))}_clearResults(){for(const e of this.viewModel.profiles.items)e.result=null,this._paramsPerProfile.delete(e)}},t.__decorate([d.property({nonNullable:!0})],e.ElevationProfileController.prototype,"viewModel",void 0),t.__decorate([d.property()],e.ElevationProfileController.prototype,"_updateParameters",null),t.__decorate([d.property()],e.ElevationProfileController.prototype,"_generationParameters",null),t.__decorate([d.property()],e.ElevationProfileController.prototype,"_elevationInfo",null),t.__decorate([d.property()],e.ElevationProfileController.prototype,"_options",null),e.ElevationProfileController=t.__decorate([f.subclass("esri.widgets.ElevationProfile.ElevationProfileController")],e.ElevationProfileController),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
