/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../chunks/tslib.es6","../../geometry","../../Graphic","../../core/arrayUtils","../../core/Collection","../../core/deprecate","../../core/Evented","../../core/JSONSupport","../../core/Logger","../../core/mathUtils","../../core/maybe","../../core/reactiveUtils","../../core/screenUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/has","../../core/accessorSupport/decorators/subclass","../../geometry/Extent","../../geometry/support/webMercatorUtils","../../layers/GraphicsLayer","../../layers/ImageryTileLayer","../../layers/orientedImagery/queries","../../layers/orientedImagery/core/bestImageUtils","../../layers/orientedImagery/core/coverageUtils","../../layers/orientedImagery/transformations/groundToImageUtils","../../layers/orientedImagery/transformations/imageToGroundUtils","../../layers/support/RasterFunction","../../layers/support/rasterFunctionConstants","../../layers/support/rasterDatasets/RasterFactory","../../rest/support/AttachmentQuery","../../views/MapView","../../views/2d/viewpointUtils","../../views/input/InputManager","../../views/support/projectionUtils","./constants","./symbols","./utils","../../geometry/Polygon","../../geometry/SpatialReference","../../geometry/Point"],(function(e,t,r,i,o,a,s,n,l,c,h,g,u,d,p,y,m,_,v,f,P,b,C,I,w,F,S,M,x,V,O,A,G,R,D,E,L,T,k,U){"use strict";const j={click:"view-click",imageClick:"image-click"},N=e=>/^https?:/i.test(e),H=e=>"FA"===e;let z=class extends s.EventedAccessor{constructor(e){super(e),this.layer=null,this.shouldShowSelectedImage=!1,this.coverageFrustums=new o,this.coveragePolygons=new o,this.currentCoverageVisible=!0,this.disabled=!1,this.displayMessage=null,this.pointSources=new o,this.previousFeatureAngle=0,this.selectedFeature=null,this.selectedFeatureAngle=0,this.selectedPoint=null,this.features=new o,this.isAdditionalCoverageVisible=!1,this.isAdditionalPointSourcesVisible=!1,this.localPort=null,this.mapImageConversionToolState=!1,this.navigatorSelectedFeature=null,this._additionalCoveragePolygons=new o,this._additionalFeatureGraphics=new o,this._currentCoveragePolygon=null,this._currentImage=null,this._fetchFeaturesController=null,this._imageViewer=null,this._initialCurrentCoveragePolygon=null,this._initialCurrentCoverageUpdate=!0,this._overlays=new f({listMode:"hide",internal:!0}),this._plotPolygons=!1,this._initialPreviousCoveragePolygon=null,this._referencePointOnGround=null,this._referencePointOnImage=null,this._sectorData=null,this._crossSymbol=null,this._panConstraint=null,this._scaleConstraint=null,this._suitabilities=null,this._transformController=new AbortController,this._updateCoverageController=null,this._imageClickHandler=async e=>{if(0===e.button&&this._currentImage&&this._currentImage?.fullExtent){const{xmin:t,xmax:r,ymin:i,ymax:o}=this._currentImage.fullExtent,{x:a,y:s}=e.mapPoint;if(t>a||r<a||o<s||i>s)return;this.plotReferencePointOnImage(e.mapPoint);const n=this.getSelectedFeature();if(n){const t=(await F.transformPoints([e.mapPoint.toJSON()],{feature:n,currentCoveragePolygon:this.getSelectedFeaturePolygon(),imageProperties:this._currentImage.rasterInfo,options:{signal:this._transformController?.signal}}))[0];t&&this.plotReferencePointOnGround(t)}}},this._viewClickHandler=e=>{"mouse"===e.pointerType&&0!==e.button||(e.stopPropagation(),e.preventDefault(),this.loadBestImage(e.mapPoint))},this._mapImageConversionToolViewClickHandler=e=>{e.stopPropagation(),e.preventDefault(),this.plotMapPoint(e.mapPoint)},this.handleSectorClick=this.handleSectorClick.bind(this),this.loadViewer=this.loadViewer.bind(this),this.searchBestImage=this.searchBestImage.bind(this),this.transformAndPlotReferencePointOnImage=this.transformAndPlotReferencePointOnImage.bind(this)}initialize(){this.addHandles([g.watch((()=>this.view?.map),((e,t)=>{t?.layers.remove(this._overlays),e?.layers.add(this._overlays)}),g.initial),g.watch((()=>this.view?.map?.allLayers?.length),(e=>{e&&this.view?.map?.layers.reorder(this._overlays,e-1)}),g.initial),g.watch((()=>this.layer?.visible??!1),(e=>{this._overlays.visible=e}),g.initial),g.watch((()=>[this.state,this.mapImageConversionToolState]),(()=>{if(this.removeHandles(j.click),"disabled"===this.state||null==this.view)return;const e=this.mapImageConversionToolState&&"image-loaded"===this.state?this._mapImageConversionToolViewClickHandler:this._viewClickHandler;this.addHandles(this.view.on("click",e,G.ViewEventPriorities.WIDGET),j.click)}),g.initial),g.watch((()=>this.mapImageConversionToolState),(()=>{this.removeHandles(j.imageClick),this.imageLoaded&&this.mapImageConversionToolState&&this.addHandles(this._imageViewer.on("click",this._imageClickHandler),j.imageClick)}))])}destroy(){this._cancelCurrentCoverageUpdate(),this._cancelFetchingFeatures(),this.coverageFrustums.destroy(),this.coveragePolygons.destroy(),this.pointSources.destroy(),this._additionalCoveragePolygons.destroy(),this._additionalFeatureGraphics.destroy(),this._currentImage=h.destroyMaybe(this._currentImage),this._imageViewer=h.destroyMaybe(this._imageViewer),this._initialCurrentCoveragePolygon=h.destroyMaybe(this._initialCurrentCoveragePolygon),this._currentCoveragePolygon=h.destroyMaybe(this._currentCoveragePolygon),this._crossSymbol=h.destroyMaybe(this._crossSymbol),this._referencePointOnGround=h.destroyMaybe(this._referencePointOnGround),this._referencePointOnImage=h.destroyMaybe(this._referencePointOnImage),this._overlays&&this.view?.map.remove(this._overlays),this._overlays.destroy()}get activeLayer(){return a.deprecatedProperty(l.getLogger(this),"activeLayer",{replacement:"layer"}),this.layer}set activeLayer(e){a.deprecatedProperty(l.getLogger(this),"activeLayer",{replacement:"layer"}),this.layer=e}get brightness(){return this._get("brightness")??0}set brightness(e){this._set("brightness",c.clamp(e,-10,10))}get contrast(){return this._get("contrast")??0}set contrast(e){this._set("contrast",c.clamp(e,-10,10))}get currentImageView(){return this._imageViewer?.allLayerViews.find((e=>e.layer===this._currentImage))}get featureCount(){return this.features?.length??0}get imageGalleryEnabled(){return L.isTifOrMrf(this.selectedFeature?.attributes.imagePath.trim())}get imageLoaded(){return this._currentImage?.loaded??!1}get updating(){return"loading"===this._currentImage?.loadStatus||!!this._fetchFeaturesController}get referencePoint(){return this._referencePointOnGround?.geometry}get sharpness(){return this._get("sharpness")??0}set sharpness(e){this._set("sharpness",c.clamp(e,0,1))}get sectorData(){const{_sectorData:e}=this;if(e)return D.sectorsInOrder.map((t=>e[t]))}get state(){const{layer:e,view:t,_currentImage:r}=this;return this.disabled||!e||t&&!t.ready?"disabled":r?.loadStatus?`image-${r.loadStatus}`:"ready"}get thumbnails(){const{features:e}=this;return e?new o(e.map((({attributes:{imagePath:e,objectId:t}})=>{const r=e.trim();return L.isTifOrMrf(r)?{url:r,objectId:t}:null})).filter(i.isSome)):null}set view(e){this._set("view",e)}getCurrentCoveragePolygon(){return this._currentCoveragePolygon}getSelectedFeature(){return this.selectedFeature}getSelectedFeaturePolygon(){return this._initialCurrentCoveragePolygon}handleSectorClick(e){if(isNaN(e))return;const t=this._sectorData?.[D.sectorsInOrder[e]];t?.length&&this._updateSelectedFeature(t.at(0))}handleFeatureClick(e){const{sector:t,featureIndexInSector:r}=e;if(isNaN(r))return;const i=this._sectorData?.[t];i?.length&&this._updateSelectedFeature(i.at(r))}async loadBestImage(e){this.displayMessage=null,this.selectedPoint=e.spatialReference.isGeographic?v.geographicToWebMercator(e):e.clone(),this.features.removeAll(),this._additionalCoveragePolygons.removeAll(),this._additionalFeatureGraphics.removeAll(),this._currentCoveragePolygon=h.destroyMaybe(this._currentCoveragePolygon),this._overlays?.removeAll(),this.selectedFeature=null,await this._fetchFeaturesWithController(e)}loadViewer(e){const t=new Map,r={wkid:0};this._imageViewer=new O({container:e,map:t,spatialReferance:r,constraints:{snapToZoom:!1,rotationEnabled:!1},ui:{components:["zoom"]}}),g.once((()=>!0===this._imageViewer?.stationary)).then((()=>{this.setMessage("onLoadMessage","info")})),this._imageViewer.addHandles([g.watch((()=>[this._imageViewer?.viewpoint,this._initialCurrentCoveragePolygon]),((e,t)=>{e?.[1]!==t?.[1]&&(this._initialPreviousCoveragePolygon=this._plotPolygons?null:t?.[1]),this._imageViewer?.viewpoint&&this._initialCurrentCoveragePolygon&&(this._cancelCurrentCoverageUpdate(),this.updateCoverage())})),g.watch((()=>this.selectedFeatureAngle),((e,t)=>{this.previousFeatureAngle=t??0}),g.initial),g.watch((()=>this.selectedFeature),(async()=>{const{selectedFeature:e,selectedPoint:t}=this;if(!e&&this._currentImage&&(this._imageViewer?.map.layers.remove(this._currentImage),this._currentImage=h.destroyMaybe(this._currentImage)),e&&t){this._initialCurrentCoverageUpdate=!0,this._updatePointsAndPolygons(),this._fetchFeaturesController??(this._fetchFeaturesController=new AbortController);const{signal:t}=this._fetchFeaturesController;await this.loadImage(e,{signal:t}).finally((()=>{this._fetchFeaturesController=null}))}}))])}async plotMapPoint(e){return this.plotReferencePoint(e),this.transformAndPlotReferencePointOnImage({feature:this.selectedFeature,selectedLocation:e,options:{signal:this._transformController?.signal}})}resetImage(){this._currentImage=h.destroyMaybe(this._currentImage),this.setMessage("onLoadMessage","info"),this._cancelCurrentCoverageUpdate(),this._cancelFetchingFeatures()}async searchBestImage(e,t){try{const r=await b.searchImages(e,t);r&&await this._processFeatureResponse(r,{signal:t?.signal})}catch(r){const e=l.getLogger(this);this.setMessage("imageLoadError","error"),e.error("error occurred while finding best image",r)}}setAdditionalCameraLocationsVisibility(e){this._additionalFeatureGraphics.forEach((t=>{t.visible=e}))}setAdditionalCoverageVisibility(e){this._additionalCoveragePolygons.forEach((t=>{t.visible=e}))}setCurrentCoverageVisibility(e){this._currentCoveragePolygon&&(this._currentCoveragePolygon.visible=e),this._selectedFeatureGraphic&&(this._selectedFeatureGraphic.visible=e)}setMapImageConversionToolState(e){this.mapImageConversionToolState=e}_cancelFetchingFeatures(e){const t=this._fetchFeaturesController;t&&t.abort(e),this._fetchFeaturesController=null}_cancelCurrentCoverageUpdate(){const e=this._updateCoverageController;e&&e.abort("Multiple Coverage Updates: Aborting Current Coverage Update to sync image and coverage"),this._updateCoverageController=null}async _fetchFeatures(e,t){if(!this.view)return;const r=this.layer;if(r){const i={include:r},o=this.view.toScreen(e);if(!o)return;const a=await this.view.hitTest(o,i);this._processHitTestResults(r,a,t)}}async _fetchFeaturesWithController(e){this._cancelFetchingFeatures();const t=new AbortController,{signal:r}=t;this._fetchFeaturesController=t;try{await this._fetchFeatures(e,{signal:r}).finally((()=>{this._fetchFeaturesController=null}))}catch(i){const e=l.getLogger(this);this.setMessage("imageLoadError","error"),e.error("error occurred while fetching features",i)}}_groupFeaturesBySectors(){const{_suitabilities:e,features:t}=this;if(!e||!t)return void(this._sectorData=null);this._sectorData={};for(const s of D.sectorsInOrder)this._sectorData[s]=new o;const r=e.map(((e,t)=>({...e,featureIndex:t})));r.sort(((e,t)=>e.trueSuitability-t.trueSuitability));const i=r.map((({distance:e})=>e)),a=Math.max(...i);r.forEach((e=>{const{distance:r,angle:i,featureIndex:o}=e;let s="FAR";const n=r/a*D.sectorsRadii[2];n<=D.sectorsRadii[0]?s="NEAR":n<=D.sectorsRadii[1]&&(s="");let l="NORTH";if(Math.abs(i)>=135?l="WEST":i<-45&&i>-135?l="SOUTH":i<=45&&(l="EAST"),!this._sectorData)return;const c=D.sectorsRadii[3]+n*Math.sin(i*Math.PI/180),h=D.sectorsRadii[3]+n*Math.cos(i*Math.PI/180);let g;const u=t.at(o),d=u===this.selectedFeature,p=this.selectedFeature?.attributes.cameraPitch&&this.selectedFeature?.attributes.cameraPitch<5;if(d&&p)g=-90;else{const e=c-D.sectorsRadii[3],t=h-D.sectorsRadii[3],r=t/Math.sqrt(e**2+t**2);let i=180*Math.acos(r)/Math.PI;(e<0&&t<0||e<0&&t>0)&&(i*=-1),g=i}const y=""===s?l:`${s}_${l}`;d&&(g===this.selectedFeatureAngle?this.previousFeatureAngle=g:this.selectedFeatureAngle=g,this.navigatorSelectedFeature=p?null:{x:c,y:h,direction:l});const m=this._sectorData[y];m.add({angle:i,featureIndex:o,x:c,y:h,objectID:u.attributes.objectId,sector:y,featureIndexInSector:m.length})}))}async _processFeatureResponse(e,t){const{selectedPoint:r}=this;if(!r)return;if(!e)return;const i=e;if(!i)return;const{features:o}=i;if(!o.length)return this.setMessage("noImageError","error"),void(this.selectedFeature=null);const a=new Array;this.coveragePolygons.removeAll(),this.coverageFrustums.removeAll(),this.pointSources.removeAll(),o.forEach((e=>{let t;const{polygon:i,frustum:o}=I.createCoveragePolygon(e);if(t=i,e.attributes.isInspection&&(t=I.computePolygonForInspection(e.attributes)),e.layer.coveragePercent&&(t=I.resizePolygon(t,e.layer.coveragePercent)),I.checkIfPolygonContainsSelectedPoint(t,r)){a.push(e);const r=t.toJSON(),i=o?.toJSON(),{attributes:s}=e,{cameraHeight:l,cameraHeading:c,location:h,objectId:g}=s,u=n.isSerializable(h)?h.toJSON():h;r.imageID=u.imageID=g,i&&(i.imageID=g),u.z=l,this.pointSources?.push(u),this.coveragePolygons?.push(c>0?r:void 0),this.coverageFrustums?.push(c>0?i:void 0)}}));const s=this.coveragePolygons?.getItemAt(0);if(!a.length)return void this.setMessage("noImageError","error");if(a[0].attributes.elevationSource&&!r.z&&s){const e=await w.updateElevation([r],{feature:a[0],currentCoveragePolygon:new T(s),options:t});if(e[0]){const t=e[0];r.elevation=t.z}}this._suitabilities=C.calculateSuitabilities({features:a,selectedPoint:r,camera:L.isSceneView(this.view)?this.view.camera:null,currentImage:this.selectedFeature}),this._suitabilities?.sort(((e,t)=>e.suitability-t.suitability));const l=this._suitabilities?.map((e=>e.feature)),c=l[0];this._updateFeatures(l),this.selectedFeature=c,this._groupFeaturesBySectors(),this._initialCurrentCoverageUpdate=!0,this._plotPolygons=!0}async _processHitTestResults(e,t,r){const{screenPoint:i,results:[o]}=t,a="graphic"===o?.type&&this.shouldShowSelectedImage,s={layerInstanceOrURL:e,point:o?.mapPoint??this.view?.toMap(i),queryParams:{maximumDistance:e.maximumDistance,objectIds:a?[o.graphic.getAttribute(e.objectIdField)]:void 0},queryFeatures:null};await this.searchBestImage(s,r)}_updateFeatures(e){e.length&&(this.features.removeAll(),this.features.addMany(e))}_updatePointsAndPolygons(){const{coveragePolygons:e,pointSources:t,selectedFeature:i,currentCoverageVisible:o,isAdditionalCoverageVisible:a,isAdditionalPointSourcesVisible:s}=this;if(e&&t&&i){this._additionalCoveragePolygons.removeAll(),this._additionalFeatureGraphics.removeAll(),this._currentCoveragePolygon&&(this._currentCoveragePolygon.destroy(),this._currentCoveragePolygon=null,this._initialCurrentCoveragePolygon=null);for(const t of e)t?.imageID===i?.attributes.objectId?this._initialCurrentCoveragePolygon=new r({attributes:{imageID:t?.imageID},geometry:{type:"polygon",...t},symbol:E.activePolygonSymbol,visible:!1}):this._additionalCoveragePolygons.push(new r({attributes:{imageID:t?.imageID},geometry:{type:"polygon",...t},symbol:E.polygonSymbol,visible:a}));for(const e of t)e.imageID===i?.attributes.objectId?this._selectedFeatureGraphic=new r({attributes:{imageID:e.imageID},geometry:{type:"point",...e},symbol:E.activeSourcePointSymbol,visible:o}):this._additionalFeatureGraphics?.push(new r({attributes:{imageID:e.imageID},geometry:{type:"point",...e},symbol:E.sourcePointSymbol,visible:s}))}}_updateSelectedFeature(e){if(!e)return;this.selectedFeature=this.features?.at(e.featureIndex);const t=this.selectedFeature?.attributes.cameraPitch&&this.selectedFeature?.attributes.cameraPitch<5;let r;if(t)r=-90;else{const t=e.x-D.sectorsRadii[3],i=e.y-D.sectorsRadii[3],o=i/Math.sqrt(t**2+i**2);let a=180*Math.acos(o)/Math.PI;(t<0&&i<0||t<0&&i>0)&&(a*=-1),r=a}r===this.selectedFeatureAngle?this.previousFeatureAngle=r:this.selectedFeatureAngle=r,this.navigatorSelectedFeature=t?null:{x:e.x,y:e.y,direction:e.sector.includes("_")?e.sector.split("_")[1]:e.sector}}plotReferencePoint(e){"mapPoint"in e?this.plotReferencePointOnGround(e.mapPoint):this.plotReferencePointOnGround(e)}updateCurrentCoveragePolygon(e){if(this._initialCurrentCoverageUpdate)if(this._overlays?.removeAll(),this._initialCurrentCoverageUpdate=!1,e&&(this._currentCoveragePolygon&&this._currentCoveragePolygon.destroy(),e.visible=this.currentCoverageVisible,this._currentCoveragePolygon=e),this.view){this._plotPolygons=!1;const e=this.selectedPoint?new r({geometry:this.selectedPoint.clone(),symbol:E.crossSymbol,attributes:{imageID:this.selectedFeature?.attributes.objectId}}):null;this._overlays?.graphics.addMany([...this._additionalCoveragePolygons,...this._additionalFeatureGraphics,this._currentCoveragePolygon,this._selectedFeatureGraphic,e].filter(L.isGraphic))}else if(this._plotPolygons){this._plotPolygons=!1;const e={points:this.pointSources?.filter((e=>e?.imageID!==this.selectedFeature?.attributes.objectId)),frustums:this.coverageFrustums?.filter((e=>e?.imageID!==this.selectedFeature?.attributes.objectId)),polygons:this._additionalCoveragePolygons?.map((e=>e.geometry?.toJSON())),currentPoint:this.pointSources.find((e=>e?.imageID===this.selectedFeature?.attributes.objectId)),currentPolygon:this._currentCoveragePolygon,currentFrustum:this.coverageFrustums?.find((e=>e?.imageID===this.selectedFeature?.attributes.objectId))};this.emit("plot-polygons",{data:e})}else{const e={currentPoint:this.pointSources.find((e=>e?.imageID===this.selectedFeature?.attributes.objectId)),additionalPoint:this.pointSources.find((e=>e?.imageID===this._initialPreviousCoveragePolygon?.attributes.imageID)),currentPolygon:this._currentCoveragePolygon,additionalPolygon:this._initialPreviousCoveragePolygon};this.emit("update-selected-feature",{data:e})}else if(this.view){const t=this._currentCoveragePolygon&&this._overlays?this._overlays.graphics.indexOf(this._currentCoveragePolygon):-1;e&&(this._currentCoveragePolygon&&(this._overlays?.remove(this._currentCoveragePolygon),this._currentCoveragePolygon.destroy()),e.visible=this.currentCoverageVisible,this._currentCoveragePolygon=e,this._overlays?.graphics.add(this._currentCoveragePolygon,t>=0?t:void 0))}else e&&(this._currentCoveragePolygon=e,this.emit("update-current-coverage",{graphic:e.toJSON()}))}async loadImage(e,t){if(!this._imageViewer)return;if(this._imageViewer.graphics.removeAll(),this._currentImage&&this._imageViewer?.map.layers.includes(this._currentImage)&&(this._currentImage?.removeHandles("image-handles"),this._imageViewer?.map.layers.remove(this._currentImage),this._currentImage?.destroy(),this._currentImage=null),!e)return void this.setMessage("noImageError","error");const{horizontalFieldOfView:r,isSpherical:i}=e.attributes;if(360===r||i)return void this.setMessage("unsupportedPanaromicImageryError","error");let o,a,s=e.attributes.imagePath;if(!N(s)&&!H(s)){if(!this.localPort)return this.setMessage("noLocalPort","error"),void l.getLogger(this).error("oriented-imagery-viewer:missing-local-port","A value for local port is not set. Local port is needed to load local images.");s=`http://127.0.0.1:${this.localPort}/${s}`}this._referencePointOnGround&&(this._imageViewer?.graphics.remove(this._referencePointOnGround),this._referencePointOnGround.destroy());const n={skipExtensions:["aux.xml","jgw"]};if(H(s)){const r=new V({objectIds:[e.attributes.objectId]}),i=(await e.layer.queryAttachments(r,t))[`${e.attributes.objectId}`];if(!i[0]?.url)return void this.setMessage("noAttachment","error");if(o=i[0].contentType.split("/")[1]?.toUpperCase(),s=i[0]?.url,a=await x.open({ioConfig:n,url:s,datasetFormat:o,...t}).catch((e=>(this.setMessage("imageLoadError","error",e.message),null))),!a)return}this._currentImage=new P({ioConfig:n,url:s,raster:a,options:t}),this._imageViewer.map.layers.add(this._currentImage);try{const r=await this._currentImage.when();this._imageViewer.extent=r.fullExtent,r.raster.rasterInfo.isPseudoSpatialReference&&(this._imageViewer.rotation=(e.attributes.cameraRoll??0)+(e.attributes.imageRotation??0)),this._panConstraint&&this._imageViewer.constraints.customConstraints.remove(this._panConstraint),this._scaleConstraint&&this._imageViewer.constraints.customConstraints.remove(this._scaleConstraint),this._panConstraint={constrain:(e,t)=>{if(!this._currentImage||!this._imageViewer||!e.targetGeometry)return e;const{xmin:r,xmax:i,ymin:o,ymax:a}=this._currentImage.fullExtent,{extent:s,rotation:n}=this._imageViewer,l=n*Math.PI/180,c=Math.abs(Math.cos(l)*s.width+Math.sin(l)*s.height),h=Math.abs(Math.cos(l)*s.height+Math.sin(l)*s.width),{rasterInfo:g}=this._currentImage;return e.targetGeometry.x=Math.min(Math.max(r+Math.min(g.width,c)/2,e.targetGeometry.x),i-Math.min(g.width,c)/2),e.targetGeometry.y=Math.min(Math.max(o+Math.min(g.height,h)/2,e.targetGeometry.y),a-Math.min(g.height,h)/2),e},applyPanConstraint:e=>{if(!this._currentImage||!this._imageViewer||!e.targetGeometry)return e;const{xmin:t,xmax:r,ymin:i,ymax:o}=this._currentImage.fullExtent,{extent:a,rotation:s}=this._imageViewer,n=s*Math.PI/180,l=Math.abs(Math.cos(n)*a.width+Math.sin(n)*a.height),c=Math.abs(Math.cos(n)*a.height+Math.sin(n)*a.width),{rasterInfo:h}=this._currentImage;return e.targetGeometry.x=Math.min(Math.max(t+Math.min(h.width,l)/2,e.targetGeometry.x),r-Math.min(h.width,l)/2),e.targetGeometry.y=Math.min(Math.max(i+Math.min(h.height,c)/2,e.targetGeometry.y),o-Math.min(h.height,c)/2),e}},this._scaleConstraint={constrain:(e,t)=>{if(this._imageViewer&&this._currentImage){const{width:t,height:r}=this._currentImage.rasterInfo,{width:i,height:o,rotation:a,zoom:s}=this._imageViewer,n=a*Math.PI/180,l=Math.abs(Math.cos(n)*t+Math.sin(n)*r),c=Math.abs(Math.cos(n)*r+Math.sin(n)*t);s<1&&(e.scale=Math.max(e.scale,A.getResolutionToScaleFactor(this._imageViewer.spatialReference)*Math.max(l/i,c/o)/2**s))}return e}},this._imageViewer.constraints.customConstraints.addMany([this._panConstraint,this._scaleConstraint]),r.addHandles(g.watch((()=>[this.brightness,this.contrast,this.sharpness]),(([e,t,i])=>{r.loaded&&(r.effect=`contrast(${10*(t+10)}%) brightness(${10*(e+10)}%)`,this.sharpenImage(r,i))}),g.initial)),await this.transformAndPlotSelectedLocation(t)}catch(c){l.getLogger(this).error("oriented-imagery-viewer:load-image",c),this.setMessage("imageLoadError","error",c.message)}}sharpenImage(e,t){const r=[0,-1*t,0,-1*t,5,-1*t,0,-1*t,0],i=new S({functionName:"Convolution",functionArguments:{type:M.convolutionKernel.userDefined,cols:3,rows:3,kernel:r,convolutionType:M.convolutionKernel.userDefined}});e.renderer=null,e.rasterFunction=i}async transformAndPlotSelectedLocation(e){const{_currentImage:t,selectedFeature:i,selectedPoint:o}=this;if(!o||!i||!t?.loaded)return;const{pixelSize:a}=t.rasterInfo,s=await w.transformPoints([o],{feature:i,imageProperties:t.rasterInfo,currentCoveragePolygon:this.getSelectedFeaturePolygon(),options:e});if(!s.length)return;const n=s[0];if(!n)return;const l=p.ensureType(_,await R.projectWithEngineOrService(t.fullExtent,p.ensureType(k,this._imageViewer?.spatialReference),null,e?.signal));n.x=n.x*a.x+l.xmin,n.y=l.ymax-n.y*a.y,n.spatialReference=l.spatialReference,this._crossSymbol&&(this._imageViewer?.graphics.remove(this._crossSymbol),this._crossSymbol.destroy()),this._crossSymbol=new r({geometry:U.fromJSON(n),symbol:E.crossSymbol}),this._imageViewer?.graphics.add(this._crossSymbol)}async transformAndPlotReferencePointOnImage(e){if(!this._imageViewer)return;const t=this._currentImage;if(!t)return;const{feature:r,selectedLocation:i,options:o}=e,{pixelSize:a,isPseudoSpatialReference:s,transform:n}=t.rasterInfo,l=await w.transformPoints([i],{feature:r,imageProperties:t.rasterInfo,currentCoveragePolygon:this.getSelectedFeaturePolygon(),options:o});if(!l.length)return;let c=l[0];const h=await R.projectWithEngineOrService(t.fullExtent,this._imageViewer.spatialReference,null,o?.signal);return s?(c.x=c.x*a.x+h.xmin,c.y=h.ymax-c.y*a.y,c.spatialReference=h.spatialReference):c=n.forwardTransform(new U(c)),this.plotReferencePointOnImage(c),{x:c.x,y:c.y}}plotReferencePointOnGround(e){this._referencePointOnGround&&(this._overlays?.remove(this._referencePointOnGround),this._referencePointOnGround.destroy()),this._referencePointOnGround=new r({geometry:{type:"point",...e.toJSON()},symbol:E.diamondSymbol}),this.view?this._overlays?.add(this._referencePointOnGround):this.emit("plot-ground-point",{data:{point:this._referencePointOnGround?.geometry}})}plotReferencePointOnImage(e){this._imageViewer&&(this._referencePointOnImage&&(this._imageViewer.graphics.remove(this._referencePointOnImage),this._referencePointOnImage.destroy()),this._referencePointOnImage=new r({geometry:{type:"point",...n.isSerializable(e)?e.toJSON():e},symbol:E.diamondSymbol}),this._imageViewer.graphics.add(this._referencePointOnImage))}setMessage(e,t,r){this.displayMessage={key:e,type:t,data:r}}async updateCoverage(){const e=new AbortController,{signal:t}=e;this._updateCoverageController=e;const{_imageViewer:i}=this;if(this._currentImage?.loaded&&i){const{width:e,height:o}=this._currentImage.rasterInfo,{xmin:a,xmax:s,ymin:n,ymax:l}=this._currentImage.fullExtent,c=[[0,0],[Math.min(i.width,e),0],[Math.min(i.width,e),Math.min(i.height,o)],[0,Math.min(i.height,o)]].map((e=>i.toMap(u.createScreenPoint(e[0],e[1]))));c.forEach((e=>{e.x=a<=e.x&&e.x<=s?e.x:Math.abs(a-e.x)>Math.abs(s-e.x)?s:a,e.y=n<=e.y&&e.y<=l?e.y:Math.abs(n-e.y)>Math.abs(l-e.y)?l:n}));const h=await F.transformPoints(c,{feature:this.getSelectedFeature(),currentCoveragePolygon:this.getSelectedFeaturePolygon(),imageProperties:this._currentImage.rasterInfo,options:{signal:t}});if(h&&!t.aborted){const e=[h.map((e=>[e.x,e.y,1]))];e[0].push(e[0][0]);const t=new T({hasZ:!0,rings:e,spatialReference:h[0].spatialReference});this.updateCurrentCoveragePolygon(new r({attributes:{imageID:this.selectedFeature?.attributes.objectId},geometry:t,symbol:E.activePolygonSymbol,visible:this.currentCoverageVisible}))}}}};e.__decorate([d.property()],z.prototype,"activeLayer",null),e.__decorate([d.property()],z.prototype,"layer",void 0),e.__decorate([d.property()],z.prototype,"shouldShowSelectedImage",void 0),e.__decorate([d.property({type:Number})],z.prototype,"brightness",null),e.__decorate([d.property({type:Number})],z.prototype,"contrast",null),e.__decorate([d.property()],z.prototype,"coverageFrustums",void 0),e.__decorate([d.property()],z.prototype,"coveragePolygons",void 0),e.__decorate([d.property()],z.prototype,"currentCoverageVisible",void 0),e.__decorate([d.property({readOnly:!0})],z.prototype,"currentImageView",null),e.__decorate([d.property()],z.prototype,"disabled",void 0),e.__decorate([d.property()],z.prototype,"displayMessage",void 0),e.__decorate([d.property()],z.prototype,"pointSources",void 0),e.__decorate([d.property()],z.prototype,"previousFeatureAngle",void 0),e.__decorate([d.property()],z.prototype,"selectedFeature",void 0),e.__decorate([d.property()],z.prototype,"selectedFeatureAngle",void 0),e.__decorate([d.property()],z.prototype,"selectedPoint",void 0),e.__decorate([d.property({readOnly:!0})],z.prototype,"featureCount",null),e.__decorate([d.property()],z.prototype,"features",void 0),e.__decorate([d.property({readOnly:!0})],z.prototype,"imageGalleryEnabled",null),e.__decorate([d.property({readOnly:!0})],z.prototype,"imageLoaded",null),e.__decorate([d.property()],z.prototype,"isAdditionalCoverageVisible",void 0),e.__decorate([d.property()],z.prototype,"isAdditionalPointSourcesVisible",void 0),e.__decorate([d.property({type:Number})],z.prototype,"localPort",void 0),e.__decorate([d.property()],z.prototype,"mapImageConversionToolState",void 0),e.__decorate([d.property()],z.prototype,"navigatorSelectedFeature",void 0),e.__decorate([d.property({readOnly:!0})],z.prototype,"updating",null),e.__decorate([d.property()],z.prototype,"referencePoint",null),e.__decorate([d.property({type:Number})],z.prototype,"sharpness",null),e.__decorate([d.property({readOnly:!0})],z.prototype,"sectorData",null),e.__decorate([d.property({readOnly:!0})],z.prototype,"state",null),e.__decorate([d.property({readOnly:!0})],z.prototype,"thumbnails",null),e.__decorate([d.property({value:null})],z.prototype,"view",null),e.__decorate([d.property()],z.prototype,"_additionalCoveragePolygons",void 0),e.__decorate([d.property()],z.prototype,"_additionalFeatureGraphics",void 0),e.__decorate([d.property()],z.prototype,"_currentCoveragePolygon",void 0),e.__decorate([d.property()],z.prototype,"_currentImage",void 0),e.__decorate([d.property()],z.prototype,"_fetchFeaturesController",void 0),e.__decorate([d.property()],z.prototype,"_imageViewer",void 0),e.__decorate([d.property()],z.prototype,"_initialCurrentCoveragePolygon",void 0),e.__decorate([d.property()],z.prototype,"_initialCurrentCoverageUpdate",void 0),e.__decorate([d.property()],z.prototype,"_overlays",void 0),e.__decorate([d.property()],z.prototype,"_plotPolygons",void 0),e.__decorate([d.property()],z.prototype,"_initialPreviousCoveragePolygon",void 0),e.__decorate([d.property()],z.prototype,"_referencePointOnGround",void 0),e.__decorate([d.property()],z.prototype,"_referencePointOnImage",void 0),e.__decorate([d.property()],z.prototype,"_selectedFeatureGraphic",void 0),e.__decorate([d.property()],z.prototype,"_sectorData",void 0),z=e.__decorate([m.subclass("esri.widgets.OrientedImageryViewer.OrientedImageryViewerViewModel")],z);return z}));
