/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../chunks/tslib.es6","../../geometry","../../Graphic","../../symbols","../../core/arrayUtils","../../core/Error","../../core/Logger","../../core/ReactiveSet","../../core/reactiveUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/has","../../core/accessorSupport/decorators/subclass","../../geometry/support/webMercatorUtils","../../layers/Layer","../../layers/LayerConstants","../../symbols/support/symbolUtils","../../views/support/layerViewUtils","../Feature/FeatureViewModel","../Popup/actions","../Popup/actionUtils","../support/AnchorElementViewModel","../support/GoTo","../../symbols/SimpleFillSymbol","../../geometry/Point"],(function(e,t,r,i,s,o,a,n,l,u,h,c,d,p,g,y,_,f,w,F,v,m,b,C,P){"use strict";const E=()=>[F.zoomToFeature.clone()],A=()=>[F.zoomToClusteredFeatures.clone(),F.browseClusteredFeatures.clone()];let M=class extends(b.GoToMixin(m)){constructor(e){super(e),this._pendingPromises=new n,this._fetchFeaturesController=null,this._highlightSelectedFeaturePromise=null,this._highlightActiveFeaturePromise=null,this._selectedClusterFeature=null,this.actions=new F.ActionsCollection,this.activeFeature=null,this.autoCloseEnabled=!1,this.autoOpenEnabled=!0,this.browseClusterEnabled=!1,this.content=null,this.defaultPopupTemplateEnabled=!1,this.featurePage=null,this.featuresPerPage=20,this.featureMenuOpen=!1,this.featureViewModelAbilities=null,this.featureViewModels=[],this.highlightEnabled=!0,this.includeDefaultActions=!0,this.selectedClusterBoundaryFeature=new r({symbol:new C({outline:{width:1.5,color:"cyan"},style:"none"})}),this.title=null,this.updateLocationEnabled=!1,this.view=null,this.visible=!1,this.zoomFactor=4,this.zoomToLocation=null}initialize(){this.addHandles([this.on("view-change",(()=>this._autoClose())),l.watch((()=>[this.highlightEnabled,this.selectedFeature,this.visible,this.view]),(()=>this._highlightSelectedFeature())),l.watch((()=>[this.highlightEnabled,this.activeFeature,this.visible,this.view]),(()=>this._highlightActiveFeature())),l.watch((()=>this.view?.animation?.state),(e=>this._animationStateChange(e))),l.watch((()=>this.location),(e=>this._locationChange(e))),l.watch((()=>this.selectedFeature),(e=>this._selectedFeatureChange(e))),l.watch((()=>[this.selectedFeatureIndex,this.featureCount,this.featuresPerPage]),(()=>this._selectedFeatureIndexChange())),l.watch((()=>[this.featurePage,this.selectedFeatureIndex,this.featureCount,this.featuresPerPage,this.featureViewModels]),(()=>this._setGraphicOnFeatureViewModels())),l.watch((()=>this.featureViewModels),(()=>this._featureViewModelsChange())),this.on("trigger-action",(e=>v.triggerAction({event:e,viewModel:this,view:this.view}))),l.when((()=>!this.waitingForResult),(()=>this._waitingForResultChange()),l.sync),l.watch((()=>[this.features,this.view?.map,this.view?.spatialReference]),(()=>this._updateFeatureVMs())),l.watch((()=>this.view?.scale),(()=>this._viewScaleChange())),l.when((()=>!this.visible),(()=>this.browseClusterEnabled=!1)),l.watch((()=>this.browseClusterEnabled),(e=>e?this.enableClusterBrowsing():this.disableClusterBrowsing()))])}destroy(){this._cancelFetchingFeatures(),this._pendingPromises.clear(),this.browseClusterEnabled=!1,this.view=null}get active(){return!(!this.visible||this.waitingForResult)}get allActions(){const e=this._get("allActions")||new F.ActionsCollection;e.removeAll();const{actions:t,defaultActions:r,defaultPopupTemplateEnabled:i,includeDefaultActions:s,selectedFeature:o}=this,a=s?r.concat(t):t,n=o&&("function"==typeof o.getEffectivePopupTemplate&&o.getEffectivePopupTemplate(i)||o.popupTemplate),l=n?.actions,u=n?.overwriteActions?l:l?.concat(a)??a;return u?.filter(Boolean).forEach((t=>e.add(t))),e}get defaultActions(){const e=this._get("defaultActions")||new F.ActionsCollection;return e.removeAll(),e.addMany(v.isClusterFeature(this.selectedFeature)?A():E()),e}get featureCount(){return this.features.length}set features(e){const t=e||[];this._set("features",t);const{pendingPromisesCount:r,promiseCount:i,selectedFeatureIndex:s}=this,o=i&&t.length;o&&r&&-1===s?this.selectedFeatureIndex=0:o&&-1!==s||(this.selectedFeatureIndex=t.length?0:-1)}set location(e){let t=e;const r=this.view?.spatialReference?.isWebMercator,i=e?.spatialReference?.isWGS84;i&&r&&(t=p.geographicToWebMercator(e)),this._set("location",t)}get pendingPromisesCount(){return this._pendingPromises.size}get promiseCount(){return this.promises.length}get promises(){return this._get("promises")||[]}set promises(e){this._pendingPromises.clear(),this.features=[],Array.isArray(e)&&e.length?(this._set("promises",e),(e=e.slice(0)).forEach((e=>{this._pendingPromises.add(e);const t=t=>{this._pendingPromises.has(e)&&this._updateFeatures(t),this._updatePendingPromises(e)},r=()=>this._updatePendingPromises(e);e.then(t,r)}))):this._set("promises",[])}get selectedFeature(){const{features:e,selectedFeatureIndex:t}=this;if(-1===t)return null;return e[t]||null}get selectedFeatureIndex(){const e=this._get("selectedFeatureIndex");return"number"==typeof e?e:-1}set selectedFeatureIndex(e){const{featureCount:t}=this;e=isNaN(e)||e<-1||!t?-1:(e+t)%t,this.activeFeature=null,this._set("selectedFeatureIndex",e)}get selectedFeatureViewModel(){return this.featureViewModels[this.selectedFeatureIndex]||null}get state(){return this.view?.ready?"ready":"disabled"}get waitingForContents(){return this.featureViewModels.some((e=>e.waitingForContent))}get waitingForResult(){return!(!(!!this._fetchFeaturesController||this.pendingPromisesCount>0)||0!==this.featureCount)}centerAtLocation(){const{view:e}=this,t=v.getSelectedTarget(this);return t&&e?this.callGoTo({target:{target:t,scale:e.scale}}):Promise.reject(new o("center-at-location:invalid-target-or-view","Cannot center at a location without a target and view.",{target:t,view:e}))}zoomTo(e){return this.callGoTo(e)}clear(){this.set({promises:[],features:[],content:null,title:null,location:null,activeFeature:null})}fetchFeatures(e,t){const{view:r}=this;if(!r||!e)throw new o("fetch-features:invalid-screenpoint-or-view","Cannot fetch features without a screenPoint and view.",{screenPoint:e,view:r});return r.fetchPopupFeatures(e,{event:t?.event,defaultPopupTemplateEnabled:this.defaultPopupTemplateEnabled,signal:t?.signal})}open(e){const t={updateLocationEnabled:!1,promises:[],fetchFeatures:!1,...e,visible:!0},{fetchFeatures:r}=t;delete t.fetchFeatures,r&&this._setFetchFeaturesPromises(t.location);const i=["actionsMenuOpen","collapsed"];for(const s of i)delete t[s];this.set(t)}triggerAction(e){const t=this.allActions.at(e);t&&!t.disabled&&this.emit("trigger-action",{action:t})}next(){return this.selectedFeatureIndex++,this}previous(){return this.selectedFeatureIndex--,this}disableClusterBrowsing(){v.removeClusteredFeaturesForBrowsing(this),this._clearBrowsedClusterGraphics()}async enableClusterBrowsing(){const{view:e,selectedFeature:t}=this;"2d"===e?.type?v.isClusterFeature(t)?(await v.displayClusterExtent(this),await v.browseAggregateFeatures(this)):a.getLogger(this).warn("enableClusterBrowsing:invalid-selectedFeature: Selected feature must represent an aggregate/cluster graphic.",t):a.getLogger(this).warn("enableClusterBrowsing:invalid-view: View must be 2d MapView.",t)}handleViewClick(e){this.autoOpenEnabled&&this._fetchFeaturesAndOpen(e)}_animationStateChange(e){this.zoomToLocation||(F.zoomToFeature.disabled="waiting-for-target"===e)}_clearBrowsedClusterGraphics(){const e=[this.selectedClusterBoundaryFeature,this._selectedClusterFeature].filter(s.isSome);this.view?.graphics?.removeMany(e),this._selectedClusterFeature=null,this.selectedClusterBoundaryFeature.geometry=null}_viewScaleChange(){if(v.isClusterFeature(this.selectedFeature))return this.browseClusterEnabled=!1,this.visible=!1,void this.clear();this.browseClusterEnabled&&(this.features=this.selectedFeature?[this.selectedFeature]:[])}_locationChange(e){const{selectedFeature:t,updateLocationEnabled:r}=this;r&&e&&(!t||t.geometry)&&this.centerAtLocation()}_selectedFeatureIndexChange(){this.featurePage=this.featureCount>1?Math.floor(this.selectedFeatureIndex/this.featuresPerPage)+1:null}_featureViewModelsChange(){this.featurePage=this.featureCount>1?1:null}_setGraphicOnFeatureViewModels(){const{features:e,featureCount:t,featurePage:r,featuresPerPage:i,featureViewModels:s}=this;if(null===r)return;const o=((r-1)*i+t)%t,a=o+i;s.slice(o,a).forEach(((t,r)=>{t&&(t.graphic??(t.graphic=e[o+r]))}))}async _selectedFeatureChange(e){const{location:t,updateLocationEnabled:r,view:i}=this;if(e&&i){if(this.browseClusterEnabled){if(this._selectedClusterFeature&&(i.graphics.remove(this._selectedClusterFeature),this._selectedClusterFeature=null),v.isClusterFeature(e))return;return e.symbol=await _.getDisplayedSymbol(e),this._selectedClusterFeature=e,void i.graphics.add(this._selectedClusterFeature)}if(!r&&t||!e.geometry){if(r&&!e.geometry){await this.centerAtLocation();const e=i.center?.clone();e&&(this.location=e)}}else this.location=v.getPointFromGeometry(e.geometry)}}_waitingForResultChange(){!this.featureCount&&this.promises&&(this.visible=!1)}async _setFetchFeaturesPromises(e){const{clientOnlyGraphics:t,promisesPerLayerView:r}=await this._fetchFeaturesWithController(this._getScreenPoint(e||this.location)),i=Promise.resolve(t),s=r.map((e=>e.promise));this.promises=[i,...s]}_destroyFeatureVMs(){this.featureViewModels.forEach((e=>e&&!e.destroyed&&e.destroy())),this._set("featureViewModels",[])}_updateFeatureVMs(){const{selectedFeature:e,features:t,featureViewModels:r,view:i}=this;if(v.isClusterFeature(e)||(this.browseClusterEnabled=!1),this._destroyFeatureVMs(),!t?.length)return;const s=r.slice(0),o=[];t.forEach(((t,r)=>{if(!t)return;let a=null;if(s.some(((e,r)=>(e&&e.graphic===t&&(a=e,s.splice(r,1)),!!a))),a)o[r]=a;else{const s=new w({abilities:this.featureViewModelAbilities,defaultPopupTemplateEnabled:this.defaultPopupTemplateEnabled,spatialReference:i?.spatialReference,graphic:t===e?t:null,map:i?.map,view:i});o[r]=s}})),s.forEach((e=>e&&!e.destroyed&&e.destroy())),this._set("featureViewModels",o)}_getScreenPoint(e){const{view:t}=this;return t&&e&&"function"==typeof t.toScreen?t.toScreen(e):null}_cancelFetchingFeatures(){const e=this._fetchFeaturesController;e&&e.abort(),this._fetchFeaturesController=null}_fetchFeaturesWithController(e,t){this._cancelFetchingFeatures();const r=new AbortController,{signal:i}=r;this._fetchFeaturesController=r;const s=this.fetchFeatures(e,{signal:i,event:t});return s.catch((()=>{})).then((()=>{this._fetchFeaturesController=null})),s}async _fetchFeaturesAndOpen(e){const{screenPoint:t,mapPoint:r}=e,{view:i}=this,{clientOnlyGraphics:s,promisesPerLayerView:o,location:a}=await this._fetchFeaturesWithController(t,e),n=[Promise.resolve(s),...o.map((e=>e.promise))];i?.popup&&"open"in i.popup&&i.popup.open({location:a||r,promises:n})}_updatePendingPromises(e){e&&this._pendingPromises.has(e)&&this._pendingPromises.delete(e)}_autoClose(){this.autoCloseEnabled&&(this.visible=!1)}async _getLayerView(e,t){return await e.when(),e.whenLayerView(t)}_getHighlightLayer(e){const{layer:t,sourceLayer:r}=e;return r&&"layer"in r&&r.layer?r.layer:"map-notes"===r?.type||"subtype-group"===r?.type?r:t}_getHighlightTarget(e,t){const r="imagery"===t.type?void 0:"objectIdField"in t?t.objectIdField||y.fallbackObjectIDAttribute:null,i=e.attributes;return i&&r&&i[r]||e}_mapIncludesLayer(e){return!!this.view?.map?.allLayers?.includes(e)}async _highlightActiveFeature(){const e="highlight-active-feature";this.removeHandles(e);const{highlightEnabled:t,view:r,activeFeature:i,visible:s}=this;if(!(i&&r&&t&&s))return;const o=this._getHighlightLayer(i);if(!(o&&o instanceof g&&this._mapIncludesLayer(o)))return;const a=this._getLayerView(r,o);this._highlightActiveFeaturePromise=a;const n=await a;if(!(n&&f.highlightsSupported(n)&&this._highlightActiveFeaturePromise===a&&this.activeFeature&&this.highlightEnabled))return;const l=n.highlight(this._getHighlightTarget(i,o));this.addHandles(l,e)}async _highlightSelectedFeature(){const e="highlight-selected-feature";this.removeHandles(e);const{selectedFeature:t,highlightEnabled:r,view:i,visible:s}=this;if(!(t&&i&&r&&s))return;const o=this._getHighlightLayer(t);if(!(o&&o instanceof g&&this._mapIncludesLayer(o)))return;const a=this._getLayerView(i,o);this._highlightSelectedFeaturePromise=a;const n=await a;if(!(n&&f.highlightsSupported(n)&&this._highlightSelectedFeaturePromise===a&&this.selectedFeature&&this.highlightEnabled&&this.visible))return;const l=n.highlight(this._getHighlightTarget(t,o));this.addHandles(l,e)}_updateFeatures(e){const{features:t}=this;if(!e?.length)return;if(!t.length)return void(this.features=e);const r=e.filter((e=>!t.includes(e)));this.features=t.concat(r)}};e.__decorate([u.property()],M.prototype,"_fetchFeaturesController",void 0),e.__decorate([u.property({type:F.ActionsCollection})],M.prototype,"actions",void 0),e.__decorate([u.property({readOnly:!0})],M.prototype,"active",null),e.__decorate([u.property()],M.prototype,"activeFeature",void 0),e.__decorate([u.property({readOnly:!0})],M.prototype,"allActions",null),e.__decorate([u.property()],M.prototype,"autoCloseEnabled",void 0),e.__decorate([u.property()],M.prototype,"autoOpenEnabled",void 0),e.__decorate([u.property()],M.prototype,"browseClusterEnabled",void 0),e.__decorate([u.property()],M.prototype,"content",void 0),e.__decorate([u.property({type:F.ActionsCollection,readOnly:!0})],M.prototype,"defaultActions",null),e.__decorate([u.property({type:Boolean})],M.prototype,"defaultPopupTemplateEnabled",void 0),e.__decorate([u.property({readOnly:!0})],M.prototype,"featureCount",null),e.__decorate([u.property()],M.prototype,"featurePage",void 0),e.__decorate([u.property({value:[]})],M.prototype,"features",null),e.__decorate([u.property()],M.prototype,"featuresPerPage",void 0),e.__decorate([u.property()],M.prototype,"featureMenuOpen",void 0),e.__decorate([u.property()],M.prototype,"featureViewModelAbilities",void 0),e.__decorate([u.property({readOnly:!0})],M.prototype,"featureViewModels",void 0),e.__decorate([u.property()],M.prototype,"highlightEnabled",void 0),e.__decorate([u.property()],M.prototype,"includeDefaultActions",void 0),e.__decorate([u.property({type:P})],M.prototype,"location",null),e.__decorate([u.property({readOnly:!0})],M.prototype,"pendingPromisesCount",null),e.__decorate([u.property({readOnly:!0})],M.prototype,"promiseCount",null),e.__decorate([u.property()],M.prototype,"promises",null),e.__decorate([u.property({readOnly:!0})],M.prototype,"selectedClusterBoundaryFeature",void 0),e.__decorate([u.property({value:null,readOnly:!0})],M.prototype,"selectedFeature",null),e.__decorate([u.property({value:-1})],M.prototype,"selectedFeatureIndex",null),e.__decorate([u.property({readOnly:!0})],M.prototype,"selectedFeatureViewModel",null),e.__decorate([u.property({readOnly:!0})],M.prototype,"state",null),e.__decorate([u.property()],M.prototype,"title",void 0),e.__decorate([u.property()],M.prototype,"updateLocationEnabled",void 0),e.__decorate([u.property()],M.prototype,"view",void 0),e.__decorate([u.property()],M.prototype,"visible",void 0),e.__decorate([u.property({readOnly:!0})],M.prototype,"waitingForContents",null),e.__decorate([u.property({readOnly:!0})],M.prototype,"waitingForResult",null),e.__decorate([u.property()],M.prototype,"zoomFactor",void 0),e.__decorate([u.property()],M.prototype,"zoomToLocation",void 0),e.__decorate([u.property()],M.prototype,"centerAtLocation",null),M=e.__decorate([d.subclass("esri.widgets.Features.FeaturesViewModel")],M);return M}));
