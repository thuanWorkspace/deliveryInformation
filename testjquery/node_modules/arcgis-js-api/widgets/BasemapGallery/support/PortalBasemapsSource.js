/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../Basemap","../../../core/Collection","../../../core/Error","../../../core/Loadable","../../../core/Logger","../../../core/Promise","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../portal/Portal","./LocalBasemapsSource"],(function(t,e,a,r,s,o,l,i,p,n,c,h,u,d,y,m){"use strict";const _=a.ofType(e);let f=class extends(s.LoadableMixin(l.EsriPromiseMixin(m))){constructor(t){super(t),this._lastPortalBasemapFetchController=null,this.basemaps=new _,this.filterFunction=null,this.portal=y.getDefault(),this.query=null,this.updateBasemapsCallback=null,this.viewType=null}initialize(){this.addHandles([p.watch((()=>[this.filterFunction,this.loadStatus,this.portal?.basemapGalleryGroupQuery,this.portal?.basemapGalleryGroupQuery3D,this.portal?.user,this.query,this.updateBasemapsCallback]),(()=>this.refresh()),p.initial)])}destroy(){this.filterFunction=null,this.portal=null,this.basemaps.forEach((t=>t.destroy()))}get state(){return"not-loaded"===this.loadStatus?"not-loaded":"loading"===this.loadStatus||this._lastPortalBasemapFetchController?"loading":"ready"}load(t){return this.addResolvingPromise(this.portal.load(t)),Promise.resolve(this)}async refresh(){if("loaded"!==this.loadStatus)return;this._lastPortalBasemapFetchController&&(this._lastPortalBasemapFetchController.abort(),this._lastPortalBasemapFetchController=null);const t=this.portal,e=new AbortController;this._lastPortalBasemapFetchController=e,this.notifyChange("state");try{const a=await t.fetchBasemaps(this._toQueryString(this.query),{signal:e.signal,include3d:"3d"===this.viewType||void 0});await this._updateBasemaps(a)}catch(a){if(i.isAbortError(a))throw a;o.getLogger(this).warn(new r("basemap-source:fetch-basemaps-error","Could not fetch basemaps from portal.",{error:a})),await this._updateBasemaps()}this._lastPortalBasemapFetchController=null,this.notifyChange("state")}_toQueryString(t){return t&&"string"!=typeof t?Object.keys(t).map((e=>`${e}:${t[e]}`)).join(" AND "):t}async _updateBasemaps(t=[]){let e=await this._filterBasemaps(t);e=this.updateBasemapsCallback?this.updateBasemapsCallback(e):e,this.basemaps.removeAll(),this.basemaps.addMany(e)}async _filterBasemaps(t){if(!this.filterFunction)return t;const e=t.map(this.filterFunction),a=await Promise.all(e);return t.filter(((t,e)=>a[e]))}};t.__decorate([n.property({readOnly:!0,type:_})],f.prototype,"basemaps",void 0),t.__decorate([n.property()],f.prototype,"filterFunction",void 0),t.__decorate([n.property({type:y})],f.prototype,"portal",void 0),t.__decorate([n.property()],f.prototype,"query",void 0),t.__decorate([n.property({readOnly:!0})],f.prototype,"state",null),t.__decorate([n.property()],f.prototype,"updateBasemapsCallback",void 0),t.__decorate([n.property()],f.prototype,"viewType",void 0),f=t.__decorate([d.subclass("esri.widgets.BasemapGallery.support.PortalBasemapsSource")],f);return f}));
