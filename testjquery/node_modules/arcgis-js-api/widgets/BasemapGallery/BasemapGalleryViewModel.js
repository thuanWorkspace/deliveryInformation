/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
define(["../../chunks/tslib.es6","../../Basemap","../../core/Collection","../../core/Loadable","../../core/reactiveUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/decorators/cast","../../core/arrayUtils","../../core/has","../../core/accessorSupport/decorators/subclass","../../geometry/projection","../../geometry/support/spatialReferenceUtils","../../support/basemapUtils","./support/basemapCompatibilityUtils","./support/BasemapGalleryItem","./support/LocalBasemapsSource","./support/PortalBasemapsSource"],(function(e,t,a,i,s,r,o,n,p,c,l,u,d,m,h,y,v){"use strict";const _=a.ofType(h);function f(e){return e&&"esri.portal.Portal"===e.declaredClass}function b(e){return e&&!(e instanceof v)&&(!!e.portal||!!e.query)}function B(e){return e&&"basemaps"in e&&"state"in e&&"refresh"in e}let g=class extends i{constructor(e){super(e),this._loadingProjectionEngine=!1,this._originalActiveBasemap=null,this.includeCurrentBasemap=!1,this.items=new _,this.source=new v,this.view=null}initialize(){const e=()=>this._recreateItems();this.addHandles([s.watch((()=>[this.view,this.view?.ready]),(()=>{this.view?.ready&&(this._originalActiveBasemap=this.activeBasemap)}),{initial:!0}),s.watch((()=>"ready"===this.state?this.compatibilityFunction:null),(()=>this._updateItems())),s.watch((()=>[this._effectiveIncludeCurrentBasemap,this._originalActiveBasemap]),e),s.on((()=>this.source?.basemaps),"change",e,{onListenerAdd:e}),s.when((()=>this.view),(()=>{this.source instanceof v&&(this.source.viewType=this.view?.type)}),{once:!0})])}destroy(){const e=this.source.basemaps.find((e=>e===this.activeBasemap));e&&this.source.basemaps.remove(e),this.source?.destroy()}get _effectiveIncludeCurrentBasemap(){return this.includeCurrentBasemap&&this.source?.basemaps.every((e=>"loading"!==e.loadStatus))}get activeBasemap(){return this.view?.map?.basemap??null}set activeBasemap(e){const a=this.view;if(!a?.map)return;const i="string"==typeof e?t.fromId(e):e;if(!i||!a.ready)return a.map.basemap=i,void this._clearOverride("activeBasemap");const s=i.spatialReference||this.items?.find((e=>this.basemapEquals(i,e.basemap)))?.spatialReference;if(s&&"spatialReferenceLocked"in a&&!a.spatialReferenceLocked){const t=a.spatialReference;if(null!=s&&!u.equals(t,s)&&!l.canProjectWithoutEngine(a.spatialReference,s)&&!l.isLoaded())return this._override("activeBasemap",i),this._loadingProjectionEngine=!0,void l.load().then((()=>{this._get("activeBasemap")===e&&(a.map.basemap=e,a.spatialReference=s,this._clearOverride("activeBasemap"))}),(()=>{})).then((()=>{this._loadingProjectionEngine=!1}));a.map.basemap=i,this._clearOverride("activeBasemap"),null==s||u.equals(a.spatialReference,s)||(a.spatialReference=s)}else a.map.basemap=i,this._clearOverride("activeBasemap")}get activeBasemapIndex(){const{state:e,activeBasemap:t}=this;return"ready"!==e?-1:this._findBasemapIndex(t)}get compatibilityFunction(){return"3d"===this.view?.type?m.default3DCompatibility:m.default2DCompatibility}set compatibilityFunction(e){this._overrideIfSome("compatibilityFunction",e)}castSource(e){return Array.isArray(e)||a.isCollection(e)?new y({basemaps:e}):f(e)?new v({portal:e}):b(e)?new v(e):B(e)?e:null}get state(){return this.view?.ready&&this.source?this._loadingProjectionEngine?"loading":"ready":"disabled"}basemapEquals(e,t){return d.contentEquals(e,t)}refresh(){this._recreateItems()}load(e){return this.addResolvingPromise(i.isLoadable(this.source)?this.source.load(e):null),Promise.resolve(this)}_findBasemapIndex(e){const{items:t}=this,a=t.findIndex((t=>t.basemap===e));return-1===a?t.findIndex((t=>this.basemapEquals(t.basemap,e))):a}_recreateItems(){const e=this.source?.basemaps,{view:t,compatibilityFunction:a}=this,i=new Map(this.items.map((e=>[e.basemap,e])));function s(e){const s=i.get(e);return s?(i.delete(e),s):new h({basemap:e,compatibilityFunction:a,view:t})}this.items.removeAll(),e&&this.items.addMany(e.map(s));const r=-1!==this._findBasemapIndex(this._originalActiveBasemap);this._effectiveIncludeCurrentBasemap&&!r&&null!=this._originalActiveBasemap&&this.items.unshift(s(this._originalActiveBasemap)),i.forEach((e=>e.destroy()))}_updateItems(){for(const e of this.items)e.compatibilityFunction=this.compatibilityFunction,e.view=this.view}};e.__decorate([r.property()],g.prototype,"_effectiveIncludeCurrentBasemap",null),e.__decorate([r.property()],g.prototype,"_loadingProjectionEngine",void 0),e.__decorate([r.property()],g.prototype,"_originalActiveBasemap",void 0),e.__decorate([r.property()],g.prototype,"activeBasemap",null),e.__decorate([r.property({readOnly:!0})],g.prototype,"activeBasemapIndex",null),e.__decorate([r.property()],g.prototype,"compatibilityFunction",null),e.__decorate([r.property()],g.prototype,"includeCurrentBasemap",void 0),e.__decorate([r.property({readOnly:!0,type:_})],g.prototype,"items",void 0),e.__decorate([r.property()],g.prototype,"source",void 0),e.__decorate([o.cast("source")],g.prototype,"castSource",null),e.__decorate([r.property({readOnly:!0})],g.prototype,"state",null),e.__decorate([r.property()],g.prototype,"view",void 0),g=e.__decorate([c.subclass("esri.widgets.BasemapGallery.BasemapGalleryViewModel")],g);return g}));
